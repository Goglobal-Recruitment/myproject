/*! For license information please see 0d919837.225661b0.chunk.js.LICENSE.txt */
(self["b-search-web-searchbox-component-service__LOADABLE_LOADED_CHUNKS__"] = self["b-search-web-searchbox-component-service__LOADABLE_LOADED_CHUNKS__"] || []).push([
    ["0d919837"], {
        a0a3fa34: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => Se
            });
            var i = t("3d054e81"),
                a = t("ead71eb0"),
                r = t.n(a),
                d = t("8521b397"),
                s = t.n(d),
                l = t("e4cbd52b"),
                o = t.n(l),
                u = t("6222292b"),
                c = t("bd5facb2"),
                m = t.n(c),
                v = t("abab1afe"),
                k = t("c44dcb0c"),
                g = t("bc26e4f1");
            const p = function() {
                    return a.createElement("svg", {
                        xmlns: "http://www.w3.org/2000/svg",
                        viewBox: "0 0 24 24",
                        width: "50px"
                    }, a.createElement("path", {
                        d: "M21.14 22.94a1 1 0 0 1-1 1H3.86a1 1 0 1 1 0-2h16.28a1 1 0 0 1 1 1M4 10h7v7a1 1 0 0 0 2 0v-7h7a1 1 0 0 0 0-2h-7V1a1 1 0 0 0-2 0v7H4a1 1 0 0 0 0 2"
                    }))
                },
                f = "f0a464a4f7",
                h = "fb6f2a3ebc",
                N = "b2f6d224f5",
                S = "a90c7b40ea",
                _ = "d5dcd44e2b",
                y = "e7362e5f34",
                b = "ee424de2c2",
                F = "c2710d7e3d",
                E = "b9f65a6b27",
                T = "ac60f6e77d",
                C = "a61d4d9595",
                I = "b9a9d35b9e",
                A = "c909966660",
                O = "d5e4f3d497";

            function D(e) {
                let {
                    flexibleDates: n,
                    i18n: t,
                    className: i
                } = e;
                const a = [],
                    d = null === n || void 0 === n ? void 0 : n.selected;
                return null === n || void 0 === n || n.windows.forEach((e => {
                    "exact" === e ? a.push(r().createElement(u.Chip, {
                        key: e,
                        label: t.trans((0, v.t)("sr_flex_dates_exact_dates")),
                        name: "",
                        checked: "exact" === d,
                        value: e,
                        onChange: e => {
                            var t;
                            null === (t = n.onChange) || void 0 === t || t.call(n, {
                                value: e.value,
                                selected: e.checked
                            })
                        }
                    })) : a.push(r().createElement(u.Chip, {
                        key: e,
                        icon: r().createElement(u.Icon, {
                            svg: r().createElement(p, null),
                            size: "small"
                        }),
                        attributes: {
                            "aria-label": t.trans((0, v.t)("sr_sbox_flex_dates_short_term_flex_chip_a11y", {
                                variables: {
                                    num_days: e
                                },
                                num_exception: e
                            }))
                        },
                        label: t.trans((0, v.t)("num_days", {
                            variables: {
                                num: e
                            },
                            num_exception: e
                        })),
                        name: "",
                        checked: d === e,
                        value: String(e),
                        onChange: e => {
                            var t;
                            null === (t = n.onChange) || void 0 === t || t.call(n, {
                                value: Number(e.value),
                                selected: e.checked
                            })
                        }
                    }))
                })), r().createElement("fieldset", {
                    className: O
                }, r().createElement(u.Carousel, {
                    previousButtonAriaLabel: t.trans((0, v.t)("sxp_carousel_accessibility_previous")),
                    nextButtonAriaLabel: t.trans((0, v.t)("sxp_carousel_accessibility_next")),
                    attributes: {
                        "data-testid": "flexible-dates-container"
                    },
                    className: i
                }, a))
            }
            const R = e => {
                const n = e.attachmentData.data[e.formattedDate];
                return n && "tooltipText" in n && n.tooltipText ? r().createElement(u.Tooltip, {
                    text: n.tooltipText
                }, (n => r().createElement("span", (0, i.Z)({}, n, {
                    "data-testid": "tooltip-trigger"
                }), e.node))) : e.node
            };
            const x = e => {
                let {
                    startDate: n,
                    endDate: t,
                    i18n: i,
                    localiseDate: a
                } = e, r = "";
                return r += n ? a(n, {
                    where: "calendar-footer"
                }) : i.trans((0, v.t)("search_box_cal_checkin_date")), r += " - ", r += t ? a(t, {
                    where: "calendar-footer"
                }) : i.trans((0, v.t)("search_box_cal_checout_date")), n && t && (r += " (" + function(e) {
                    let {
                        startDate: n,
                        endDate: t,
                        i18n: i
                    } = e;
                    const a = (0, g.VS)(n, t);
                    if (a >= 7 && a % 7 === 0) return i.trans((0, v.t)("bh_sbox_general_dates_num_weeks", {
                        variables: {
                            num_weeks: a / 7
                        },
                        num_exception: a / 7
                    }));
                    return i.trans((0, v.t)("sbox_general_dates_num_nights_1", {
                        variables: {
                            num_nights: a
                        },
                        num_exception: a
                    }))
                }({
                    startDate: n,
                    endDate: t,
                    i18n: i
                }) + ")"), r
            };
            const P = function(e) {
                var n;
                let {
                    attachmentData: t,
                    calendarProps: a,
                    calendarFooter: d,
                    isOverlayed: l,
                    localiseDate: c,
                    onDateChange: m = o(),
                    isFull: v
                } = e;
                const p = (0, k.useI18n)();
                let O;
                if (d && !l && (d.custom ? O = () => d.custom : d.flexibleDates && d.flexibleDates.windows ? O = () => D({
                        flexibleDates: d.flexibleDates,
                        i18n: p,
                        className: A
                    }) : d.isRenderSelected && (O = e => {
                        let {
                            startDate: n,
                            endDate: t
                        } = e;
                        return x({
                            startDate: n,
                            endDate: t,
                            localiseDate: c,
                            i18n: p
                        })
                    }), d.isDoneButton && O)) {
                    const e = O;
                    O = n => r().createElement("div", {
                        className: C
                    }, null === e || void 0 === e ? void 0 : e(n), r().createElement(u.Button, {
                        className: I,
                        text: p.trans((0, k.t)("sr_sbox_select_dates_cta")),
                        onClick: d.onDoneButtonClick
                    }))
                }
                const P = O || null !== d && void 0 !== d && d.preFooter ? r().createElement("div", null, null !== d && void 0 !== d && d.preFooter ? r().createElement("div", {
                        className: E,
                        "data-testid": "datepicker-prefooter"
                    }, null === d || void 0 === d ? void 0 : d.preFooter) : null, O ? r().createElement("div", {
                        className: T,
                        "data-testid": "datepicker-footer"
                    }, null === (n = O) || void 0 === n ? void 0 : n({
                        startDate: a.startDate || null,
                        endDate: a.endDate || null
                    })) : null) : null,
                    L = r().createElement(r().Fragment, null, r().createElement(u.Calendar, (0, i.Z)({}, a, function(e) {
                        let {
                            attachmentData: n,
                            calendarProps: t
                        } = e;
                        return null !== n && void 0 !== n && n.data ? {
                            renderAttachment: e => {
                                let {
                                    date: i
                                } = e;
                                if (t.minDate && (0, g.hF)(i, t.minDate) || t.maxDate && (0, g.Sl)(i, t.maxDate)) return {
                                    text: ""
                                };
                                const a = (0, g.Gr)(i),
                                    d = n.data[a];
                                return {
                                    text: r().createElement("span", {
                                        className: y
                                    }, d && "text" in d && d.text ? d.text : "\u2014"),
                                    loading: d && "isLoading" in d
                                }
                            },
                            renderDay: e => {
                                if (t.minDate && (0, g.hF)(e, t.minDate) || t.maxDate && (0, g.Sl)(e, t.maxDate)) return e.getDate();
                                const i = (0, g.Gr)(e),
                                    a = n.data[i];
                                return a && "text" in a && a.text ? R({
                                    node: e.getDate(),
                                    formattedDate: i,
                                    attachmentData: n
                                }) : R({
                                    node: r().createElement("span", {
                                        className: F
                                    }, e.getDate()),
                                    formattedDate: i,
                                    attachmentData: n
                                })
                            },
                            selectedDayClassName: b,
                            dayClassName: _
                        } : null
                    }({
                        attachmentData: t,
                        calendarProps: a
                    }), {
                        className: s()(h, l && N, l && (null === d || void 0 === d ? void 0 : d.flexibleDates) && S),
                        previousAriaLabel: p.trans((0, k.t)("previous_month")),
                        nextAriaLabel: p.trans((0, k.t)("next_month")),
                        onDateChange: m,
                        attributes: {
                            tabIndex: -1,
                            "data-testid": "searchbox-datepicker-calendar",
                            onClick: e => {
                                const n = e.target.closest("button");
                                var t;
                                n && n.getAttribute("aria-label") === p.trans((0, k.t)("next_month")) && (null === (t = n.parentElement) || void 0 === t || t.focus({
                                    preventScroll: !0
                                }))
                            }
                        },
                        fullHeight: v
                    })), P);
                return l ? L : r().createElement("div", {
                    className: f
                }, L)
            };
            var L = t("618ef7a2");
            const w = "c68d190a9e",
                B = "fc5844c26c",
                U = "c95d4200e6",
                M = "cc55845600",
                H = "fdad4215a8",
                V = "db4f13db71",
                G = "e18a27bf43",
                Y = "bbfc672033",
                W = "b255a70ca4",
                K = "d176711863",
                $ = "b996458cba",
                q = "fd8258f8a6",
                Z = "e30dab8d6a",
                j = "d0b68d2bc2",
                z = "fb1145c89b",
                Q = "fdb89f1301",
                X = "b988e90b2a",
                J = "d810db075c",
                ee = "d445ed6f17",
                ne = "ea71a80e53";
            const te = "duration-check-in-day-label-id";
            const ie = function(e) {
                let {
                    longTermFlexibleDatesConfig: n,
                    maxLOS: t,
                    selected: i,
                    onChange: a
                } = e;
                const d = (0, k.useI18n)(),
                    s = n.days.map((e => r().createElement(u.InputRadio, {
                        attributes: {
                            "data-testid": "flexible-dates-day"
                        },
                        className: W,
                        label: e.name,
                        key: e.name,
                        value: (0, L.c1)(e)
                    }))),
                    l = [];
                for (const r in n.weekDays) {
                    const e = n.weekDays[r];
                    l.push({
                        text: e.name,
                        value: r
                    })
                }
                return r().createElement(u.Container, {
                    className: M,
                    attributes: {
                        "data-testid": "flexible-dates-days"
                    },
                    fullWidth: !0
                }, r().createElement(u.InputRadioGroup, {
                    label: r().createElement(u.Text, {
                        variant: "strong_1",
                        tagName: "span",
                        className: Y
                    }, d.trans((0, k.t)("sr_sbox_flex_dates_choose_days_head"))),
                    name: "flexible_los",
                    value: (0, L.c1)(i),
                    onChange: e => {
                        let {
                            value: n
                        } = e;
                        a({
                            what: "day",
                            checked: !0,
                            ...(0, L.Cx)(n)
                        })
                    }
                }, r().createElement(u.Stack, {
                    direction: "row",
                    gap: 2,
                    className: ne
                }, s)), function(e) {
                    return Boolean((null === e || void 0 === e ? void 0 : e.isDayCustom) && "duration" in e && "startDay" in e)
                }(i) ? r().createElement("div", {
                    className: V,
                    "data-testid": "flexible-dates-custom-days"
                }, r().createElement(u.Text, {
                    className: $,
                    variant: "body_2",
                    color: "neutral_alt",
                    tagName: "legend",
                    attributes: {
                        id: te
                    }
                }, r().createElement(k.Trans, {
                    tag: "sr_sbox_flex_dates_other_stay_length_check_in"
                })), r().createElement(u.Stack, {
                    direction: "row",
                    gap: 2
                }, r().createElement(u.InputText, {
                    inputClassName: K,
                    value: i.duration ? String(i.duration) : "",
                    type: "number",
                    name: "",
                    suffix: d.trans((0, k.t)("sr_sbox_flex_dates_custom_selection_no_num_nights", {
                        num_exception: i.duration
                    })),
                    inputAttributes: {
                        "aria-labelledby": te,
                        min: "1",
                        max: String(t)
                    },
                    onFocus: e => {
                        e.target.select()
                    },
                    onChange: e => {
                        let n = Number(e.value.trim());
                        isNaN(n) || n < 1 ? n = 0 : n > t && (n = t), a({
                            what: "day",
                            checked: !0,
                            duration: n,
                            startDay: i.startDay,
                            isDayCustom: !0
                        })
                    }
                }), r().createElement(u.InputSelect, {
                    inputClassName: K,
                    name: "",
                    value: String(i.startDay),
                    onChange: e => {
                        a({
                            what: "day",
                            checked: !0,
                            duration: i.duration,
                            startDay: Number(e.value),
                            isDayCustom: !0
                        })
                    },
                    options: l,
                    inputAttributes: {
                        "aria-labelledby": te
                    }
                }))) : null)
            };
            var ae = t("08b473e0");
            const re = function(e) {
                let {
                    longTermFlexibleDatesConfig: n,
                    selected: t,
                    onChange: i
                } = e;
                const a = (0, k.useI18n)(),
                    d = [];
                for (const l in n.months) {
                    var s;
                    const e = n.months[l],
                        a = !(!t || !t.months) && t.months.has(l),
                        o = (null === t || void 0 === t || null === (s = t.months) || void 0 === s ? void 0 : s.size) === n.maxAllowedMonths && !a,
                        c = r().createElement("div", {
                            className: z
                        }, r().createElement(u.Icon, {
                            svg: r().createElement(ae.Z, null),
                            className: X
                        }), r().createElement("span", null, e.shortName), r().createElement("span", {
                            className: Q
                        }, e.year));
                    d.push(r().createElement(u.Chip, {
                        key: e.shortName,
                        className: j,
                        label: c,
                        name: "",
                        checked: a,
                        disabled: o,
                        attributes: {
                            "data-testid": "flexible-dates-month"
                        },
                        onChange: e => {
                            o || i({
                                what: "month",
                                id: l,
                                checked: e.checked
                            })
                        }
                    }))
                }
                return r().createElement(u.Container, {
                    className: H,
                    attributes: {
                        "data-testid": "flexible-dates-months"
                    },
                    fullWidth: !0
                }, r().createElement(u.Title, {
                    variant: "strong_1",
                    title: a.trans((0, k.t)("sr_sbox_flex_dates_choose_months_head")),
                    className: G
                }), r().createElement("fieldset", {
                    className: q
                }, r().createElement(u.Text, {
                    className: $,
                    variant: "body_2",
                    color: "neutral_alt",
                    tagName: "legend"
                }, a.trans((0, k.t)("sr_sbox_flex_dates_select_months_error_2"))), r().createElement(u.Carousel, {
                    className: Z,
                    previousButtonAriaLabel: a.trans((0, k.t)("sxp_carousel_accessibility_previous")),
                    nextButtonAriaLabel: a.trans((0, k.t)("sxp_carousel_accessibility_next"))
                }, d)))
            };
            const de = function(e) {
                    const [n, t] = (0, a.useState)(e.selected), i = (0, k.useI18n)();
                    return r().createElement("div", {
                        className: e.isOverlayed ? w : void 0,
                        "data-testid": "searchbox-datepicker-flexible-dates-container"
                    }, r().createElement(u.Grid, {
                        className: B,
                        bleed: !0,
                        attributes: {
                            "data-testid": "searchbox-datepicker-flexible-dates"
                        }
                    }, r().createElement(u.Grid.Column, {
                        size: 12,
                        className: U
                    }, r().createElement(ie, {
                        longTermFlexibleDatesConfig: e,
                        maxLOS: e.maxLOS,
                        selected: n,
                        onChange: i => {
                            if ("day" === i.what) {
                                var a;
                                let r;
                                i.checked ? r = { ...n,
                                    duration: i.duration,
                                    startDay: i.startDay,
                                    isDayCustom: i.isDayCustom
                                } : null !== n && void 0 !== n && n.months && (r = {
                                    months: n.months
                                }), t(r), null === (a = e.onChange) || void 0 === a || a.call(e, r)
                            }
                        }
                    })), r().createElement(u.Grid.Column, {
                        size: 12,
                        className: U
                    }, r().createElement(re, {
                        longTermFlexibleDatesConfig: e,
                        selected: n,
                        onChange: i => {
                            if ("month" === i.what) {
                                var a;
                                const r = null !== n && void 0 !== n && n.months ? new Set(n.months) : new Set;
                                i.checked ? r.add(i.id) : r.delete(i.id);
                                const d = { ...n,
                                    months: r
                                };
                                t(d), null === (a = e.onChange) || void 0 === a || a.call(e, d)
                            }
                        }
                    }))), e.isFooterDisabled ? null : r().createElement("div", {
                        className: J
                    }, r().createElement("span", {
                        "data-testid": "flexible-dates-footer"
                    }, (0, L.Eq)({
                        selected: n,
                        longTermFlexibleDatesConfig: e,
                        i18n: i
                    })), r().createElement(u.Button, {
                        className: ee,
                        text: i.trans((0, k.t)("sr_sbox_flex_dates_select_dates_cta")),
                        disabled: !(0, L.j)(n),
                        onClick: () => {
                            var n;
                            return null === (n = e.onDoneButtonClick) || void 0 === n ? void 0 : n.call(e)
                        }
                    })))
                },
                se = "ce4c76613c",
                le = "f327a5869e",
                oe = "-searchboxdatepicker";
            const ue = function(e) {
                    let {
                        items: n,
                        activeTabId: t = "calendar",
                        isOverlay: a,
                        onTabChange: d
                    } = e;
                    const l = (0, k.useI18n)();
                    if (n.length < 2) return n[0];
                    const {
                        triggerList: o,
                        panelList: c
                    } = {
                        triggerList: [{
                            id: `calendar${oe}`,
                            text: l.trans((0, k.t)("sr_sbox_flex_dates_tab_calendar"))
                        }, {
                            id: `flexible${oe}`,
                            text: l.trans((0, k.t)("sr_sbox_flex_dates_tab_im_flexible"))
                        }],
                        panelList: [{
                            id: `calendar${oe}`,
                            children: n[0]
                        }, {
                            id: `flexible${oe}`,
                            children: n[1]
                        }]
                    };
                    return r().createElement(u.Tab, {
                        fillEqually: !0,
                        variant: "underlined",
                        className: s()(se, a && le),
                        activeTabId: `${t}${oe}`,
                        attributes: {
                            "data-testid": "datepicker-tabs"
                        },
                        onTabChange: e => null === d || void 0 === d ? void 0 : d(e.replace(oe, ""))
                    }, r().createElement(u.Tab.TriggerList, null, o.map((e => r().createElement(u.Tab.Trigger, (0, i.Z)({
                        key: e.id
                    }, e))))), c.map((e => r().createElement(u.Tab.Panel, (0, i.Z)({
                        key: e.id
                    }, e)))))
                },
                ce = "a9433a18bb",
                me = "bbe3c09481",
                ve = "e1a6e4ecdf",
                ke = "c474309cf0",
                ge = "b3b3d6d0cf",
                pe = "d50de268aa",
                fe = "d3f5683b89",
                he = "d9deca178b",
                Ne = "a74d9ddbbc";
            const Se = function(e) {
                let {
                    id: n = "",
                    activeTabId: t,
                    className: d,
                    calendarProps: l,
                    calendarFooter: c,
                    overlay: g,
                    attachmentData: p,
                    longTermFlexibleDates: f,
                    isAbsolute: h,
                    localiseDate: N = e => e.toDateString(),
                    onDateChange: S = o(),
                    onOutsideClick: _,
                    onTabChange: y
                } = e;
                const [b, F] = (0, a.useState)(null === g || void 0 === g ? void 0 : g.isFullScreen), E = (0, a.useCallback)((() => _ && _(n)), [_, n]), T = (0, a.useRef)(null);
                m()(T, E);
                const C = (0, k.useI18n)(),
                    I = [];
                I.push(r().createElement(P, {
                    attachmentData: p,
                    calendarFooter: c,
                    calendarProps: l,
                    isOverlayed: Boolean(g),
                    onDateChange: S,
                    localiseDate: N,
                    isFull: null === g || void 0 === g ? void 0 : g.isFullScreen
                })), f && I.push(r().createElement(de, (0, i.Z)({}, f, {
                    isFooterDisabled: f.isFooterDisabled || Boolean(g),
                    isOverlayed: Boolean(g)
                })));
                let A = !l.endDate;
                return "flexible" === t && f && (A = !(0, L.j)(f.selected)), (0, a.useEffect)((() => {
                    if (null === g || void 0 === g || !g.isEnabled || null !== g && void 0 !== g && g.isFullScreen) return;
                    const e = () => {
                        "orientation" in screen ? F("landscape-primary" === screen.orientation.type || "landscape-secondary" === screen.orientation.type) : "orientation" in window && F(-90 === window.orientation || 90 === window.orientation)
                    };
                    return window.addEventListener("orientationchange", e), e(), () => {
                        window.removeEventListener("orientationchange", e)
                    }
                }), [null === g || void 0 === g ? void 0 : g.isEnabled, null === g || void 0 === g ? void 0 : g.isFullScreen]), r().createElement(r().Fragment, null, g && g.isEnabled ? r().createElement(u.SheetContainer, {
                    active: g.isShown,
                    className: ke,
                    closeClassName: l.title ? he : s()(pe, g.fixCloseButtonZIndex && fe),
                    position: b ? "fullScreen" : "bottom",
                    closeAriaLabel: C.trans((0, v.t)("m_search_close")),
                    fill: !0,
                    stickyHeader: !0,
                    onCloseTrigger: () => {
                        var e;
                        return null === (e = g.onClose) || void 0 === e ? void 0 : e.call(g, "closeIcon")
                    },
                    attributes: {
                        "data-testid": b ? "datepicker-overlay-fullscreen" : "datepicker-overlay"
                    },
                    overlayAttributes: {
                        "data-testid": "datepicker-overlay-outer"
                    },
                    title: l.title ? r().createElement("div", {
                        className: Ne
                    }, l.title) : null,
                    footer: r().createElement(u.ActionBar, {
                        topContent: r().createElement(r().Fragment, null, "flexible" !== t && null !== c && void 0 !== c && c.flexibleDates && null !== c && void 0 !== c && c.flexibleDates.windows ? D({
                            flexibleDates: c.flexibleDates,
                            i18n: C,
                            className: ge
                        }) : null, r().createElement(u.Text, {
                            align: "center",
                            attributes: {
                                "data-testid": "datepicker-overlay-footer-selected-dates"
                            },
                            variant: "body_2"
                        }, "flexible" === t && f ? (0, L.Eq)({
                            selected: f.selected,
                            longTermFlexibleDatesConfig: f,
                            i18n: C
                        }) : x({
                            startDate: l.startDate,
                            endDate: l.endDate,
                            i18n: C,
                            localiseDate: N
                        }))),
                        button: {
                            text: g.doneButtonCopy ? g.doneButtonCopy : C.trans((0, v.t)("m_sxp_sbox_overlay_generic_cta")),
                            variant: "primary",
                            size: "large",
                            disabled: A,
                            onClick: () => {
                                var e;
                                return null === (e = g.onClose) || void 0 === e ? void 0 : e.call(g, "overlayButton")
                            }
                        },
                        attributes: {
                            "data-testid": "datepicker-overlay-footer"
                        }
                    })
                }, r().createElement(ue, {
                    items: I,
                    isOverlay: !0,
                    onTabChange: y,
                    activeTabId: t
                })) : r().createElement("div", {
                    className: ce,
                    ref: T,
                    "data-testid": "searchbox-datepicker"
                }, r().createElement("div", {
                    className: s()(h && ve, me, d)
                }, r().createElement(ue, {
                    items: I,
                    onTabChange: y,
                    activeTabId: t
                }))))
            }
        },
        "31597aa0": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => U
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("8521b397"),
                d = t.n(r),
                s = t("e4cbd52b"),
                l = t.n(s),
                o = t("95d18bc1"),
                u = t("aa4f11f5"),
                c = t("6222292b"),
                m = t("c44dcb0c"),
                v = t("1424d033");
            const k = "dbdcb7a984",
                g = "e03644d405",
                p = "e521bfa3f4",
                f = "d51d685363",
                h = "d72f1441bc",
                N = "b87eab9c50",
                S = "ced3f020a5",
                _ = "fbe93e89b1",
                y = "daa10fa5bb",
                b = "f32245f34b",
                F = "b3da7acbe7",
                E = "aaab64d6af",
                T = "e54c47fe84",
                C = "f38d4ee770";

            function I(e) {
                return Boolean(e && "object" === typeof e && "title" in e)
            }

            function A(e) {
                let {
                    option: n
                } = e;
                if (I(n)) {
                    var t;
                    const e = null !== (t = n.image) && void 0 !== t && t.url ? a().createElement(c.Avatar, {
                        src: n.image.url,
                        ariaLabel: n.title,
                        className: E
                    }) : a().createElement(c.Icon, {
                        svg: a().createElement(v.Z, null),
                        size: "large",
                        color: "neutral",
                        className: F,
                        attributes: {
                            "data-testid": "autocomplete-icon-default"
                        }
                    });
                    return a().createElement("div", {
                        className: b
                    }, e, a().createElement(c.Title, {
                        title: n.title,
                        subtitle: n.subtitle,
                        className: T
                    }))
                }
                return null
            }
            const O = function(e) {
                let {
                    className: n,
                    itemClassName: t,
                    highlightedIndex: i = -1,
                    options: r = [],
                    secondaryOptions: s = [],
                    isWithGoogle: o,
                    onOptionSelect: u = l(),
                    renderOption: v = A,
                    showMoreIndex: b,
                    onShowMoreClicked: F,
                    isShowMoreHighlighted: E
                } = e;
                if (!r.length) return null;
                const T = e => {
                    let {
                        options: n,
                        className: i,
                        startIndex: r,
                        highlightedIndex: s
                    } = e;
                    if (!n.length) return null;
                    const l = (e, n) => {
                            if (I(e) && e.titleAbove) return a().createElement(c.Text, {
                                className: d()(h, "small" === e.titleAbove.spacing && N),
                                variant: e.titleAbove.variant || "strong_2",
                                color: e.titleAbove.color,
                                attributes: {
                                    id: n
                                }
                            }, e.titleAbove.text)
                        },
                        o = function(e) {
                            const n = [];
                            let t = {
                                items: [],
                                offset: 0
                            };
                            for (let i = 0; i < e.length; i++) {
                                const a = e[i];
                                I(a) && a.titleAbove ? (t.items.length > 0 && n.push(t), t = {
                                    titleOption: a,
                                    items: [a],
                                    offset: i
                                }) : t.items.push(a)
                            }
                            return t.items.length > 0 && n.push(t), n
                        }(n);
                    return a().createElement("div", {
                        className: d()(g, i),
                        "data-testid": "autocomplete-results-options",
                        role: "listbox"
                    }, o.map(((e, i) => function(e) {
                        let i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
                            o = arguments.length > 2 ? arguments[2] : void 0,
                            k = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
                        if (!e.length) return;
                        const g = `group-${k}-heading`,
                            f = o ? l(o, g) : null;
                        return a().createElement("ul", {
                            role: "group",
                            "aria-labelledby": f ? g : void 0
                        }, f, e.map(((e, l) => {
                            const o = l + i;
                            return a().createElement(a().Fragment, null, a().createElement("li", {
                                className: d()(S, t),
                                id: `autocomplete-result-${r+o}`,
                                key: o,
                                role: "option"
                            }, a().createElement("div", {
                                role: "button",
                                tabIndex: -1,
                                className: d()(p, s - r === o && !E && y),
                                onClick: e => u(e, {
                                    index: r + o,
                                    option: n[o],
                                    method: "mouse-click"
                                })
                            }, v({
                                option: e
                            }))), b === o ? a().createElement("li", null, a().createElement(c.Button, {
                                variant: "tertiary",
                                className: d()(C, E && y),
                                onClick: e => {
                                    e.preventDefault(), e.stopPropagation(), null === F || void 0 === F || F(!0)
                                },
                                attributes: {
                                    "data-testid": "autocomplete-results-show-more",
                                    tabIndex: -1
                                }
                            }, a().createElement(m.Trans, {
                                tag: "mvsi_sbox_ac_recent_show_more"
                            }))) : null)
                        })))
                    }(e.items, e.offset, e.titleOption, i))))
                };
                return a().createElement("div", {
                    className: d()(k, o && f, n),
                    "data-testid": "autocomplete-results",
                    id: "autocomplete-results",
                    role: "listbox"
                }, T({
                    options: r,
                    startIndex: 0,
                    highlightedIndex: i
                }), T({
                    className: _,
                    options: s,
                    startIndex: r.length,
                    highlightedIndex: i
                }))
            };
            const D = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", "Enter", "Escape"];

            function R(e) {
                let {
                    defaultOptions: n,
                    defaultSecondaryOptions: t,
                    isResultsShown: a,
                    showMoreIndex: r,
                    setIsShowMoreClicked: d,
                    onOptionSelect: s,
                    onKeyDown: l,
                    onBlur: o
                } = e;
                const [u, c] = (0, i.useState)(-1), [m, v] = (0, i.useState)(n), [k, g] = (0, i.useState)(t), [p, f] = (0, i.useState)(!1), h = () => {
                    c(-1), f(!1)
                };
                m !== n && (v(n), h()), k !== t && (g(t), h()), a || -1 === u || h();
                return [u, {
                    onOptionSelect: h,
                    onChange: h,
                    onKeyDown: e => {
                        if (D.includes(e.key) && m && m.length && a)
                            if ("ArrowUp" === e.key || "ArrowDown" === e.key) {
                                e.preventDefault();
                                const n = "ArrowUp" === e.key ? -1 : 1;
                                if (p) f(!1);
                                else {
                                    let e = u + n;
                                    r === e - 1 && f(!0);
                                    const t = m.length + ((null === k || void 0 === k ? void 0 : k.length) || 0);
                                    e < -1 ? e = t - 1 : e > t - 1 && (e = -1), c(e)
                                }
                            } else if (null === k || void 0 === k || !k.length || "ArrowRight" !== e.key && "ArrowLeft" !== e.key)
                            if ("Enter" === e.key) {
                                if (-1 !== u) {
                                    if (e.preventDefault(), p) return void(null === d || void 0 === d || d(!0));
                                    ((e, n) => {
                                        h();
                                        const t = m ? [...m, ...k || []] : void 0;
                                        s && t && s(e, {
                                            index: n.index,
                                            option: t[n.index],
                                            method: n.method
                                        })
                                    })(e, {
                                        index: u,
                                        method: "key-enter"
                                    })
                                }
                            } else "Escape" === e.key && (e.preventDefault(), o(e));
                        else if (-1 !== u) {
                            e.preventDefault();
                            const n = u >= 0 && u < m.length,
                                t = u >= m.length && u < m.length + k.length;
                            n ? c(m.length + Math.min(u, k.length - 1)) : t && c(Math.min(u - m.length, m.length - 1))
                        }
                        l(e, {
                            highlightedIndex: u
                        })
                    }
                }, p]
            }
            var x = t("af979403");
            const P = "a006cb595b",
                L = "ada790228e",
                w = "a8cbb8ff8c",
                B = e => {
                    var n;
                    return null === (n = e.current) || void 0 === n ? void 0 : n.querySelector("input[data-destination]")
                };
            const U = function(e) {
                let {
                    className: n,
                    decoratorClassName: t,
                    debounceMs: r,
                    isClearable: s,
                    isFocusOnClear: v,
                    isReadOnly: k,
                    isResultsAbsolute: g,
                    isResultsShown: p,
                    isExpanded: f,
                    isWithGoogle: h,
                    icon: N,
                    iconClear: S,
                    inputRef: _,
                    inputAttributes: y,
                    resultsClassName: b,
                    resultsItemClassName: F,
                    name: E = "destination",
                    options: T,
                    secondaryOptions: C,
                    placeholder: A,
                    value: D = "",
                    onKeyDown: U = l(),
                    onInputFocus: M = l(),
                    onInputClick: H = l(),
                    onInputBlur: V = l(),
                    onInputChange: G = l(),
                    onInputChangeDebounced: Y = l(),
                    onOptionSelect: W = l(),
                    onOutsideClick: K,
                    getOptionValue: $ = e => I(e) ? e.title : "",
                    renderOption: q
                } = e;
                const Z = (0, m.useI18n)(),
                    {
                        resultsRef: j,
                        shouldShowResults: z,
                        showResults: Q,
                        hideResults: X
                    } = function(e) {
                        const [n, t] = (0, i.useState)(!1), a = (0, i.useRef)(null), r = void 0 === e || null === e;
                        return {
                            resultsRef: a,
                            shouldShowResults: r ? n : e,
                            showResults: () => {
                                r && t(!0)
                            },
                            hideResults: e => {
                                if (r)
                                    if (e) {
                                        const n = e.relatedTarget || document.activeElement;
                                        a.current && a.current.contains(n) || t(!1)
                                    } else t(!1)
                            }
                        }
                    }(p),
                    {
                        setIsShowMoreClicked: J,
                        showMoreIndex: ee,
                        visibleOptions: ne
                    } = function(e, n) {
                        (0, i.useEffect)((() => {
                            n || a(!1)
                        }), [n]);
                        const [t, a] = (0, i.useState)(!1), {
                            visibleOptions: r,
                            showMoreIndex: d
                        } = (0, i.useMemo)((() => {
                            if (!e || 0 === e.length) return {
                                visibleOptions: e,
                                showMoreIndex: null
                            };
                            if (!e.some((e => I(e) && e.collapseGroup)) || t) return {
                                visibleOptions: e,
                                showMoreIndex: null
                            };
                            const n = e.reduce(((e, n, t) => I(n) && n.collapseGroup ? t + 1 : e), -1);
                            if (-1 === n) return {
                                visibleOptions: e.slice(0, 3),
                                showMoreIndex: 2
                            };
                            const i = e.slice(0, n),
                                a = i.slice(0, 3),
                                r = e.slice(n),
                                d = i.length > a.length ? a.length - 1 : -1;
                            return {
                                visibleOptions: [...a, ...r],
                                showMoreIndex: d
                            }
                        }), [e, t]);
                        return {
                            visibleOptions: r,
                            showMoreIndex: d,
                            setIsShowMoreClicked: a
                        }
                    }(T, z),
                    te = function() {
                        X(), W(...arguments)
                    },
                    ie = e => {
                        X(e), V(e)
                    },
                    [ae, re, de] = R({
                        defaultOptions: ne,
                        defaultSecondaryOptions: C,
                        isResultsShown: z,
                        showMoreIndex: ee,
                        setIsShowMoreClicked: J,
                        onOptionSelect: te,
                        onKeyDown: U,
                        onBlur: ie
                    }),
                    se = (0, i.useRef)(!1),
                    le = (0, i.useRef)(null);
                (0, x.Z)(le, K), (0, i.useEffect)((() => {
                    if (le.current) {
                        const e = le.current.querySelector("input[data-destination]");
                        document.activeElement === e && ce(), _ && e && ("function" === typeof _ ? _(e) : _.current = e)
                    }
                }), []);
                const oe = (0, i.useRef)(),
                    ue = (e, n, t) => {
                        se.current = !0, r && (clearTimeout(oe.current), oe.current = setTimeout((() => {
                            Y(e, {
                                value: n,
                                method: t
                            })
                        }), r)), G(e, {
                            value: n,
                            method: t
                        }), Q(), re.onChange()
                    },
                    ce = e => {
                        Q(), M(e)
                    },
                    me = T ? [...ne || [], ...C || []] : void 0,
                    ve = () => de ? "" : -1 !== ae && me ? $(me[ae]) : D;
                return a().createElement("div", {
                    className: d()(P, n),
                    ref: le,
                    "data-testid": "destination-container"
                }, a().createElement(c.InputText, {
                    bordered: !1,
                    name: E,
                    placeholder: A,
                    value: ve(),
                    decoratorClassName: t,
                    inputAttributes: { ...y,
                        "data-destination": "1",
                        autoComplete: "off",
                        onChange: e => ue(e, e.currentTarget.value, "input-change"),
                        onClick: H,
                        onKeyDown: re.onKeyDown,
                        readOnly: k,
                        "aria-autocomplete": "list",
                        "aria-controls": "autocomplete-results",
                        "aria-haspopup": "listbox",
                        "aria-label": A,
                        "aria-expanded": void 0 === f ? z : f,
                        role: "combobox",
                        "aria-activedescendant": ae > -1 ? `autocomplete-result-${ae}` : void 0
                    },
                    startSlot: N || a().createElement(c.Icon, {
                        svg: a().createElement(u.Z, null),
                        size: "large",
                        color: "neutral"
                    }),
                    endSlot: s && ve() ? a().createElement(c.Actionable, {
                        onClick: e => {
                            if (v) {
                                const e = B(le);
                                e && e.focus()
                            }
                            ue(e, "", "input-clear")
                        }
                    }, a().createElement(c.Icon, {
                        svg: S || a().createElement(o.Z, null),
                        ariaLabel: Z.trans((0, m.t)("input_accessory_clear"))
                    })) : null,
                    onFocus: ce,
                    onBlur: ie
                }), a().createElement("div", {
                    className: L,
                    ref: j
                }, z ? a().createElement(O, {
                    className: d()(b, g && w),
                    itemClassName: F,
                    highlightedIndex: ae,
                    options: ne,
                    secondaryOptions: C,
                    isWithGoogle: h,
                    onOptionSelect: function() {
                        te(...arguments), re.onOptionSelect()
                    },
                    renderOption: q,
                    showMoreIndex: ee,
                    onShowMoreClicked: () => {
                        J(!0);
                        const e = B(le);
                        e && e.focus()
                    },
                    isShowMoreHighlighted: de
                }) : null), se.current && z ? a().createElement(c.HiddenVisually, null, a().createElement("span", {
                    "aria-live": "assertive"
                }, a().createElement(m.Trans, {
                    tag: "sr_sbox_a11y_results_found_heading",
                    num_exception: (null === me || void 0 === me ? void 0 : me.length) || 0,
                    variables: {
                        num_results: (null === me || void 0 === me ? void 0 : me.length) || 0
                    }
                }))) : null)
            }
        },
        "2b547677": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => r
            });
            var i = t("ead71eb0"),
                a = t.n(i);
            const r = function(e) {
                let {
                    fields: n = {}
                } = e;
                const t = [];
                return Object.keys(n).forEach((e => {
                    const i = n[e];
                    Object.keys(i).filter((e => null !== e)).forEach((e => {
                        const n = i[e];
                        "string" === typeof n ? t.push(a().createElement("input", {
                            key: e,
                            type: "hidden",
                            name: e,
                            value: n
                        })) : null !== n && void 0 !== n && n.length && n.forEach(((n, i) => t.push(a().createElement("input", {
                            key: `${e}${i}`,
                            type: "hidden",
                            name: e,
                            value: n
                        }))))
                    }))
                })), a().createElement(a().Fragment, null, t)
            }
        },
        af1e2b38: (e, n, t) => {
            "use strict";
            t.d(n, {
                NM: () => i.N,
                sv: () => r,
                Z6: () => d
            });
            var i = t("0321416a"),
                a = t("dc6d28ff");
            const r = () => (0, a.getRequestContext)().getSiteType() ? ? i.N.WWW,
                d = () => {
                    const e = r();
                    return {
                        isWWW: e === i.N.WWW,
                        isMDOT: e === i.N.MDOT,
                        isTDOT: e === i.N.TDOT
                    }
                }
        },
        c9779913: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => o
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("e4cbd52b"),
                d = t.n(r),
                s = t("abab1afe"),
                l = t("c44dcb0c");
            const o = e => {
                let {
                    className: n,
                    formAction: t,
                    formMethod: i = "GET",
                    formTarget: r,
                    formRef: o,
                    formId: u,
                    isWithChangesTrackingWhileJSIsLoading: c,
                    nonce: m,
                    onSubmit: v = d(),
                    children: k
                } = e;
                const g = (0, l.useI18n)();
                return a().createElement("form", {
                    id: u,
                    className: n,
                    action: t,
                    method: i,
                    onSubmit: v,
                    target: r,
                    ref: o,
                    role: "region",
                    "aria-label": g.trans((0, s.t)("v_search_properties"))
                }, c ? a().createElement("script", {
                    nonce: m,
                    dangerouslySetInnerHTML: {
                        __html: "\nvar script = document.currentScript;\nvar form = script && script.parentNode;\nif (form) {\n  window.__searchBoxOnLoadData = {};\n  form.addEventListener('input', function(e) {\n    if (!window.__searchBoxOnLoadData) return;\n    window.__searchBoxOnLoadData[e.target.name] = e.target.value;\n  })\n}\n"
                    }
                }) : null, k)
            }
        },
        "7ef4824b": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => l
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("6222292b"),
                d = t("c44dcb0c"),
                s = t("51cc4525");

            function l(e) {
                let {
                    onAssistanceAnimalsDisclaimerClick: n
                } = e;
                const [t, l] = (0, i.useState)(!1), o = a().createElement(r.Link, {
                    key: "link",
                    onClick: () => {
                        n && n(), l(!t)
                    }
                });
                return a().createElement(a().Fragment, null, a().createElement(r.Text, {
                    variant: "small_1"
                }, a().createElement(d.Trans, {
                    tag: "va_guest_sbox_pets_checkbox_assist_animals_disclaimer",
                    variables: {
                        start_link: "<0>",
                        end_link: "</0>"
                    },
                    components: [o]
                })), a().createElement(s.Z, {
                    isVisible: t,
                    position: "bottom",
                    onClose: () => {
                        l(!1)
                    }
                }))
            }
        },
        "51cc4525": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => l
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("6222292b"),
                d = t("abab1afe"),
                s = t("c44dcb0c");

            function l(e) {
                let {
                    isVisible: n,
                    position: t,
                    onClose: i
                } = e;
                const l = (0, s.useI18n)();
                return a().createElement(r.SheetContainer, {
                    active: n,
                    closeAriaLabel: l.trans((0, d.t)("close")),
                    position: t,
                    onCloseTrigger: i
                }, a().createElement(r.Container, null, a().createElement(r.Stack, {
                    alignItems: "center",
                    gap: 4
                }, a().createElement(r.Image, {
                    asset: {
                        setName: "illustrations-traveller",
                        assetName: "AssistanceAnimals"
                    },
                    width: "275px"
                }), a().createElement(r.Stack, {
                    gap: 4
                }, a().createElement(r.Text, {
                    variant: "headline_2"
                }, a().createElement(s.Trans, {
                    tag: "va_guest_sbox_pets_checkbox_assist_animals_popup_title"
                })), a().createElement(r.Text, {
                    variant: "body_1"
                }, a().createElement(s.Trans, {
                    tag: "app_va_guest_sbox_pets_checkbox_assist_animals_popup_body_1",
                    variables: {
                        start_link: "<0>",
                        end_link: "</0>"
                    },
                    components: [a().createElement(r.Link, {
                        key: "link",
                        href: "https://secure.booking.com/help/faq/31/RkFRX1BldHNfVHJhdmVsbGluZ19XaXRoX0Fzc2lzdGFuY2VfQW5pbWFscw?category=policies&render_html=1",
                        attributes: {
                            target: "_blank"
                        }
                    })]
                })), a().createElement(r.Text, {
                    variant: "body_1"
                }, a().createElement(s.Trans, {
                    tag: "app_va_guest_sbox_pets_checkbox_assist_animals_popup_body_2"
                }))))))
            }
        },
        f9c2b594: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => m
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("8521b397"),
                d = t.n(r),
                s = t("e4cbd52b"),
                l = t.n(s),
                o = t("bc26e4f1");
            const u = e => {
                    let {
                        isDaySelect31Day: n,
                        dayNames: t,
                        placeholder: i,
                        currentDate: r,
                        minDate: d,
                        maxDate: s
                    } = e;
                    const l = [a().createElement("option", {
                        key: "0",
                        value: "0"
                    }, i)];
                    if (n) {
                        for (let e = 1; e <= 31; e++) l.push(a().createElement("option", {
                            key: e,
                            value: e
                        }, e));
                        return l
                    }
                    if (!r) return l;
                    const u = new Date(r),
                        c = (e => new Date(e.getFullYear(), e.getMonth() + 1, 0).getDate())(u);
                    for (let m = 1; m <= c; m++) {
                        if (u.setDate(m), (0, o.hF)(u, d) || (0, o.Sl)(u, s)) continue;
                        const e = u.getDate();
                        let n = u.getDay() - 1; - 1 === n && (n = 6), l.push(a().createElement("option", {
                            key: e,
                            value: e
                        }, null !== t && void 0 !== t && t[n] ? `${e}, ${t[n]}` : e))
                    }
                    return l
                },
                c = "c9fe35b71a";
            const m = function(e) {
                let {
                    className: n,
                    id: t,
                    date: r,
                    monthSelect: s,
                    daySelect: m,
                    minDate: v,
                    maxDate: k,
                    selectFocused: g,
                    isDaySelect31Day: p,
                    onChange: f = l(),
                    onOutsideClick: h = l()
                } = e;
                const [N, S] = (0, i.useState)(), _ = (0, i.useRef)(null), y = (0, i.useRef)(null), b = (0, i.useRef)(null);
                (0, i.useEffect)((() => {
                    1 === g && y.current ? y.current.focus() : 2 === g && b.current && b.current.focus()
                }), [g]), (0, i.useEffect)((() => {
                    const e = e => {
                        _.current && _.current.contains(e.target) || h()
                    };
                    return document.addEventListener("focusin", e), document.addEventListener("click", e), () => {
                        document.removeEventListener("focusin", e), document.removeEventListener("click", e)
                    }
                }), [h]);
                const F = e => {
                        const n = y.current,
                            i = b.current;
                        if ("0" === e.target.value || !n || !i) return;
                        if (!r && "0" !== n.value && "0" === i.value) {
                            const e = (0, o.eu)(n.value + "-1");
                            return void(e && (e.getFullYear() === v.getFullYear() && e.getMonth() === v.getMonth() && e.setDate(v.getDate()), S(e)))
                        }
                        const a = (0, o.eu)(n.value + "-" + i.value);
                        a && !isNaN(Number(a)) && (Number(i.value) !== a.getDate() && a.setDate(0), (0, o.wn)(a, r) || f({
                            changedDate: a,
                            id: t
                        }))
                    },
                    E = r || N,
                    T = E ? E.getDate() : "0";
                return a().createElement("div", {
                    className: d()(c, n),
                    ref: _
                }, a().createElement("select", {
                    "data-name": "year-month",
                    name: s.name,
                    value: E ? `${E.getFullYear()}-${E.getMonth()+1}` : "0",
                    onBlur: F,
                    onChange: F,
                    "aria-label": s.placeholder,
                    ref: y
                }, (e => {
                    let {
                        monthNames: n = [],
                        placeholder: t,
                        minDate: i,
                        maxDate: r
                    } = e;
                    const d = [a().createElement("option", {
                            key: "0",
                            value: "0"
                        }, t)],
                        s = i.getMonth(),
                        l = i.getFullYear(),
                        o = r.getMonth(),
                        u = r.getFullYear();
                    for (let c = l; c <= u; c++) {
                        const e = c === u ? o : 11;
                        for (let t = c === l ? s : 0; t <= e; t++) {
                            const e = `${c}-${t+1}`;
                            d.push(a().createElement("option", {
                                key: e,
                                value: e
                            }, n[t], " ", c))
                        }
                    }
                    return d
                })({
                    monthNames: s.monthNames,
                    placeholder: s.placeholder,
                    minDate: v,
                    maxDate: k
                })), a().createElement("select", {
                    "data-name": "day",
                    name: m.name,
                    value: T,
                    onBlur: F,
                    onChange: F,
                    "aria-label": m.placeholder,
                    ref: b
                }, u({
                    isDaySelect31Day: p,
                    dayNames: m.dayNames,
                    placeholder: m.placeholder,
                    currentDate: E,
                    minDate: v,
                    maxDate: k
                })))
            }
        },
        "618ef7a2": (e, n, t) => {
            "use strict";
            t.d(n, {
                Cx: () => l,
                Eq: () => r,
                c1: () => s,
                j: () => a
            });
            var i = t("c44dcb0c");
            const a = e => {
                var n;
                return Boolean((null === e || void 0 === e ? void 0 : e.duration) && (null === e || void 0 === e || null === (n = e.months) || void 0 === n ? void 0 : n.size) && e.startDay)
            };

            function r(e) {
                var n;
                let {
                    selected: t,
                    longTermFlexibleDatesConfig: a,
                    i18n: r
                } = e;
                var d, s;
                if (null === t || void 0 === t || !t.duration || null === t || void 0 === t || null === (n = t.months) || void 0 === n || !n.size || null === t || void 0 === t || !t.startDay) return null === t || void 0 === t || !t.duration || !t.startDay || null !== (d = t.months) && void 0 !== d && d.size ? null === t || void 0 === t || null === (s = t.months) || void 0 === s || !s.size || t.duration && t.startDay ? r.trans((0, i.t)("sr_sbox_flex_dates_choose_days_months_footer")) : r.trans((0, i.t)("sr_sbox_flex_dates_choose_days_footer")) : r.trans((0, i.t)("sr_sbox_flex_dates_choose_months_footer"));
                let l = r.trans((0, i.t)("sr_sbox_flex_dates_custom_selection_nights", {
                    variables: {
                        num_nights: t.duration
                    },
                    num_exception: t.duration
                }));
                if (!t.isDayCustom) {
                    const e = a.days.filter((e => e.duration === t.duration && e.startDay === t.startDay && !e.isDayCustom))[0];
                    e && (l = e.name)
                }
                const o = function(e, n, t) {
                    const a = [];
                    for (const i in n) e.has(i) && a.push(n[i].shortName);
                    return 1 === a.length ? a[0] : 2 === a.length ? t.trans((0, i.t)("sr_sbox_flex_dates_two_months_footer", {
                        variables: {
                            month_name_1: a[0],
                            month_name_2: a[1]
                        }
                    })) : 3 === a.length ? t.trans((0, i.t)("sr_sbox_flex_dates_three_months_footer", {
                        variables: {
                            month_name_1: a[0],
                            month_name_2: a[1],
                            month_name_3: a[2]
                        }
                    })) : ""
                }(t.months, a.months, r);
                let u = r.trans((0, i.t)("sr_sbox_flex_dates_days_months_footer", {
                    variables: {
                        days: l,
                        month_names: o
                    },
                    num_exception: t.months.size
                }));
                return t.isDayCustom || (u += ` (${r.trans((0,i.t)("sr_sbox_flex_dates_custom_selection_nights",{variables:{num_nights:t.duration},num_exception:t.duration}))})`), u
            }
            const d = "custom";

            function s(e) {
                return null !== e && void 0 !== e && e.isDayCustom ? d : `${null===e||void 0===e?void 0:e.startDay}_${null===e||void 0===e?void 0:e.duration}`
            }

            function l(e) {
                const n = e === d,
                    [t, i] = e.split("_");
                return {
                    duration: n ? 1 : parseInt(i, 10),
                    startDay: n ? 1 : parseInt(t, 10),
                    isDayCustom: n || void 0
                }
            }
        },
        "8b97fb1a": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => E
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("8521b397"),
                d = t.n(r),
                s = t("7ef4824b"),
                l = t("6222292b"),
                o = t("abab1afe"),
                u = t("c44dcb0c"),
                c = t("41390caa"),
                m = t.n(c);

            function v(e, n) {
                return [{
                    text: n.trans((0, o.t)("fame_search_age_needed")),
                    value: "-1"
                }].concat(m()(e.min, e.max + 1).map((e => ({
                    text: n.trans((0, o.t)("sxp_index_sbox_num_years_old", {
                        variables: {
                            num_years: +e
                        },
                        num_exception: +e
                    })),
                    value: String(e)
                }))))
            }
            const k = "a9669463b9",
                g = "c7faab9578",
                p = "f748cee1fc",
                f = "acdf989420",
                h = "bbe87e14bd",
                N = "ab344923b3",
                S = "dbd958dec3",
                _ = "aef1b6427f",
                y = "cbca6c0d47",
                b = "af41eba323",
                F = ["adults", "kids", "rooms", "bedrooms", "holidayRental", "pets"];
            const E = function(e) {
                let {
                    adults: n,
                    kids: t,
                    kidsAges: i,
                    rooms: r,
                    bedrooms: c,
                    pets: m,
                    holidayRental: E,
                    showKidTextAboveAges: T,
                    shouldShowPetsControl: C,
                    isAssistanceAnimalsDisclaimerShown: I,
                    onAssistanceAnimalsDisclaimerClick: A,
                    onChange: O
                } = e;
                const D = (0, u.useI18n)(),
                    R = {
                        adults: n,
                        kids: t,
                        kidsAges: i,
                        rooms: r,
                        bedrooms: c,
                        pets: m,
                        holidayRental: E
                    },
                    x = R.kidsAges.values.length ? a().createElement(a().Fragment, null, T && a().createElement(a().Fragment, null, a().createElement(l.Text, {
                        variant: "emphasized_2",
                        color: "neutral",
                        className: S
                    }, a().createElement(u.Trans, {
                        tag: "fame_w_mandatory_ages_head"
                    }), "\xa0", a().createElement(u.Trans, {
                        tag: "fame_w_mandatory_ages_head_required"
                    })), a().createElement(l.Text, {
                        variant: "body_2",
                        color: "neutral_alt",
                        className: _
                    }, a().createElement(u.Trans, {
                        tag: "fame_w_mandatory_ages_explain"
                    }))), a().createElement("div", {
                        className: p,
                        "data-testid": "kids-ages"
                    }, R.kidsAges.values.map(((e, n) => a().createElement(l.InputSelect, {
                        key: n,
                        className: -1 === e ? f : void 0,
                        name: R.kidsAges.name,
                        value: String(e),
                        options: v(R.kidsAges, D),
                        onChange: e => {
                            let {
                                value: t
                            } = e;
                            return null === O || void 0 === O ? void 0 : O({
                                name: "kidsAges",
                                value: Number(t),
                                index: n
                            })
                        },
                        attributes: {
                            "data-testid": "kids-ages-select"
                        },
                        inputAttributes: {
                            "aria-label": D.trans((0, o.t)("loc_sbox_children_age_singular"))
                        }
                    })))), T ? null : a().createElement("div", {
                        className: g
                    }, D.trans((0, o.t)("fame_search_age_explain", {
                        num_exception: R.kidsAges.values.length
                    })))) : null;
                return a().createElement("div", {
                    className: d()(k, T && h)
                }, F.map((e => {
                    const n = R[e],
                        t = n && "pets" === e && C;
                    if (null !== n && void 0 !== n && n.shown || t) {
                        return "switch" === n.type ? a().createElement(a().Fragment, {
                            key: n.name
                        }, a().createElement(l.InputSwitch, {
                            id: n.name,
                            name: n.name,
                            label: n.label,
                            className: d()(N, y),
                            value: Boolean(n.value),
                            onChange: n => {
                                let {
                                    value: t
                                } = n;
                                null === O || void 0 === O || O({
                                    name: e,
                                    value: t ? 1 : 0
                                })
                            },
                            reversed: !0,
                            attributes: "holidayRental" === e ? {
                                "data-testid": "holiday-rental-switch"
                            } : {}
                        }), t && I ? a().createElement("div", {
                            className: d()(b)
                        }, a().createElement(s.Z, {
                            onAssistanceAnimalsDisclaimerClick: A
                        })) : null) : a().createElement(a().Fragment, {
                            key: n.name
                        }, a().createElement(l.InputStepper, {
                            id: n.name,
                            name: n.name,
                            min: n.min,
                            max: n.max,
                            label: n.label,
                            className: `${T?N:""}`,
                            value: n.value,
                            onChange: n => {
                                let {
                                    value: t
                                } = n;
                                null === O || void 0 === O || O({
                                    name: e,
                                    value: Number(t)
                                })
                            }
                        }), "kids" === e ? x : null)
                    }
                    return a().createElement(a().Fragment, {
                        key: e
                    })
                })))
            }
        },
        "2fe109f3": (e, n, t) => {
            "use strict";

            function i(e) {
                if (!e.title) return "";
                const n = document.createElement("span");
                return n.innerHTML = e.title, n.textContent || ""
            }
            t.d(n, {
                l: () => i
            })
        },
        "996788b1": (e, n, t) => {
            "use strict";
            t.d(n, {
                z: () => f
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("8521b397"),
                d = t.n(r),
                s = t("1424d033");
            const l = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M18.33 3.57 5.7 9.955l.79.07-1.96-1.478a.75.75 0 0 0-.753-.087l-2.1.925C.73 9.856.359 10.967.817 11.88c.11.22.263.417.45.577l3.997 3.402a2.94 2.94 0 0 0 3.22.4l3.62-1.8-1.084-.671v5.587a1.833 1.833 0 0 0 2.654 1.657l1.88-.932a1.85 1.85 0 0 0 .975-1.226l1.87-7.839-.396.498 3.441-1.707a3.494 3.494 0 1 0-3.11-6.259zm.672 1.342a1.994 1.994 0 0 1 1.775 3.571l-3.44 1.707a.75.75 0 0 0-.396.498l-1.87 7.838a.35.35 0 0 1-.185.232l-1.88.932a.335.335 0 0 1-.486-.304V13.79a.75.75 0 0 0-1.084-.672l-3.62 1.8a1.44 1.44 0 0 1-1.578-.197l-3.997-3.402a.35.35 0 0 1 .073-.577l2.067-.91-.754-.087 1.96 1.478a.75.75 0 0 0 .79.07l12.63-6.383zm-3.272.319-4.46-2.26a1.85 1.85 0 0 0-1.656-.001l-1.846.912a1.85 1.85 0 0 0-.295 3.128l2.573 1.955a.75.75 0 1 0 .908-1.194L8.38 5.816a.35.35 0 0 1 .055-.591l1.845-.912a.35.35 0 0 1 .315 0l4.456 2.256a.75.75 0 0 0 .678-1.338z"
                }))
            };
            var o = t("337dc83a");
            const u = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M4.5 8.911h3l-.75-.75v9l.75-.75h-3l.75.75v-9zm0-1.5a.75.75 0 0 0-.75.75v9c0 .414.336.75.75.75h3a.75.75 0 0 0 .75-.75v-9a.75.75 0 0 0-.75-.75zm6 1.5h3l-.75-.75v9l.75-.75h-3l.75.75v-9zm0-1.5a.75.75 0 0 0-.75.75v9c0 .414.336.75.75.75h3a.75.75 0 0 0 .75-.75v-9a.75.75 0 0 0-.75-.75zm6 1.5h3l-.75-.75v9l.75-.75h-3l.75.75v-9zm0-1.5a.75.75 0 0 0-.75.75v9c0 .414.336.75.75.75h3a.75.75 0 0 0 .75-.75v-9a.75.75 0 0 0-.75-.75zm4.5 12H3l.75.75v-2.25h16.5v2.25zm0 1.5a.75.75 0 0 0 .75-.75v-2.25a1.5 1.5 0 0 0-1.5-1.5H3.75a1.5 1.5 0 0 0-1.5 1.5v2.25c0 .414.336.75.75.75zm-19.5 3h21a.75.75 0 0 0 0-1.5h-21a.75.75 0 0 0 0 1.5m0-3h21a.75.75 0 0 0 0-1.5h-21a.75.75 0 0 0 0 1.5m18.75-15.75v2.25H3.75v-2.25l-.415.67L12 1.5l8.665 4.332zm1.5 0a.75.75 0 0 0-.415-.67L12.67.157a1.5 1.5 0 0 0-1.34 0L2.666 4.49a.75.75 0 0 0-.415.671v2.25a1.5 1.5 0 0 0 1.5 1.5h16.5a1.5 1.5 0 0 0 1.5-1.5v-2.25zM3 5.911h18a.75.75 0 0 0 0-1.5H3a.75.75 0 0 0 0 1.5"
                }))
            };
            const c = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M15.62 6.45a3.14 3.14 0 1 0-3.13-3.14 3.15 3.15 0 0 0 3.13 3.14m0-4.77A1.64 1.64 0 1 1 14 3.31a1.64 1.64 0 0 1 1.62-1.63m7.64 16.96a.74.74 0 0 0-1-.31l-.33.17-3.59-6.69a2.2 2.2 0 0 0 .48-1.37 2.25 2.25 0 0 0-2.24-2.26h-1.89l-1.84-2a3.5 3.5 0 0 0-4.53-.58L3.7 8.71A3.05 3.05 0 0 0 4 14l2.82 1.47-1.14 1.21a2.33 2.33 0 0 0-.56 1.25l-3.38-1.69a.75.75 0 0 0-1 .33.76.76 0 0 0 .34 1L13 23.52a2.8 2.8 0 0 0 1.26.3 2.74 2.74 0 0 0 1.33-.34l.82-.45a.75.75 0 0 0-.72-1.32l-.82.46a1.3 1.3 0 0 1-1.2 0l-4.78-2.36.11-.12 2.6-2.89a2.81 2.81 0 0 0-.8-4.37l-2.6-1.35 1.9-1.26 1.9 2.12a2.22 2.22 0 0 0 1.66.74h2.86a2 2 0 0 0 .5-.06l3.58 6.58-.54.29a.75.75 0 0 0-.31 1 .74.74 0 0 0 .66.39.7.7 0 0 0 .35-.08l.55-.3.44.83a.77.77 0 0 0 .67.4.73.73 0 0 0 .35-.09.76.76 0 0 0 .31-1l-.45-.82.32-.17a.75.75 0 0 0 .31-1.01m-6.7-7.46H13.7a.77.77 0 0 1-.56-.25l-2.51-2.76a.5.5 0 0 0-.63-.08l-3.79 2.54a.61.61 0 0 0 0 1l3.88 2.09a1.31 1.31 0 0 1 .69.92 1.28 1.28 0 0 1-.31 1.11l-2.56 2.93a.71.71 0 0 1-.55.25.77.77 0 0 1-.51-.19.76.76 0 0 1 0-1.06l1.79-2a.73.73 0 0 0-.21-1.15l-3.74-1.91A1.56 1.56 0 0 1 4.54 10l4.62-3.16a2 2 0 0 1 2.58.32L14 9.68h2.54a.75.75 0 0 1 0 1.5Z"
                }))
            };
            const m = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M13.5 22.75c5.799 0 10.5-4.701 10.5-10.5s-4.701-10.5-10.5-10.5S3 6.451 3 12.25V13a.75.75 0 0 0 1.5 0v-.75a9 9 0 1 1 9 9 .75.75 0 0 0 0 1.5M.22 10.527l3 3a.75.75 0 0 0 1.06 0l3-3a.75.75 0 1 0-1.06-1.06l-3 3h1.06l-3-3a.75.75 0 0 0-1.06 1.06M12 6.247v6.75c0 .414.336.75.75.75H18a.75.75 0 0 0 0-1.5h-5.25l.75.75v-6.75a.75.75 0 0 0-1.5 0"
                }))
            };
            const v = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "m20.75 3.709-7.377 17.79-1.638-8.187a.75.75 0 0 0-.588-.588L2.96 11.086zm-.574-1.386L2.385 9.7a1.5 1.5 0 0 0 .28 2.856l8.188 1.638-.588-.588 1.638 8.188a1.5 1.5 0 0 0 2.856.28l7.377-17.79a1.5 1.5 0 0 0-1.96-1.96z"
                }))
            };
            const k = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M10.439.75v1.5a.75.75 0 0 0 1.5 0V.75a.75.75 0 0 0-1.5 0m0 7.5v3a.75.75 0 0 0 1.5 0v-3a.75.75 0 0 0-1.5 0m0 9v6a.75.75 0 0 0 1.5 0v-6a.75.75 0 0 0-1.5 0m9.75-9.75h-16.5l.75.75v-6l-.75.75h16.5l-.53-.22 2.47 2.47-2.47 2.47zm0 1.5a.75.75 0 0 0 .53-.22l2.47-2.47a1.5 1.5 0 0 0 0-2.121l-2.47-2.47a.75.75 0 0 0-.53-.219h-16.5a.75.75 0 0 0-.75.75v6c0 .414.336.75.75.75zm-16.5 3h16.5l-.75-.75v6l.75-.75h-16.5l.53.22-2.469-2.47 2.47-2.47zm0-1.5a.75.75 0 0 0-.53.22l-2.47 2.469a1.5 1.5 0 0 0 0 2.121l2.47 2.47c.14.14.331.22.53.22h16.5a.75.75 0 0 0 .75-.75v-6a.75.75 0 0 0-.75-.75z"
                }))
            };
            var g = t("6222292b");
            const p = {
                result: "a0018a653c",
                resultNoIcon: "bc6719454f",
                icon: "a37eea142c",
                image: "c33f75a519",
                text: "efbfd2b849",
                withTextOverflow: "d704c15739"
            };

            function f(e) {
                var n, t, i;
                let {
                    option: r
                } = e, f = null;
                var h;
                if (null === (n = r.presentation) || void 0 === n || !n.noIcon)
                    if (null !== (h = r.image) && void 0 !== h && h.url) f = a().createElement(g.Avatar, {
                        src: r.image.url,
                        ariaLabel: r.title,
                        className: p.image,
                        attributes: {
                            "data-testid": "autocomplete-image"
                        }
                    });
                    else {
                        let e = s.Z;
                        "airport" === r.iconType ? e = l : "hotel" === r.iconType ? e = o.Z : "landmark" === r.iconType ? e = u : "ski" === r.iconType ? e = c : "search-history" === r.iconType ? e = m : "around-me" === r.iconType ? e = v : "google-place" === r.iconType && (e = k), f = a().createElement(g.Icon, {
                            className: p.icon,
                            svg: a().createElement(e, null),
                            size: "large",
                            color: "neutral",
                            attributes: {
                                "data-testid": `autocomplete-icon-${r.iconType||"default"}`
                            }
                        })
                    }
                let N = null;
                return r.subtitle && (N = a().createElement(g.Text, {
                    variant: "small_1",
                    tagName: "div",
                    attributes: {
                        dangerouslySetInnerHTML: {
                            __html: r.subtitle
                        }
                    },
                    className: p.withTextOverflow
                })), a().createElement("div", {
                    className: d()(p.result, (null === (t = r.presentation) || void 0 === t ? void 0 : t.noIcon) && p.resultNoIcon),
                    "data-testid": "autocomplete-result"
                }, f, a().createElement("div", {
                    className: p.text
                }, a().createElement(g.Text, {
                    variant: null !== (i = r.presentation) && void 0 !== i && i.titleFontNormal ? "body_2" : "strong_2",
                    attributes: {
                        dangerouslySetInnerHTML: {
                            __html: r.title
                        }
                    },
                    className: p.withTextOverflow
                }), N))
            }
        },
        "8945bca7": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => a
            });
            var i = t("ead71eb0");

            function a(e, n) {
                const t = (0, i.useRef)();
                return n.setStartDateOnOpen ? (t.current || "start" !== e.open || (t.current = e.start.date), e.open || (t.current = void 0)) : n.preferStartDate ? t.current = e.start.date : t.current = "end" === e.open ? e.end.date : e.start.date, t.current
            }
        },
        af979403: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => d
            });
            var i = t("ead71eb0"),
                a = t("e4cbd52b"),
                r = t.n(a);

            function d(e, n) {
                (0, i.useEffect)((() => {
                    const t = e.current;
                    if (t && n) {
                        const e = e => {
                            const i = e.relatedTarget || document.activeElement;
                            t.contains(i) || n(e)
                        };
                        return t.addEventListener("focusout", e), () => t.removeEventListener("focusout", e)
                    }
                    return r()
                }), [n, e])
            }
        },
        e36b001b: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => r
            });
            var i = t("ead71eb0"),
                a = t("49dddc75");

            function r(e) {
                let {
                    state: n,
                    dispatch: t,
                    validateForm: r,
                    onSubmit: d,
                    onError: s
                } = e;
                const [l, o] = (0, i.useState)(null);
                (0, i.useEffect)((() => {
                    l && (l.submit(), o(null))
                }), [l]);
                return {
                    onFormSubmit: e => {
                        (e => {
                            let {
                                event: i,
                                form: l
                            } = e;
                            null === i || void 0 === i || i.persist();
                            const u = (null === r || void 0 === r ? void 0 : r(n)) || null;
                            null !== u && (null === i || void 0 === i || i.preventDefault(), null === s || void 0 === s || s(u)), t({
                                type: a.E.FORM_SUBMITTED,
                                payload: u
                            }), null === d || void 0 === d || d({
                                event: i,
                                errors: u,
                                addHiddenFieldsAndSubmitTheFormAfter: e => {
                                    null === i || void 0 === i || i.preventDefault(), t({
                                        type: a.E.HIDDEN_FIELDS_CHANGED,
                                        payload: e
                                    }), o((null === i || void 0 === i ? void 0 : i.target) || l)
                                }
                            }, n, t)
                        })({
                            event: e
                        })
                    },
                    triggerFormSubmit: e => {
                        Promise.resolve().then((() => {
                            if ("requestSubmit" in e && e.requestSubmit) e.requestSubmit();
                            else {
                                const n = e.querySelector('button[type="submit"]');
                                n && n.click()
                            }
                        }))
                    }
                }
            }
        },
        "49dddc75": (e, n, t) => {
            "use strict";
            t.d(n, {
                E: () => i
            });
            let i = function(e) {
                return e.HIDDEN_FIELDS_CHANGED = "HIDDEN_FIELDS_CHANGED", e.ASSISTANCE_ANIMALS_DISCLAIMER_MODAL_VISIBILITY = "ASSISTANCE_ANIMALS_DISCLAIMER_MODAL_VISIBILITY", e.FORM_SUBMITTED = "FORM_SUBMITTED", e
            }({})
        },
        "1ac62b0e": (e, n, t) => {
            "use strict";
            t.d(n, {
                $y: () => l,
                Qh: () => s,
                T6: () => c,
                ch: () => m,
                fh: () => v,
                nG: () => u,
                sO: () => o
            });
            var i = t("441a45cb"),
                a = t.n(i),
                r = t("bc26e4f1"),
                d = t("abab1afe");
            const s = e => {
                let {
                    defaultKidsAges: n,
                    occupancy: t,
                    name: i,
                    value: a,
                    index: r,
                    stitchRoomsWithAdults: d
                } = e;
                const s = { ...t
                };
                d && ("rooms" === i && s.rooms.value < +a && +a > s.adults.value ? s.adults = { ...s.adults,
                    value: Number(a)
                } : "adults" === i && s.adults.value > +a && +a < s.rooms.value && (s.rooms = { ...s.rooms,
                    value: Number(a)
                }));
                const l = Array.from(s.kidsAges.values),
                    o = s[i];
                "kidsAges" !== i && o ? s[i] = { ...o,
                    value: Number(a)
                } : "undefined" !== typeof r && (l[r] = Number(a), s.kidsAges = { ...s.kidsAges,
                    values: l
                });
                const u = s.kids.value;
                if (u < l.length) s.kidsAges = { ...s.kidsAges,
                    values: l.slice(0, u)
                };
                else if (u > l.length) {
                    const e = void 0 !== (null === n || void 0 === n ? void 0 : n[n.length - 1]) ? n[n.length - 1] : 0,
                        t = new Array(u - l.length).fill(e).map(((t, i) => void 0 !== (null === n || void 0 === n ? void 0 : n[l.length + i]) ? n[l.length + i] : e));
                    s.kidsAges = { ...s.kidsAges,
                        values: [...l, ...t]
                    }
                }
                return s
            };

            function l(e) {
                let {
                    open: n,
                    startDate: t,
                    endDate: i,
                    changedDate: a,
                    minDate: d
                } = e, s = t, l = i;
                return a && ("start" === n ? (s = a, l = (0, r.NG)(s, 1)) : "end" === n && t && ((0, r.hF)(a, t) || (0, r.wn)(a, t) ? (s = (0, r.NG)(a, -1), d && (0, r.hF)(s, d) ? (s = d, l = (0, r.NG)(d, 1)) : l = a) : (s = t, l = a))), [s, l]
            }

            function o(e, n) {
                return a()(e, n, ((e, n) => {
                    if ("undefined" === typeof n) return null
                }))
            }

            function u(e) {
                const n = new Date(e);
                return n.setDate(1), n.setMonth(n.getMonth() + 16), n.setDate(0), n
            }

            function c(e, n, t, i, a, r) {
                return a.trans((0, d.t)("sxp_index_sbox_horizontal_adults", {
                    variables: {
                        num_adults: e
                    },
                    num_exception: e
                })) + " \xb7 " + a.trans((0, d.t)("sxp_lp_sbox_num_children", {
                    variables: {
                        num_children: n
                    },
                    num_exception: n
                })) + (i ? " \xb7 " + a.trans((0, d.t)("va_guest_sbox_pets_search")) : "") + " \xb7 " + a.trans(void 0 !== r ? (0, d.t)("bh_web_sbox_num_bedrooms", {
                    variables: {
                        num: r
                    },
                    num_exception: r
                }) : (0, d.t)("iq_sbox_accommodation_num_rooms", {
                    variables: {
                        num_rooms: t
                    },
                    num_exception: t
                }))
            }

            function m(e, n, t, i, a, r) {
                let s;
                if (i) s = i;
                else if (e && n && (s = `${e} - ${n}`, s = t ? `${s} (\xb1${t})` : s, a && r)) {
                    s = `${s} (${r.trans((0,d.t)("m_search_num_nights",{variables:{num_nights:String(a)},num_exception:a}))})`
                }
                return s
            }

            function v(e) {
                let {
                    date: n,
                    flexibleDate: t,
                    placeholder: i,
                    localiseDate: a = e => e.toDateString()
                } = e;
                return n ? a(n) + (t ? ` (\xb1${t})` : "") : i
            }
        },
        bc26e4f1: (e, n, t) => {
            "use strict";
            t.d(n, {
                Gr: () => o,
                NG: () => s,
                Sl: () => d,
                VS: () => l,
                eu: () => u,
                hF: () => r,
                wn: () => a
            });
            const i = e => Date.UTC(e.getFullYear(), e.getMonth(), e.getDate(), 0, 0, 0),
                a = (e, n) => !(!e || !n) && (e.getFullYear() === n.getFullYear() && e.getDate() === n.getDate() && e.getMonth() === n.getMonth()),
                r = (e, n) => i(e) < i(n),
                d = (e, n) => i(e) > i(n),
                s = function(e) {
                    let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                    return new Date(new Date(e).setDate(e.getDate() + n))
                },
                l = (e, n) => {
                    const t = i(e),
                        a = i(n);
                    return Math.floor((a - t) / 864e5)
                },
                o = e => {
                    if (!e) return "";
                    const n = e => ("0" + e).slice(-2);
                    return `${e.getFullYear()}-${n(e.getMonth()+1)}-${n(e.getDate())}`
                },
                u = e => {
                    if (!e || "string" !== typeof e) return null;
                    const [n, t, i] = e.split("-");
                    return new Date(Number(n), Number(t) - 1, Number(i), 0, 0, 0)
                }
        },
        ac294a45: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => jn
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("8521b397"),
                d = t.n(r),
                s = t("3d054e81");
            const l = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M4.5 14.248v4.5l.75-.75H.75a.75.75 0 0 0 0 1.5h4.5a.75.75 0 0 0 .75-.75v-4.5a.75.75 0 0 0-1.5 0m15-4.5v-4.5l-.75.75h4.5a.75.75 0 0 0 0-1.5h-4.5a.75.75 0 0 0-.75.75v4.5a.75.75 0 0 0 1.5 0m-1.01-3.984a9.002 9.002 0 0 1-9.956 14.544.75.75 0 1 0-.576 1.384 10.5 10.5 0 0 0 11.311-2.117c4.184-4.017 4.32-10.665.304-14.85a.75.75 0 0 0-1.082 1.04zM5.51 18.232a9.003 9.003 0 0 1 9.957-14.54.75.75 0 1 0 .576-1.385A10.5 10.5 0 0 0 4.749 4.42C.56 8.43.414 15.08 4.425 19.27a.75.75 0 0 0 1.084-1.038z"
                }))
            };
            var o = t("6222292b"),
                u = t("e4cbd52b"),
                c = t.n(u),
                m = t("bc26e4f1");
            const v = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M22.5 13.5v8.25a.75.75 0 0 1-.75.75H2.25a.75.75 0 0 1-.75-.75V5.25a.75.75 0 0 1 .75-.75h19.5a.75.75 0 0 1 .75.75zm1.5 0V5.25A2.25 2.25 0 0 0 21.75 3H2.25A2.25 2.25 0 0 0 0 5.25v16.5A2.25 2.25 0 0 0 2.25 24h19.5A2.25 2.25 0 0 0 24 21.75zm-23.25-3h22.5a.75.75 0 0 0 0-1.5H.75a.75.75 0 0 0 0 1.5M7.5 6V.75a.75.75 0 0 0-1.5 0V6a.75.75 0 0 0 1.5 0M18 6V.75a.75.75 0 0 0-1.5 0V6A.75.75 0 0 0 18 6M5.095 14.03a.75.75 0 1 0 1.06-1.06.75.75 0 0 0-1.06 1.06m.53-1.28a1.125 1.125 0 1 0 0 2.25 1.125 1.125 0 0 0 0-2.25.75.75 0 0 0 0 1.5.375.375 0 1 1 0-.75.375.375 0 0 1 0 .75.75.75 0 0 0 0-1.5m-.53 6.53a.75.75 0 1 0 1.06-1.06.75.75 0 0 0-1.06 1.06m.53-1.28a1.125 1.125 0 1 0 0 2.25 1.125 1.125 0 0 0 0-2.25.75.75 0 0 0 0 1.5.375.375 0 1 1 0-.75.375.375 0 0 1 0 .75.75.75 0 0 0 0-1.5m5.845-3.97a.75.75 0 1 0 1.06-1.06.75.75 0 0 0-1.06 1.06m.53-1.28A1.125 1.125 0 1 0 12 15a1.125 1.125 0 0 0 0-2.25.75.75 0 0 0 0 1.5.375.375 0 1 1 0-.75.375.375 0 0 1 0 .75.75.75 0 0 0 0-1.5m-.53 6.53a.75.75 0 1 0 1.06-1.06.75.75 0 0 0-1.06 1.06M12 18a1.125 1.125 0 1 0 0 2.25A1.125 1.125 0 0 0 12 18a.75.75 0 0 0 0 1.5.375.375 0 1 1 0-.75.375.375 0 0 1 0 .75.75.75 0 0 0 0-1.5m5.845-3.97a.75.75 0 1 0 1.06-1.06.75.75 0 0 0-1.06 1.06m.53-1.28a1.125 1.125 0 1 0 0 2.25 1.125 1.125 0 0 0 0-2.25.75.75 0 0 0 0 1.5.375.375 0 1 1 0-.75.375.375 0 0 1 0 .75.75.75 0 0 0 0-1.5m-.53 6.53a.75.75 0 1 0 1.06-1.06.75.75 0 0 0-1.06 1.06m.53-1.28a1.125 1.125 0 1 0 0 2.25 1.125 1.125 0 0 0 0-2.25.75.75 0 0 0 0 1.5.375.375 0 1 1 0-.75.375.375 0 0 1 0 .75.75.75 0 0 0 0-1.5"
                }))
            };
            var k = t("bd5facb2"),
                g = t.n(k),
                p = t("c44dcb0c"),
                f = t("e7547f91");
            const h = "dc15842869",
                N = "e84058595b",
                S = "f1f96fdf10",
                _ = "ac148ea56b",
                y = "be2db1c937",
                b = "eff0666279",
                F = "bcb41e7c40";

            function E(e, n) {
                let {
                    className: t,
                    children: i,
                    isWithIcon: r = !0,
                    highlightFocused: l,
                    isCondensed: u,
                    onClick: c,
                    onKeyUp: m,
                    onMouseDown: v,
                    attributes: k
                } = e;
                const g = a().createElement(a().Fragment, null, a().createElement("span", {
                    className: d()(y, u && F)
                }, i), r ? a().createElement(o.Icon, {
                    className: d()(_, u && b),
                    svg: a().createElement(f.Z, null),
                    attributes: {
                        "data-testid": "searchbox-form-button-icon"
                    }
                }) : null);
                return l ? a().createElement(o.Actionable, {
                    attributes: {
                        ref: n,
                        onKeyUp: m,
                        onMouseDown: v,
                        ...k
                    },
                    className: d()(h, u && N, !r && S, t),
                    onClick: c,
                    tagName: "button"
                }, g) : a().createElement("button", (0, s.Z)({
                    ref: n,
                    onKeyUp: m,
                    onMouseDown: v
                }, k, {
                    type: "button",
                    className: d()(h, u && N, !r && S, t),
                    onClick: c
                }), g)
            }
            const T = (0, i.forwardRef)(E);
            var C = t("1ac62b0e");
            const I = "d10abb4e59",
                A = "e1f1de0f5d",
                O = "eca9157be5";

            function D(e, n) {
                var t, i;
                let {
                    date: r,
                    localiseDate: d,
                    datesText: s,
                    onDateClick: l
                } = e;
                return a().createElement(T, {
                    isWithIcon: !1,
                    isCondensed: !0,
                    highlightFocused: !0,
                    className: I,
                    onClick: e => {
                        l(e, "start")
                    },
                    attributes: {
                        "data-testid": "searchbox-dates-container"
                    },
                    ref: n
                }, a().createElement(o.Icon, {
                    svg: a().createElement(v, null),
                    size: "large",
                    color: "neutral_alt",
                    className: A
                }), s || a().createElement(a().Fragment, null, a().createElement("span", {
                    "data-testid": "date-display-field-start"
                }, (0, C.fh)({ ...r.start,
                    localiseDate: d
                })), a().createElement("span", {
                    className: O
                }, " \u2014 "), a().createElement("span", {
                    "data-testid": "date-display-field-end"
                }, (0, C.fh)({ ...r.end,
                    localiseDate: d,
                    flexibleDate: "exact" !== (null === (t = r.flexibleDates) || void 0 === t ? void 0 : t.selected) ? null === (i = r.flexibleDates) || void 0 === i ? void 0 : i.selected : void 0
                }))))
            }
            const R = (0, i.forwardRef)(D);
            var x = t("08b473e0"),
                P = t("f9c2b594");
            const L = "f3a401349f",
                w = "e83f46cf65";
            const B = function(e) {
                let {
                    className: n,
                    flexibleDate: t,
                    id: r,
                    isWithArrowDownIcon: d = !0,
                    isWithCalendarIcon: l = !0,
                    date: u,
                    placeholder: m,
                    selectsData: v,
                    localiseDate: k = e => e.toDateString(),
                    onClick: g = c(),
                    onChange: p = c(),
                    dateInputFocusRef: f
                } = e;
                const [h, N] = (0, i.useState)(!1), [S, _] = (0, i.useState)(null);
                (0, i.useEffect)((() => {
                    S && _(null)
                }), [S]);
                const y = (0, i.useCallback)((() => N(!1)), []);
                return (0, i.useImperativeHandle)(f, (() => () => {
                    N(!0), _(1)
                }), []), u || m ? a().createElement(a().Fragment, null, h && v ? a().createElement(P.Z, (0, s.Z)({
                    className: n,
                    id: r,
                    date: u || void 0,
                    selectFocused: S
                }, v, {
                    onChange: e => {
                        _(null), p(e)
                    },
                    onOutsideClick: y
                })) : a().createElement(T, {
                    className: n,
                    onClick: e => {
                        e.preventDefault(), g(e, r)
                    },
                    onKeyUp: e => {
                        "Tab" === e.key && (N(!0), h || _(e.shiftKey ? 2 : 1))
                    },
                    isWithIcon: d,
                    attributes: {
                        "data-testid": `date-display-field-${r}`
                    }
                }, l ? a().createElement(a().Fragment, null, a().createElement(o.Icon, {
                    svg: a().createElement(x.Z, null),
                    size: "medium",
                    color: "neutral",
                    className: L
                }), a().createElement("div", {
                    className: w,
                    "data-testid": "date-display-field-date-in-icon"
                }, u ? u.getDate() : "+")) : null, (0, C.fh)({
                    date: u,
                    flexibleDate: t,
                    placeholder: m,
                    localiseDate: k
                }))) : null
            };
            var U = t("a0a3fa34"),
                M = t("618ef7a2"),
                H = t("8945bca7"),
                V = t("af979403");
            const G = "acb980d3ef",
                Y = "b9b405fa52";
            const W = function(e) {
                    let {
                        text: n
                    } = e;
                    return a().createElement("div", {
                        className: G,
                        "data-testid": "searchbox-alert"
                    }, a().createElement("div", {
                        className: Y
                    }, n))
                },
                K = "ed9f289288",
                $ = "a444449f57",
                q = "eb157ee18f",
                Z = "cda7ea1543",
                j = "c343366c81",
                z = "f6c9b494da",
                Q = "b5aa4279ed",
                X = "a3cdf1ae27",
                J = "c92894b267";
            const ee = function(e) {
                var n, t, r;
                const {
                    date: l,
                    calendar: u,
                    keepCalendarOpenOnCookieBannerClick: k,
                    keepCalendarOpenOnClickOutside: f,
                    localiseDate: h,
                    iconLarge: N,
                    singleDatesField: S,
                    onDateClick: _ = c(),
                    onDateChange: y = c(),
                    onBaseMonthChange: b = c(),
                    onOutsideClick: F = c(),
                    onFlexibleDateChange: E,
                    onLongTermFlexibleDateChange: C,
                    onLongTermFlexibleDatesDoneButtonClick: I,
                    onTabChange: A,
                    startDateInputFocusRef: O,
                    calendarPosition: D = "bottom"
                } = e, x = (0, p.useI18n)(), P = (0, H.Z)(l, {
                    setStartDateOnOpen: !0
                }), {
                    isLarge: L
                } = (0, o.useViewport)(), w = (0, i.useRef)(null), G = (0, i.useRef)(null);
                let Y, ee;
                (0, V.Z)(G, (() => {
                    f || l.open && F(l.open)
                })), g()(G, (e => {
                    var n;
                    f || k && null !== (n = document.getElementById("onetrust-banner-sdk")) && void 0 !== n && n.contains(e.target) || l.open && F(l.open)
                })), l.error.losExceeded.shown ? Y = x.trans((0, p.t)("sbox_error_num_night_res", {
                    variables: {
                        num: l.maxLOS
                    },
                    num_exception: l.maxLOS
                })) : l.error.empty.shown && (Y = x.trans((0, p.t)("lp_hp_no_dates_selected_error"))), l.start.date && l.end.date && Number(l.minLOS) && (0, m.VS)(l.start.date, l.end.date) < Number(l.minLOS) && (ee = x.trans((0, p.t)("sr_calendar_min_night_stay_footer", {
                    variables: {
                        num_nights: Number(l.minLOS)
                    },
                    num_exception: Number(l.minLOS)
                })));
                const ne = l.open ? a().createElement(U.Z, {
                        id: l.open,
                        className: d()(j, (l.flexibleDates || l.longTermFlexibleDates) && Q, "right" === D && L && z),
                        activeTabId: l.activeTabId,
                        localiseDate: h,
                        isAbsolute: !0,
                        calendarFooter: {
                            custom: ee,
                            preFooter: u.preFooter,
                            isRenderSelected: !0,
                            flexibleDates: l.flexibleDates ? { ...l.flexibleDates,
                                onChange: E
                            } : void 0
                        },
                        longTermFlexibleDates: l.longTermFlexibleDates ? { ...l.longTermFlexibleDates,
                            maxLOS: l.maxLOS,
                            onChange: C,
                            onDoneButtonClick: () => {
                                var e;
                                l.open && F(l.open), null === I || void 0 === I || I(), null === (e = w.current) || void 0 === e || e.focus()
                            }
                        } : void 0,
                        attachmentData: u.attachmentData,
                        calendarProps: {
                            startDate: l.start.date || null,
                            endDate: l.end.date || null,
                            baseDate: P,
                            onBaseMonthChange: b,
                            ...u
                        },
                        onTabChange: A,
                        onDateChange: e => y({ ...e,
                            id: l.open,
                            isCalendar: !0
                        })
                    }) : null,
                    te = "flexible" === l.activeTabId && l.longTermFlexibleDates && (0, M.j)(null === (n = l.longTermFlexibleDates) || void 0 === n ? void 0 : n.selected) ? (0, M.Eq)({
                        selected: l.longTermFlexibleDates.selected,
                        longTermFlexibleDatesConfig: l.longTermFlexibleDates,
                        i18n: x
                    }) : void 0,
                    ie = e => a().createElement("div", {
                        ref: G,
                        className: K
                    }, e, ne, Y ? a().createElement(W, {
                        text: Y
                    }) : null);
                return ie(S ? a().createElement(R, (0, s.Z)({}, e, {
                    ref: w,
                    datesText: te
                })) : a().createElement("div", {
                    className: $,
                    role: "none",
                    onClick: e => {
                        const n = e.target.tagName.toLowerCase();
                        "select" !== n && "option" !== n && (l.open ? F(l.open) : _(e, "start"))
                    },
                    "data-testid": "searchbox-dates-container"
                }, a().createElement(o.Icon, {
                    svg: a().createElement(v, null),
                    size: N ? "large" : "medium",
                    color: "neutral_alt",
                    className: N ? Z : q
                }), te ? a().createElement(T, {
                    isWithIcon: !1,
                    className: X
                }, te) : a().createElement(a().Fragment, null, a().createElement(B, {
                    className: X,
                    id: "start",
                    isWithCalendarIcon: !1,
                    isWithArrowDownIcon: !1,
                    date: l.start.date,
                    placeholder: l.start.placeholder,
                    selectsData: {
                        monthSelect: l.start.monthSelect,
                        daySelect: l.start.daySelect,
                        minDate: u.minDate,
                        maxDate: u.maxDate
                    },
                    localiseDate: h,
                    onChange: y,
                    dateInputFocusRef: O
                }), a().createElement("span", {
                    className: J
                }, " \u2014 "), a().createElement(B, {
                    className: X,
                    flexibleDate: "exact" !== (null === (t = l.flexibleDates) || void 0 === t ? void 0 : t.selected) ? null === (r = l.flexibleDates) || void 0 === r ? void 0 : r.selected : void 0,
                    id: "end",
                    isWithCalendarIcon: !1,
                    isWithArrowDownIcon: !1,
                    date: l.end.date,
                    placeholder: l.end.placeholder,
                    selectsData: {
                        monthSelect: l.end.monthSelect,
                        daySelect: l.end.daySelect,
                        minDate: u.minDate,
                        maxDate: u.maxDate
                    },
                    localiseDate: h,
                    onChange: y
                }))))
            };
            var ne = t("337dc83a"),
                te = t("31597aa0"),
                ie = t("2fe109f3"),
                ae = t("996788b1");
            const re = "e131f34780",
                de = "fed761de90",
                se = "ffcf7fff3d",
                le = "d0ba183766",
                oe = "be660ccab7",
                ue = "abcbfa827a",
                ce = "f9055e83a1",
                me = "ec0e7998bc";
            const ve = function(e) {
                var n, t;
                let {
                    inputRef: r,
                    destination: s,
                    isAutocompleteAlwaysExtended: l,
                    isAutocompleteItemsRestyle: u,
                    onInputChange: c,
                    onInputChangeDebounced: m,
                    onInputFocus: v,
                    onOptionSelect: k,
                    onOutsideClick: g,
                    condensed: p
                } = e;
                const f = Boolean(null === s || void 0 === s || null === (n = s.options) || void 0 === n ? void 0 : n.filter((e => e.isGoogleResult)).length),
                    h = l || Boolean(null === (t = s.secondaryOptions) || void 0 === t ? void 0 : t.length);
                return (0, i.useEffect)((() => {
                    s.error.empty.shown && s.error.empty.text && (0, o.screenReaderAnnounce)(s.error.empty.text, "polite")
                }), [s.error.empty.shown, s.error.empty.text]), a().createElement("div", {
                    className: re
                }, a().createElement(te.Z, {
                    inputRef: r,
                    className: d()(de, p && oe),
                    decoratorClassName: se,
                    isClearable: !0,
                    isFocusOnClear: !0,
                    isResultsAbsolute: !0,
                    isResultsShown: s.optionsShown,
                    isWithGoogle: f,
                    icon: a().createElement(o.Icon, {
                        svg: a().createElement(ne.Z, null),
                        size: "large",
                        color: "neutral_alt"
                    }),
                    resultsClassName: d()(le, h && ue, u && ce),
                    resultsItemClassName: u ? me : void 0,
                    name: s.name,
                    placeholder: s.placeholder,
                    value: s.value,
                    debounceMs: 300,
                    onInputFocus: v,
                    onInputChange: c,
                    onInputChangeDebounced: m,
                    options: s.options,
                    secondaryOptions: s.secondaryOptions,
                    onOptionSelect: k,
                    onOutsideClick: g,
                    renderOption: ae.z,
                    getOptionValue: ie.l
                }), s.error.empty.shown && s.error.empty.text ? a().createElement(W, {
                    text: s.error.empty.text
                }) : null)
            };
            var ke = t("434d016f"),
                ge = t("fcd92ab4"),
                pe = t.n(ge),
                fe = t("abab1afe"),
                he = t("8b97fb1a");
            const Ne = "fc527e47ec",
                Se = "f766b6b016",
                _e = "d1babacfe0",
                ye = "d62168fff1";

            function be(e, n) {
                let {
                    open: t,
                    buttonClassName: r,
                    containerClassName: s,
                    popupClassName: l,
                    adults: u,
                    kids: m,
                    kidsAges: v,
                    rooms: k,
                    bedrooms: g,
                    pets: f,
                    holidayRental: h,
                    isWithGroupIcon: N,
                    isWithDropdownIcon: S = !0,
                    isWithPetsToggle: _,
                    isAssistanceAnimalsDisclaimerShown: y,
                    onAssistanceAnimalsDisclaimerClick: b,
                    iconLarge: F,
                    onChange: E = c(),
                    onVisibilityStateChange: I,
                    onDoneButtonClick: A
                } = e;
                const O = e => {
                        null === I || void 0 === I || I(e ? "open" : "close")
                    },
                    D = (0, i.useRef)(null);
                (0, V.Z)(D, (() => O(!1)));
                const R = (0, p.useI18n)(),
                    x = (0, C.T6)(u.value, m.value, k.value, Boolean(null === f || void 0 === f ? void 0 : f.value), R, null !== g && void 0 !== g && g.shown ? g.value : void 0),
                    P = pe()();
                return a().createElement("div", {
                    ref: D,
                    className: s,
                    tabIndex: -1
                }, a().createElement(T, {
                    className: r,
                    onClick: () => O(!t),
                    ref: n,
                    attributes: {
                        "data-testid": "occupancy-config",
                        "aria-controls": P,
                        "aria-expanded": t ? "true" : "false",
                        "aria-label": R.trans((0, fe.t)("mvse_sbox_travellers_rooms_a11y", {
                            variables: {
                                configuration: x
                            }
                        }))
                    },
                    highlightFocused: !0,
                    isWithIcon: S,
                    isCondensed: F
                }, N ? a().createElement(o.Icon, {
                    className: ye,
                    svg: a().createElement(ke.Z, null),
                    size: F ? "large" : "medium",
                    color: "neutral_alt",
                    attributes: {
                        "data-testid": "occupancy-config-icon"
                    }
                }) : null, x), t ? a().createElement("div", {
                    className: Ne
                }, a().createElement("div", {
                    className: d()(Se, l),
                    "data-testid": "occupancy-popup",
                    id: P
                }, a().createElement(he.Z, {
                    adults: u,
                    kids: m,
                    kidsAges: v,
                    rooms: k,
                    bedrooms: g,
                    pets: f,
                    shouldShowPetsControl: _,
                    isAssistanceAnimalsDisclaimerShown: y,
                    onAssistanceAnimalsDisclaimerClick: b,
                    holidayRental: h,
                    onChange: e => {
                        let {
                            value: n,
                            name: t,
                            index: i
                        } = e;
                        E({
                            name: t,
                            value: Number(n),
                            index: i
                        })
                    }
                }), a().createElement(o.Button, {
                    variant: "secondary",
                    className: _e,
                    wide: !0,
                    text: R.trans((0, fe.t)("search_box_guest_num_popup_done")),
                    onClick: () => {
                        O(!1), null === A || void 0 === A || A()
                    }
                }))) : null)
            }
            const Fe = (0, i.forwardRef)(be),
                Ee = "b3d1de1c28",
                Te = "ab2c86b370",
                Ce = "aad29c76fe",
                Ie = "a776b7c5ed";

            function Ae(e, n) {
                let {
                    condensed: t,
                    ...i
                } = e;
                return a().createElement(Fe, (0, s.Z)({}, i, {
                    ref: n,
                    isWithGroupIcon: !0,
                    buttonClassName: Ee,
                    containerClassName: d()(Te, t && Ie),
                    popupClassName: Ce
                }))
            }
            const Oe = (0, i.forwardRef)(Ae);
            var De = t("c9779913"),
                Re = t("51cc4525"),
                xe = t("2b547677");
            const Pe = "b935cde1f7",
                Le = "f1f11c0f4b",
                we = "f75e99edb0",
                Be = "b769347817",
                Ue = "a7e79c28d6",
                Me = "d27b44a969",
                He = "b59e36af6b",
                Ve = "f4ebba22e6";
            const Ge = function(e) {
                let {
                    children: n,
                    version: t = "wide"
                } = e;
                const i = [];
                a().Children.forEach(n, (e => {
                    e && i.push(e)
                }));
                const r = "slim" === t,
                    s = "condensed" === t,
                    l = "noMargin" === t,
                    u = 3 === i.length,
                    c = 4 === i.length;
                return a().createElement(o.Container, {
                    className: d()(Pe, r && Me, s && we, l && Le, u && Ve, c && He),
                    attributes: {
                        "data-testid": "searchbox-layout-wide"
                    },
                    fullWidth: !0
                }, i.map(((e, n) => {
                    let t;
                    return e.type === o.Button && (t = Ue), a().createElement("div", {
                        className: d()(Be, t),
                        key: n
                    }, e)
                })))
            };
            let Ye = function(e) {
                return e.DESTINATION_INPUT_CHANGED = "DESTINATION_INPUT_CHANGED", e.DESTINATION_INPUT_FOCUSED = "DESTINATION_INPUT_FOCUSED", e.DESTINATION_OPTIONS_FETCHED = "DESTINATION_OPTIONS_FETCHED", e.DESTINATION_SECONDARY_OPTIONS_FETCHED = "DESTINATION_SECONDARY_OPTIONS_FETCHED", e.DESTINATION_OPTION_SELECTED = "DESTINATION_OPTION_SELECTED", e.DESTINATION_OUTSIDE_CLICK = "DESTINATION_OUTSIDE_CLICK", e.DATE_OPENED = "DATE_OPENED", e.DATE_PICKER_ACTIVE_TAB_CHANGED = "DATE_PICKER_ACTIVE_TAB_CHANGED", e.DATE_CHANGED = "DATE_CHANGED", e.DATE_CHANGED_SINGLE_CALENDAR = "DATE_CHANGED_SINGLE_CALENDAR", e.CALENDAR_CLOSED = "CALENDAR_CLOSED", e.CALENDAR_PRICES_FETCHED = "CALENDAR_PRICES_FETCHED", e.FLIGHT_SEARCH_CHANGED = "FLIGHT_SEARCH_CHANGED", e.MAX_LOS_UPDATED = "MAX_LOS_UPDATED", e.MIN_LOS_UPDATED = "MIN_LOS_UPDATED", e.FLEXIBLE_DATES_CHANGED = "FLEXIBLE_DATES_CHANGED", e.LONGTERM_FLEXIBLE_DATES_SELECTED_CHANGED = "LONGTERM_FLEXIBLE_DATES_SELECTED_CHANGED", e.OCCUPANCY_CHANGED = "OCCUPANCY_CHANGED", e.OCCUPANCY_VISIBILITY_STATE_CHANGED = "OCCUPANCY_VISIBILITY_STATE_CHANGED", e.OCCUPANCY_GROUP_VISIBILITY_STATE_CHANGED = "OCCUPANCY_GROUP_VISIBILITY_STATE_CHANGED", e.HOMES_AND_APARTMENTS_FIRST_CHANGED = "HOMES_AND_APARTMENTS_FIRST_CHANGED", e.HOMES_AND_APARTMENTS_FIRST_VISIBILITY_STATE_CHANGED = "HOMES_AND_APARTMENTS_FIRST_VISIBILITY_STATE_CHANGED", e.SHOW_ON_MAP_CHANGED = "SHOW_ON_MAP_CHANGED", e.SHOW_ON_MAP_VISIBILITY_STATE_CHANGED = "SHOW_ON_MAP_VISIBILITY_STATE_CHANGED", e.TRAVEL_PURPOSE_CHANGED = "TRAVEL_PURPOSE_CHANGED", e.ASSISTANCE_ANIMALS_DISCLAIMER_MODAL_VISIBILITY = "ASSISTANCE_ANIMALS_DISCLAIMER_MODAL_VISIBILITY", e
            }({});
            const We = {
                    monday: "Monday",
                    tuesday: "Tuesday",
                    wednesday: "Wednesday",
                    thursday: "Thursday",
                    friday: "Friday",
                    saturday: "Saturday",
                    sunday: "Sunday"
                },
                Ke = {
                    monday: "Mon",
                    tuesday: "Tue",
                    wednesday: "Wed",
                    thursday: "Thu",
                    friday: "Fri",
                    saturday: "Sat",
                    sunday: "Sun"
                },
                $e = {
                    january: "January",
                    february: "February",
                    march: "March",
                    april: "April",
                    may: "May",
                    june: "June",
                    july: "July",
                    august: "August",
                    september: "September",
                    october: "October",
                    november: "November",
                    december: "December"
                };
            var qe = t("49dddc75");

            function Ze(e, n) {
                switch (n.type) {
                    case Ye.DESTINATION_INPUT_CHANGED:
                        {
                            if (!e.destination) return e;
                            const t = { ...e,
                                isDataChanged: !0,
                                destination: { ...e.destination,
                                    value: n.payload.value,
                                    option: void 0,
                                    method: n.payload.method
                                }
                            };
                            return t.destination.error.empty.enabled && (t.destination.error = { ...t.destination.error,
                                empty: { ...t.destination.error.empty,
                                    shown: !n.payload.value && Boolean(e.destination.error.empty.shown)
                                }
                            }),
                            t
                        }
                    case Ye.DESTINATION_INPUT_FOCUSED:
                        {
                            if (!e.destination) return e;
                            const t = { ...e,
                                destination: { ...e.destination,
                                    optionsShown: !0
                                }
                            };
                            return t.destination.error && n.payload.dismissErrorMessage && (t.destination.error = { ...t.destination.error,
                                empty: { ...t.destination.error.empty,
                                    shown: !1
                                }
                            }),
                            t
                        }
                    case Ye.DESTINATION_OPTIONS_FETCHED:
                        return e.destination ? { ...e,
                            destination: { ...e.destination,
                                options: n.payload.options
                            }
                        } : e;
                    case Ye.DESTINATION_SECONDARY_OPTIONS_FETCHED:
                        return e.destination ? { ...e,
                            destination: { ...e.destination,
                                secondaryOptions: n.payload.secondaryOptions
                            }
                        } : e;
                    case Ye.DESTINATION_OPTION_SELECTED:
                        {
                            if (!e.destination) return e;
                            const t = n.payload.option,
                                i = { ...e,
                                    isDataChanged: !0,
                                    destination: { ...e.destination,
                                        value: t.valueForInput,
                                        option: t,
                                        method: n.payload.method,
                                        optionsShown: !1
                                    }
                                };
                            return !n.payload.autoOpenCalendarForNoDates || e.date.start.date || e.date.end.date || (i.date = { ...i.date,
                                open: "start"
                            }),
                            i
                        }
                    case Ye.DESTINATION_OUTSIDE_CLICK:
                        var t;
                        return null !== (t = e.destination) && void 0 !== t && t.optionsShown ? { ...e,
                            destination: { ...e.destination,
                                optionsShown: !1
                            }
                        } : e;
                    case Ye.DATE_OPENED:
                        {
                            var i;
                            if (!e.date) return e;
                            const t = { ...e,
                                date: { ...e.date,
                                    open: (null === (i = e.date) || void 0 === i ? void 0 : i.open) === n.payload.open ? void 0 : n.payload.open
                                }
                            };
                            return n.payload.dismissErrorMessage && (t.date.error = { ...t.date.error,
                                empty: { ...t.date.error.empty,
                                    shown: !1
                                },
                                losExceeded: { ...t.date.error.losExceeded,
                                    shown: !1
                                }
                            }),
                            t
                        }
                    case Ye.DATE_PICKER_ACTIVE_TAB_CHANGED:
                        return e.date.longTermFlexibleDates ? { ...e,
                            date: { ...e.date,
                                activeTabId: n.payload.activeTabId
                            }
                        } : e;
                    case Ye.DATE_CHANGED:
                        {
                            if (!e.date) return e;
                            let t = e.date.open;n.payload.open && (t = n.payload.open);
                            const [i, a] = (0, C.$y)({
                                open: t,
                                minDate: e.calendar.minDate,
                                startDate: e.date.start.date,
                                endDate: e.date.end.date,
                                changedDate: n.payload.changedDate
                            });
                            return { ...e,
                                isDataChanged: !0,
                                date: { ...e.date,
                                    open: n.payload.keepCalendarOpen ? t : void 0,
                                    start: { ...e.date.start,
                                        date: i
                                    },
                                    end: { ...e.date.end,
                                        date: a
                                    }
                                }
                            }
                        }
                    case Ye.DATE_CHANGED_SINGLE_CALENDAR:
                        if (!e.date) return e;
                        if ("end" === n.payload.open) {
                            if (e.date.start.date && n.payload.changedDate < e.date.start.date) return { ...e,
                                isDataChanged: !0,
                                date: { ...e.date,
                                    open: "end",
                                    start: { ...e.date.start,
                                        date: n.payload.changedDate
                                    },
                                    end: { ...e.date.end,
                                        date: void 0
                                    }
                                }
                            };
                            if (!(0, m.wn)(e.date.start.date, n.payload.changedDate)) return { ...e,
                                isDataChanged: !0,
                                date: { ...e.date,
                                    open: n.payload.keepCalendarOpen ? "start" : void 0,
                                    end: { ...e.date.end,
                                        date: n.payload.changedDate
                                    }
                                }
                            }
                        }
                        return "start" === n.payload.open ? { ...e,
                            isDataChanged: !0,
                            date: { ...e.date,
                                open: "end",
                                start: { ...e.date.start,
                                    date: n.payload.changedDate
                                },
                                end: { ...e.date.end,
                                    date: void 0
                                }
                            }
                        } : e;
                    case Ye.CALENDAR_PRICES_FETCHED:
                        return e.date ? { ...e,
                            calendar: { ...e.calendar,
                                attachmentData: n.payload.prices,
                                preFooter: n.payload.preFooter
                            }
                        } : e;
                    case Ye.CALENDAR_CLOSED:
                        {
                            if (!e.date || e.date.open !== n.payload.open) return e;
                            const t = { ...e,
                                date: { ...e.date,
                                    open: void 0
                                }
                            };
                            return n.payload.shouldSetEmptyEndDate && t.date.start.date && !t.date.end.date && (t.date.end = { ...t.date.end,
                                date: (0, m.NG)(t.date.start.date)
                            }),
                            t
                        }
                    case Ye.MAX_LOS_UPDATED:
                        return { ...e,
                            date: { ...e.date,
                                maxLOS: n.payload.maxLOS
                            }
                        };
                    case Ye.MIN_LOS_UPDATED:
                        return { ...e,
                            date: { ...e.date,
                                minLOS: n.payload.minLOS
                            }
                        };
                    case Ye.FLEXIBLE_DATES_CHANGED:
                        return e.date.flexibleDates ? { ...e,
                            isDataChanged: !0,
                            date: { ...e.date,
                                open: n.payload.keepCalendarOpen ? e.date.open : void 0,
                                flexibleDates: { ...e.date.flexibleDates,
                                    selected: n.payload.selected ? n.payload.value : "exact"
                                }
                            }
                        } : e;
                    case Ye.LONGTERM_FLEXIBLE_DATES_SELECTED_CHANGED:
                        return e.date.longTermFlexibleDates ? { ...e,
                            date: { ...e.date,
                                longTermFlexibleDates: { ...e.date.longTermFlexibleDates,
                                    selected: n.payload.data
                                }
                            }
                        } : e;
                    case Ye.OCCUPANCY_VISIBILITY_STATE_CHANGED:
                        return e.occupancy ? { ...e,
                            occupancy: { ...e.occupancy,
                                open: n.payload.open
                            }
                        } : e;
                    case Ye.OCCUPANCY_CHANGED:
                        return e.occupancy ? { ...e,
                            isDataChanged: !0,
                            occupancy: (0, C.Qh)({
                                occupancy: e.occupancy,
                                defaultKidsAges: e.occupancy.kidsAges.defaultValues,
                                stitchRoomsWithAdults: e.stitchRoomsWithAdults,
                                ...n.payload
                            })
                        } : e;
                    case Ye.OCCUPANCY_GROUP_VISIBILITY_STATE_CHANGED:
                        {
                            const t = n.payload.name;
                            return e.occupancy && e.occupancy[t] ? { ...e,
                                occupancy: { ...e.occupancy,
                                    [t]: { ...e.occupancy[t],
                                        shown: n.payload.shown
                                    }
                                }
                            } : e
                        }
                    case Ye.TRAVEL_PURPOSE_CHANGED:
                        return e.travelPurpose ? { ...e,
                            isDataChanged: !0,
                            travelPurpose: { ...e.travelPurpose,
                                checked: n.payload.checked
                            }
                        } : e;
                    case Ye.FLIGHT_SEARCH_CHANGED:
                        return e.flightSearch ? { ...e,
                            isDataChanged: !0,
                            flightSearch: { ...e.flightSearch,
                                checked: n.payload.checked
                            }
                        } : e;
                    case Ye.HOMES_AND_APARTMENTS_FIRST_CHANGED:
                        return e.homesAndApartmentsFirst ? { ...e,
                            isDataChanged: !0,
                            homesAndApartmentsFirst: { ...e.homesAndApartmentsFirst,
                                checked: n.payload.checked
                            }
                        } : e;
                    case Ye.HOMES_AND_APARTMENTS_FIRST_VISIBILITY_STATE_CHANGED:
                        return e.homesAndApartmentsFirst ? { ...e,
                            homesAndApartmentsFirst: { ...e.homesAndApartmentsFirst,
                                shown: n.payload.shown
                            }
                        } : e;
                    case Ye.SHOW_ON_MAP_CHANGED:
                        return e.showResultsOnTheMap ? { ...e,
                            isDataChanged: !0,
                            showResultsOnTheMap: { ...e.showResultsOnTheMap,
                                checked: n.payload.checked
                            }
                        } : e;
                    case Ye.SHOW_ON_MAP_VISIBILITY_STATE_CHANGED:
                        return e.showResultsOnTheMap ? { ...e,
                            showResultsOnTheMap: { ...e.showResultsOnTheMap,
                                shown: n.payload.shown
                            }
                        } : e;
                    case Ye.ASSISTANCE_ANIMALS_DISCLAIMER_MODAL_VISIBILITY:
                        return e.occupancy && e.occupancy.pets ? { ...e,
                            occupancy: { ...e.occupancy,
                                pets: { ...e.occupancy.pets,
                                    isDisclaimerModalVisible: n.payload.shown
                                }
                            }
                        } : e;
                    case qe.E.HIDDEN_FIELDS_CHANGED:
                        return { ...e,
                            hiddenFields: { ...e.hiddenFields,
                                ...n.payload
                            }
                        };
                    case qe.E.FORM_SUBMITTED:
                        {
                            const t = n.payload,
                                i = { ...e
                                };
                            return i.destination && (i.destination = { ...i.destination,
                                error: { ...i.destination.error,
                                    empty: { ...i.destination.error.empty,
                                        shown: Boolean(null === t || void 0 === t ? void 0 : t.destinationError)
                                    }
                                }
                            }),
                            i.date && (i.date = { ...i.date,
                                error: { ...i.date.error,
                                    losExceeded: { ...i.date.error.losExceeded,
                                        shown: Boolean(null === t || void 0 === t ? void 0 : t.datesLOSExceededError)
                                    },
                                    empty: { ...i.date.error.empty,
                                        shown: Boolean(null === t || void 0 === t ? void 0 : t.datesEmptyError)
                                    }
                                }
                            }),
                            i
                        }
                    default:
                        return e
                }
            }

            function je(e) {
                const n = (0, p.useI18n)(),
                    [t, a] = (0, i.useReducer)(Ze, {}, (() => (0, C.sO)((e => {
                        const n = new Date,
                            t = (0, C.nG)(n);
                        return {
                            isCJK: !1,
                            header: e.trans((0, fe.t)("sr_sbox_header")),
                            destination: {
                                label: e.trans((0, fe.t)("searchbox_microcopy_where_question_dehotelize")),
                                name: "destination",
                                placeholder: e.trans((0, fe.t)("iq_sbox_accommodation_where")),
                                value: "",
                                options: [],
                                optionsShown: !1,
                                error: {
                                    empty: {
                                        enabled: !0,
                                        shown: !1,
                                        text: e.trans((0, fe.t)("sbox_error_enter_dest"))
                                    }
                                }
                            },
                            date: {
                                start: {
                                    label: e.trans((0, fe.t)("checkin_date")),
                                    placeholder: e.trans((0, fe.t)("search_box_cal_checkin_date")),
                                    monthSelect: {
                                        monthNames: Object.values($e),
                                        name: "",
                                        placeholder: e.trans((0, fe.t)("a11y_sr_check_in_month_selector"))
                                    },
                                    daySelect: {
                                        dayNames: Object.values(We),
                                        name: "",
                                        placeholder: e.trans((0, fe.t)("a11y_sr_check_in_day_selector"))
                                    },
                                    date: n
                                },
                                end: {
                                    label: e.trans((0, fe.t)("checkout_date")),
                                    placeholder: e.trans((0, fe.t)("search_box_cal_checout_date")),
                                    monthSelect: {
                                        monthNames: Object.values($e),
                                        name: "",
                                        placeholder: e.trans((0, fe.t)("a11y_sr_check_out_month_selector"))
                                    },
                                    daySelect: {
                                        dayNames: Object.values(We),
                                        name: "",
                                        placeholder: e.trans((0, fe.t)("a11y_sr_check_out_day_selector"))
                                    },
                                    date: (0, m.NG)(n)
                                },
                                error: {
                                    empty: {
                                        enabled: !1,
                                        shown: !1,
                                        text: ""
                                    },
                                    losExceeded: {
                                        enabled: !0,
                                        shown: !1,
                                        text: ""
                                    }
                                },
                                maxLOS: 30,
                                label: e.trans((0, fe.t)("sr_sbox_checkin_checkout_head"))
                            },
                            calendar: {
                                minDate: n,
                                maxDate: t,
                                firstWeekDay: 1,
                                mode: "double",
                                dayNames: Ke,
                                monthNames: $e
                            },
                            occupancy: {
                                adults: {
                                    name: "adults",
                                    min: 1,
                                    max: 30,
                                    value: 1,
                                    label: e.trans((0, fe.t)("sbox_adults")),
                                    shown: !0
                                },
                                kids: {
                                    name: "kids",
                                    min: 0,
                                    max: 10,
                                    value: 0,
                                    label: e.trans((0, fe.t)("sbox_children")),
                                    shown: !0
                                },
                                kidsAges: {
                                    name: "kidsAges",
                                    min: 0,
                                    max: 17,
                                    values: [],
                                    defaultValues: [-1],
                                    shown: !0
                                },
                                rooms: {
                                    name: "rooms",
                                    min: 1,
                                    max: 30,
                                    value: 1,
                                    label: e.trans((0, fe.t)("sbox_rooms")),
                                    shown: !0
                                },
                                bedrooms: {
                                    name: "bedrooms",
                                    min: 1,
                                    max: 5,
                                    value: 1,
                                    label: e.trans((0, fe.t)("bhgwe_sr_filter_bedrooms_sub_line")),
                                    shown: !1
                                },
                                pets: {
                                    name: "pets",
                                    min: 0,
                                    max: 1,
                                    value: 0,
                                    label: e.trans((0, fe.t)("va_guest_sbox_pets_checkbox")),
                                    type: "switch",
                                    shown: !1,
                                    isDisclaimerModalVisible: !1
                                },
                                holidayRental: {
                                    name: "holidayRental",
                                    min: 0,
                                    max: 1,
                                    value: 0,
                                    label: e.trans((0, fe.t)("fame_bh_epu_entry_looking_holi_home_apt")),
                                    type: "switch",
                                    shown: !1
                                }
                            },
                            travelPurpose: {
                                name: "sb_travel_purpose",
                                checked: !1,
                                shown: !0,
                                label: e.trans((0, fe.t)("sxp_sr_sbox_travelling_for_work")),
                                tooltipText: e.trans((0, fe.t)("bb_sbox_work_text_4"))
                            },
                            flightSearch: {
                                name: "sb_flight_search",
                                checked: !1,
                                shown: !1,
                                label: e.trans((0, fe.t)("xsell_init_show_flights_in_new_tab_accom_page"))
                            },
                            homesAndApartmentsFirst: {
                                name: "sb_entire_place",
                                checked: !1,
                                shown: !0,
                                label: e.trans((0, fe.t)("www_bh_gwe_privacy_entire_home_tickbox_short_header_filter")),
                                labelLong: e.trans((0, fe.t)("bh_gwe_privacy_entire_home_tickbox_header_filter")),
                                tooltipText: e.trans((0, fe.t)("bh_gwe_privacy_entire_home_tickbox_header_tooltip_filter"))
                            },
                            showResultsOnTheMap: {
                                name: "map",
                                checked: !1,
                                shown: !1,
                                label: e.trans((0, fe.t)("sxp_index_sbox_results_in_map"))
                            },
                            hiddenFields: {},
                            submitButtonText: e.trans((0, fe.t)("searchbox_button_sr")),
                            stitchRoomsWithAdults: !1,
                            submitButtonTextAfterUpdate: e.trans((0, fe.t)("sr_sbox_update_search_cta"))
                        }
                    })(n), e)));
                return [t, a]
            }

            function ze(e) {
                var n, t, i;
                const a = {};
                if (null !== (n = e.destination) && void 0 !== n && n.error.empty.enabled && !(e.destination.value || "").trim()) return a.destinationError = !0, a;
                const r = "flexible" === e.date.activeTabId && (0, M.j)(null === (t = e.date.longTermFlexibleDates) || void 0 === t ? void 0 : t.selected);
                return e.date.error.losExceeded.enabled && !r && e.date.start.date && e.date.end.date && e.date.maxLOS && (0, m.VS)(e.date.start.date, e.date.end.date) > e.date.maxLOS ? (a.datesLOSExceededError = !0, a) : !e.date.error.empty.enabled || r || e.date.start.date && e.date.end.date ? null !== (i = e.occupancy.kidsAges) && void 0 !== i && i.values.filter((e => -1 === e)).length ? (a.childrenAgesError = !0, a) : null : (a.datesEmptyError = !0, a)
            }
            var Qe = t("e36b001b");
            const Xe = "cfd71fb584",
                Je = "ee43d4b987",
                en = "a13bb28442",
                nn = "b9a178a893";
            const tn = function(e) {
                var n, t, r, u, c, m, v, k, g, p, f, h, N, S, _, y, b, F;
                const {
                    className: E,
                    formAction: T,
                    formMethod: C = "GET",
                    formTarget: I,
                    localiseDate: A = e => e.toDateString(),
                    experimentalOptions: O,
                    onSubmit: D,
                    onDestinationChange: R,
                    onDestinationChangeDebounced: x,
                    onDestinationFocus: P,
                    onAssistanceAnimalsDisclaimerClick: L,
                    onAutocompleteOptionSelect: w,
                    onDateDisplayClick: B,
                    onCalendarOpen: U,
                    onDateChange: M,
                    onBaseMonthChange: H,
                    onFlexibleDateChange: V,
                    onLongTermFlexibleDateChange: G,
                    onLongTermFlexibleDatesDoneButtonClick: Y,
                    onTabChange: W,
                    onOccupancyChange: K,
                    onOccupancyVisibilityStateChange: $,
                    onHomesAndApartmentsChange: q,
                    onTravelPurposeChange: Z,
                    onDealsUpsorterChange: j,
                    onFlightSearchChange: z,
                    onShowOnMapChange: Q,
                    render: X,
                    initialState: J = {},
                    version: ne = "wide",
                    footerOnDarkBackground: te = !1
                } = e, [ie, ae] = je(J), re = (0, i.useRef)(null), de = (0, i.useRef)(null), se = (0, i.useRef)(!1), le = (0, i.useRef)(null), oe = (0, i.useRef)(null), ue = "condensed" === ne, {
                    onFormSubmit: ce,
                    triggerFormSubmit: me
                } = (0, Qe.Z)({
                    state: ie,
                    dispatch: ae,
                    validateForm: ze,
                    onError: e => {
                        var n;
                        null !== e && void 0 !== e && e.childrenAgesError && (ae({
                            type: Ye.OCCUPANCY_VISIBILITY_STATE_CHANGED,
                            payload: {
                                open: !0
                            }
                        }), null === (n = de.current) || void 0 === n || n.focus())
                    },
                    onSubmit: D
                });
                return (0, i.useEffect)((() => {
                    !se.current && ie.date.open && (null === U || void 0 === U || U(ie.date.open, ie, ae)), se.current = Boolean(ie.date.open)
                }), [U, ie.date.open, ie, ae]), a().createElement(De.Z, {
                    className: d()("slim" === ne && nn, E),
                    formAction: T,
                    formMethod: C,
                    formTarget: I,
                    formRef: le,
                    onSubmit: ce
                }, a().createElement(Ge, {
                    version: ne
                }, ie.destination ? a().createElement(ve, {
                    inputRef: re,
                    destination: ie.destination,
                    isAutocompleteAlwaysExtended: null === O || void 0 === O || null === (n = O.destination) || void 0 === n ? void 0 : n.autocompleteAlwaysExtended,
                    isAutocompleteItemsRestyle: null === O || void 0 === O || null === (t = O.destination) || void 0 === t ? void 0 : t.autocompleteItemsRestyle,
                    onInputChange: (e, n) => {
                        ae({
                            type: Ye.DESTINATION_INPUT_CHANGED,
                            payload: n
                        }), null === R || void 0 === R || R(n, ie, ae)
                    },
                    onInputChangeDebounced: (e, n) => {
                        null === x || void 0 === x || x(n, ie, ae)
                    },
                    onOptionSelect: (e, n) => {
                        ae({
                            type: Ye.DESTINATION_OPTION_SELECTED,
                            payload: { ...n,
                                autoOpenCalendarForNoDates: !0
                            }
                        }), null === w || void 0 === w || w(n, ie, ae)
                    },
                    onInputFocus: e => {
                        ae({
                            type: Ye.DESTINATION_INPUT_FOCUSED,
                            payload: {
                                dismissErrorMessage: !0
                            }
                        }), null === P || void 0 === P || P(e, ie, ae)
                    },
                    onOutsideClick: () => ae({
                        type: Ye.DESTINATION_OUTSIDE_CLICK
                    }),
                    condensed: ue
                }) : null, a().createElement(ee, {
                    date: ie.date,
                    calendar: ie.calendar,
                    singleDatesField: null === O || void 0 === O || null === (r = O.dates) || void 0 === r ? void 0 : r.singleField,
                    keepCalendarOpenOnCookieBannerClick: null === O || void 0 === O || null === (u = O.calendar) || void 0 === u ? void 0 : u.keepCalendarOpenOnCookieBannerClick,
                    keepCalendarOpenOnClickOutside: null === O || void 0 === O || null === (c = O.calendar) || void 0 === c ? void 0 : c.keepCalendarOpenOnClickOutside,
                    localiseDate: A,
                    iconLarge: null === O || void 0 === O || null === (m = O.calendar) || void 0 === m ? void 0 : m.iconLarge,
                    onDateClick: (e, n) => {
                        ae({
                            type: Ye.DATE_OPENED,
                            payload: {
                                open: n,
                                dismissErrorMessage: !0
                            }
                        }), null === B || void 0 === B || B(n, ie, ae)
                    },
                    onDateChange: e => {
                        var n;
                        let {
                            changedDate: t,
                            id: i,
                            isCalendar: a
                        } = e;
                        const r = {
                            changedDate: t,
                            open: i,
                            keepCalendarOpen: (null === O || void 0 === O || null === (n = O.calendar) || void 0 === n ? void 0 : n.keepCheckoutCalendarOpen) && "end" === ie.date.open
                        };
                        ae(a ? {
                            type: Ye.DATE_CHANGED_SINGLE_CALENDAR,
                            payload: r
                        } : {
                            type: Ye.DATE_CHANGED,
                            payload: r
                        }), null === M || void 0 === M || M(r, ie, ae)
                    },
                    onBaseMonthChange: e => {
                        null === H || void 0 === H || H(e, ie, ae)
                    },
                    onFlexibleDateChange: e => {
                        ae({
                            type: Ye.FLEXIBLE_DATES_CHANGED,
                            payload: { ...e,
                                keepCalendarOpen: !0
                            }
                        }), null === V || void 0 === V || V(e)
                    },
                    onLongTermFlexibleDateChange: e => {
                        ae({
                            type: Ye.LONGTERM_FLEXIBLE_DATES_SELECTED_CHANGED,
                            payload: {
                                data: e
                            }
                        }), null === G || void 0 === G || G(e)
                    },
                    onLongTermFlexibleDatesDoneButtonClick: Y,
                    onTabChange: e => {
                        ae({
                            type: Ye.DATE_PICKER_ACTIVE_TAB_CHANGED,
                            payload: {
                                activeTabId: e
                            }
                        }), null === W || void 0 === W || W(e)
                    },
                    onOutsideClick: e => ae({
                        type: Ye.CALENDAR_CLOSED,
                        payload: {
                            open: e,
                            shouldSetEmptyEndDate: !0
                        }
                    }),
                    startDateInputFocusRef: oe,
                    calendarPosition: null === O || void 0 === O || null === (v = O.calendar) || void 0 === v ? void 0 : v.calendarPosition
                }), a().createElement(Oe, (0, s.Z)({}, ie.occupancy, {
                    ref: de,
                    onChange: e => {
                        ae({
                            type: Ye.OCCUPANCY_CHANGED,
                            payload: e
                        }), null === K || void 0 === K || K(e, ie, ae)
                    },
                    onVisibilityStateChange: e => {
                        ae({
                            type: Ye.OCCUPANCY_VISIBILITY_STATE_CHANGED,
                            payload: {
                                open: "open" === e
                            }
                        }), null === $ || void 0 === $ || $(e)
                    },
                    onDoneButtonClick: () => {
                        var e;
                        null === (e = de.current) || void 0 === e || e.focus()
                    },
                    onAssistanceAnimalsDisclaimerClick: () => {
                        ae({
                            type: Ye.ASSISTANCE_ANIMALS_DISCLAIMER_MODAL_VISIBILITY,
                            payload: {
                                shown: !0
                            }
                        }), null === L || void 0 === L || L()
                    },
                    isWithPetsToggle: null === O || void 0 === O || null === (k = O.occupancy) || void 0 === k ? void 0 : k.showPetsFilter,
                    isAssistanceAnimalsDisclaimerShown: null === O || void 0 === O || null === (g = O.occupancy) || void 0 === g ? void 0 : g.isAssistanceAnimalsDisclaimerShown,
                    iconLarge: null === O || void 0 === O || null === (p = O.occupancy) || void 0 === p ? void 0 : p.iconLarge,
                    condensed: ue
                })), a().createElement(o.Button, {
                    type: "submit",
                    text: null !== O && void 0 !== O && null !== (f = O.submit) && void 0 !== f && f.updateCopyOnFormChanges && ie.isDataChanged ? ie.submitButtonTextAfterUpdate : ie.submitButtonText,
                    size: "slim" === ne ? "medium" : "large",
                    icon: null !== O && void 0 !== O && null !== (h = O.submit) && void 0 !== h && h.updateCopyOnFormChanges && ie.isDataChanged ? a().createElement(l, null) : void 0,
                    wide: !0,
                    className: Xe
                })), a().createElement("fieldset", {
                    className: d()(Je, te && en),
                    "data-testid": "searchbox-footer"
                }, null !== (N = ie.homesAndApartmentsFirst) && void 0 !== N && N.shown ? a().createElement(o.InputCheckbox, {
                    defaultChecked: Boolean(ie.homesAndApartmentsFirst.checked),
                    name: ie.homesAndApartmentsFirst.name,
                    value: "1",
                    label: ie.homesAndApartmentsFirst.labelLong,
                    onChange: e => {
                        ae({
                            type: Ye.HOMES_AND_APARTMENTS_FIRST_CHANGED,
                            payload: e
                        }), null === q || void 0 === q || q(e, ie, ae)
                    }
                }) : null, null !== (S = ie.travelPurpose) && void 0 !== S && S.shown ? a().createElement(o.InputCheckbox, {
                    defaultChecked: Boolean(ie.travelPurpose.checked),
                    name: ie.travelPurpose.name,
                    label: ie.travelPurpose.label,
                    value: "business",
                    onChange: e => {
                        ae({
                            type: Ye.TRAVEL_PURPOSE_CHANGED,
                            payload: e
                        }), null === Z || void 0 === Z || Z(e, ie, ae)
                    }
                }) : null, null !== (_ = ie.dealsUpsorterCheckbox) && void 0 !== _ && _.shown ? a().createElement(o.InputCheckbox, {
                    defaultChecked: Boolean(ie.dealsUpsorterCheckbox.checked),
                    name: ie.dealsUpsorterCheckbox.name,
                    label: ie.dealsUpsorterCheckbox.label,
                    value: "deals_upsorter",
                    onChange: e => {
                        null === j || void 0 === j || j(e, ie, ae)
                    }
                }) : null, null !== (y = ie.flightSearch) && void 0 !== y && y.shown ? a().createElement(o.InputCheckbox, {
                    defaultChecked: Boolean(ie.flightSearch.checked),
                    name: ie.flightSearch.name,
                    label: ie.flightSearch.label,
                    value: "flight",
                    onChange: e => {
                        ae({
                            type: Ye.FLIGHT_SEARCH_CHANGED,
                            payload: e
                        }), null === z || void 0 === z || z(e, ie, ae)
                    }
                }) : null, null !== (b = ie.showResultsOnTheMap) && void 0 !== b && b.shown ? a().createElement(o.InputCheckbox, {
                    defaultChecked: Boolean(ie.showResultsOnTheMap.checked),
                    name: ie.showResultsOnTheMap.name,
                    value: "1",
                    label: ie.showResultsOnTheMap.label,
                    onChange: e => {
                        ae({
                            type: Ye.SHOW_ON_MAP_CHANGED,
                            payload: e
                        }), null === Q || void 0 === Q || Q(e, ie, ae)
                    }
                }) : null), X ? X({
                    dispatch: ae,
                    destinationFocus: () => {
                        var e;
                        return null === (e = re.current) || void 0 === e ? void 0 : e.focus()
                    },
                    submitForm: () => me(le.current),
                    startDateInputFocus: () => {
                        var e;
                        return null === (e = oe.current) || void 0 === e ? void 0 : e.call(oe)
                    }
                }) : void 0, a().createElement(xe.Z, {
                    fields: ie.hiddenFields
                }), a().createElement(Re.Z, {
                    isVisible: (null === (F = ie.occupancy) || void 0 === F || null === (F = F.pets) || void 0 === F ? void 0 : F.isDisclaimerModalVisible) || !1,
                    position: "center",
                    onClose: () => {
                        ae({
                            type: Ye.ASSISTANCE_ANIMALS_DISCLAIMER_MODAL_VISIBILITY,
                            payload: {
                                shown: !1
                            }
                        })
                    }
                }))
            };
            var an = t("dc6d28ff"),
                rn = t("28dbd132"),
                dn = t("d0fefcf5"),
                sn = t("239beb17");
            (0, fe.registerDynamicTags)((0, fe.t)("date_format", "fakeIndex", "short_date_with_weekday_without_year"));
            const ln = "short_date_with_weekday_without_year";
            var on = t("107a8bb5"),
                un = t("81b96a0f"),
                cn = t("43a4d203"),
                mn = t("dfbd7c7c"),
                vn = (t("24bf173f"), t("ba394a5d"), t("05c5dc4d")),
                kn = t("e91eda94");
            const gn = 3,
                pn = 4;
            var fn = t("6ae86058");
            const hn = e => {
                var n, t;
                const i = (0, fn.ZP)();
                null !== (n = (0, an.getRequestContext)().getAffiliate()) && void 0 !== n && n.isBookingBranded && (0, rn.trackExperimentStage)(rn.exp `OJVZAIFZGKTVaVUXFSdEDRNPUAZNdAYKe`, 1), null !== (t = (0, an.getRequestContext)().getAffiliate()) && void 0 !== t && t.isCobrand && (0, rn.trackExperimentStage)(rn.exp `OJVZAIFZGKTVaVUXFSdEDRNPUePVbSccbHC`, 1), "index" === i && (0, rn.trackExperimentStage)(rn.exp `HVQeYFRURURYDEZREWQUQeFIYbFVZYFaO`, 1);
                const a = rn.exp `HVQeYFRURURYSfZRIIbMRbZNZHT`;
                (0, rn.trackExperimentStage)(a, 1), (0, rn.trackExperimentStage)(a, {
                    searchresults: 2,
                    index: 3
                }[i] ? ? 4), "propertypage" === i && e && function(e) {
                    if ((0, kn.Z)() && "1" === e.searchParams.get("ucfs")) {
                        const n = (0, vn.Z)(e);
                        (0, rn.trackCustomGoal)(rn.exp `HVQeYFRURURYTfUOeOAJZYLAXCC`, n ? pn : gn)
                    }
                }(e), (0, rn.trackExperimentStage)(rn.exp `HVLDTLUedKNKNKHcVdaWMaBQOHT`, 1)
            };

            function Nn() {
                if ((0, an.getRequestContext)().getSiteType() === cn.SiteType.WWW) {
                    const e = (0, fn.ZP)(),
                        n = rn.exp `HVLDTLUedKNKNKHcVdaWMaBQOHT`;
                    (0, rn.trackExperimentStage)(n, 2), "index" === e ? (0, rn.trackExperimentStage)(n, 3) : "searchresults" === e ? (0, rn.trackExperimentStage)(n, 4) : "propertypage" === e ? (0, rn.trackExperimentStage)(n, 5) : (0, rn.trackExperimentStage)(n, 6)
                }
            }
            var Sn = t("0835130d"),
                _n = t("284975bf"),
                yn = t("db87586a"),
                bn = t("cdfdb49e");
            const Fn = e => e < 10 ? `0${e}` : `${e}`,
                En = e => e ? `${null===e||void 0===e?void 0:e.getFullYear()}-${Fn((null===e||void 0===e?void 0:e.getMonth())+1)}-${Fn(null===e||void 0===e?void 0:e.getDate())}` : null,
                Tn = e => {
                    let {
                        destinationId: n,
                        destinationType: t,
                        startDate: i,
                        endDate: a,
                        numAdults: r,
                        childrenAges: d
                    } = e;
                    const s = En(i),
                        l = En(a),
                        o = `${r}`,
                        u = d.join(","),
                        c = null === t || void 0 === t ? void 0 : t.toLowerCase(),
                        m = /booking\.cn/.test(location.origin) ? "booking.cn" : "booking.com";
                    let v = `https://${/\.(?:dev|dqs)\.booking\.com/.test(location.origin)?location.origin:m}/cross_sell_flights_redirect.html?ufi=${n}&num_adults=${o}`;
                    return s && (v += `&start_date=${s}`), l && (v += `&end_date=${l}`), u && (v += `&children_ages=${u}`), c && (v += `&destination_type=${c}`), v
                };
            const Cn = {
                MAPS_DATA_RETRIEVED: "CAPLA_EVENT_search-web_searchresults_MAPS_DATA_RETRIEVED",
                RESULTS_UPDATED: "CAPLA_EVENT_search-web_searchresults_RESULTS_UPDATED",
                SHOW_PRICES_CLICKED: "CAPLA_EVENT_search-web_searchresults_SHOW_PRICES_CLICKED",
                SORTERS_DATA_RETRIEVED: "CAPLA_EVENT_search-web_searchresults_SORTERS_DATA_RETRIEVED",
                ROCKET_MILES_SORT_POINTS: "CAPLA_EVENT_search-web_searchresults_ROCKET_MILES_SORT_POINTS"
            };
            var In = t("8ded1df4"),
                An = t("7311adbc");

            function On(e, n) {
                var t;
                const i = n.getLanguage(),
                    a = Boolean(null === (t = n.getAffiliate()) || void 0 === t ? void 0 : t.isBookingOwned);
                return e + ("en-us" === i && a ? "" : "." + i) + ".html"
            }

            function Dn(e) {
                let {
                    hasDestinationChanged: n
                } = e, t = !1;
                const i = (0, an.getRequestContext)(),
                    a = new URL(i.getBasePageUrl());
                return a.search = "", "broad-search" !== (0, fn.ZP)() || n ? a.pathname = function(e) {
                    return On("/searchresults", e)
                }(i) : (a.pathname = On("/explore", i), t = !0), {
                    formAction: a,
                    isSearchEntitiesEnabledForFormAction: t
                }
            }
            var Rn = t("0bf1d6ed");
            (0, fe.registerDynamicTags)((0, fe.t)("date_format", "fakeIndex", "day_short_month_between"));
            var xn = t("cedcabf9");
            const Pn = {},
                Ln = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "UserSearches"
                        },
                        variableDefinitions: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "getUserSearches"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "userSearches"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "previousSearch"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "deviceType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "destName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "destId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "destType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "destTypeStr"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "checkin"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "checkout"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "childrenAges"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "childrenTotal"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "adultsTotal"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "numberRoomsNeeded"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "timestamp"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "destinationMetadata"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "destType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "value"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 462,
                        source: {
                            body: "\n  query UserSearches {\n    getUserSearches {\n      userSearches {\n        previousSearch {\n          deviceType\n          destName\n          destId\n          destType\n          destTypeStr\n          checkin\n          checkout\n          childrenAges\n          childrenTotal\n          adultsTotal\n          numberRoomsNeeded\n          timestamp\n        }\n        destinationMetadata {\n          destType\n          name\n          value\n        }\n      }\n    }\n  }\n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };
            var wn = t("dd6086f7");
            const Bn = 8,
                Un = (e, n) => {
                    const t = [];
                    if (e.checkin && e.checkout) {
                        const i = new Date(e.checkin),
                            a = new Date(e.checkout),
                            r = (0, on.p6)(n, {
                                date: i,
                                dateUntil: a,
                                form: "day_short_month_between"
                            });
                        t.push(r)
                    }
                    if (e.adultsTotal > 0) {
                        const i = n.trans((0, p.t)("sxp_index_sbox_horizontal_adults", {
                            variables: {
                                num_adults: e.adultsTotal
                            },
                            num_exception: e.adultsTotal
                        }));
                        t.push(i)
                    }
                    if (e.childrenTotal > 0) {
                        const i = n.trans((0, p.t)("sxp_lp_sbox_num_children", {
                            variables: {
                                num_children: e.childrenTotal
                            },
                            num_exception: e.childrenTotal
                        }));
                        t.push(i)
                    }
                    return t.join(", ")
                };

            function Mn() {
                var e;
                const n = (0, p.useI18n)(),
                    {
                        data: t
                    } = function(e) {
                        const n = { ...Pn,
                            ...e
                        };
                        return xn.useQuery(Ln, n)
                    }({
                        skip: !(0, Sn.M9)()
                    }),
                    i = (0, an.getRequestContext)().getLanguage(),
                    a = [],
                    r = new Set;
                return null === t || void 0 === t || null === (e = t.getUserSearches) || void 0 === e || null === (e = e.userSearches) || void 0 === e || e.slice(0, Bn).forEach(((e, t) => {
                    let {
                        previousSearch: d
                    } = e;
                    d.destId && d.destTypeStr && !r.has(d.destId) && (r.add(d.destId), a.push({
                        titleAbove: 0 === t ? {
                            text: n.trans((0, p.t)("hp_your_recent_searches_heading"))
                        } : void 0,
                        collapseGroup: !0,
                        destId: d.destId,
                        destType: d.destTypeStr,
                        valueForInput: "",
                        iconType: "search-history",
                        title: d.destName || "",
                        subtitle: Un(d, n),
                        langCode: i,
                        isRecentSearch: !0,
                        previousSearchDetails: {
                            checkin: d.checkin ? new Date(d.checkin) : void 0,
                            checkout: d.checkout ? new Date(d.checkout) : void 0,
                            nbAdults: d.adultsTotal,
                            nbChildren: d.childrenTotal || 0,
                            nbRooms: d.numberRoomsNeeded || 0,
                            childrenAges: d.childrenAges || []
                        },
                        url: (0, wn.d)({
                            destId: d.destId,
                            destType: d.destTypeStr,
                            checkin: d.checkin,
                            checkout: d.checkout,
                            nbAdults: d.adultsTotal,
                            nbChildren: d.childrenTotal,
                            nbRooms: d.numberRoomsNeeded,
                            childrenAges: d.childrenAges,
                            fromSearchHistorySearchbox: !0
                        })
                    }))
                })), a
            }
            var Hn = t("768370ae"),
                Vn = t("9b9371c1");
            const Gn = {
                RESET_AND_FOCUS_DESTINATION_INPUT: "CAPLA_EVENT_search-web_searchresults_RESET_AND_FOCUS_DESTINATION_INPUT",
                OPEN_CALENDAR: "CAPLA_EVENT_search-web_searchresults_OPEN_CALENDAR"
            };
            var Yn = t("24e040c9"),
                Wn = t.n(Yn),
                Kn = t("4f475142");
            const $n = {
                    container: "a193cf1ed6",
                    containerBookingBrandedV1: "ea8210827e",
                    containerCobrandedV1: "f2284548f5",
                    containerCobrandedV2: "e8d721f019",
                    content: "adaeede2f1",
                    contentElevated: "bf87a28685"
                },
                qn = ["landmark", "airport", "district"],
                Zn = [...qn, "latlong"];

            function jn(e) {
                var n, t;
                let {
                    version: r = "wide",
                    searchParams: s,
                    footerOnDarkBackground: l = !1,
                    keepCalendarOpenOnClickOutsideWithoutDates: o,
                    useSuspense: u = !1,
                    is404or500Page: c,
                    broadSearchData: m,
                    showBedroomStepper: v
                } = e;
                const k = (0, i.useRef)(),
                    g = (0, i.useRef)(),
                    f = (0, i.useRef)(),
                    h = (0, i.useRef)(),
                    [N, S] = (0, i.useState)(!1),
                    _ = (0, Rn.i)(),
                    y = Mn(),
                    b = (0, p.useI18n)(),
                    F = (0, fn.ZP)(),
                    [E, T] = (0, i.useState)(!1),
                    {
                        formAction: C,
                        isSearchEntitiesEnabledForFormAction: I
                    } = Dn({
                        hasDestinationChanged: E
                    });
                (0, Vn.Z)(In.Mv, (e => {
                    if ("searchresults" === (0, fn.ZP)() && k.current) {
                        if ((0, Hn.ep)()) {
                            const n = (0, Hn.av)(e);
                            k.current({
                                type: Ye.OCCUPANCY_CHANGED,
                                payload: {
                                    name: "pets",
                                    value: n ? 1 : 0
                                }
                            })
                        }(0, _n.kf)() && k.current({
                            type: Ye.OCCUPANCY_CHANGED,
                            payload: {
                                name: "holidayRental",
                                value: (0, _n.fW)(e) ? 1 : 0
                            }
                        })
                    }
                }));
                const A = "landingpage" === F,
                    O = "holidays" === F,
                    D = "propertypage" === F,
                    R = A || O,
                    x = (0, An.Z)({
                        useSuspense: u,
                        autoOpenCalendarForNoDates: "searchresults" === F || "booking-home" === F,
                        autoOpenCalendarAlways: R,
                        broadSearchData: m
                    });
                (0, i.useEffect)((() => {
                    var e;
                    E || null !== x && void 0 !== x && null !== (e = x.state) && void 0 !== e && null !== (e = e.destination) && void 0 !== e && e.value || S(!0)
                }), [null === x || void 0 === x || null === (n = x.state) || void 0 === n || null === (n = n.destination) || void 0 === n ? void 0 : n.value, E]),
                function(e, n) {
                    var t, i, a, r;
                    const d = (0, bn.pr)();
                    (0, Sn.M9)() && e.destination && !e.destination.value ? e.destination.options = [...n.userSearches || [], ...n.popularDestinations || []] : d && e.destination && !e.destination.value && null !== (t = n.previousSearches) && void 0 !== t && t.length ? (e.destination.options = n.previousSearches || [], 2 === (0, rn.trackExperiment)(rn.exp `TZUfdKNKNKHNYKSccEHAANfNEJGKTJVRT`) && (e.destination.secondaryOptions = n.popularDestinations || [])) : e.destination && !e.destination.value && null !== n && void 0 !== n && n.popularDestinations && (e.destination.options = n.popularDestinations), n.hasGuessedLocation && e.destination && d && (e.destination.error = {
                        empty: {
                            enabled: !1
                        }
                    });
                    const s = (0, yn.P)(n.i18n);
                    null !== (i = e.date) && void 0 !== i && i.start && (e.date.start.daySelect = {
                        dayNames: s.dayNames
                    }, e.date.start.monthSelect = {
                        monthNames: s.monthNames
                    }), null !== (a = e.date) && void 0 !== a && a.end && (e.date.end.daySelect = {
                        dayNames: s.dayNames
                    }, e.date.end.monthSelect = {
                        monthNames: s.monthNames
                    }), ((0, fn.KF)("searchresults", "booking-home", "deals-campaign", "deals-seasonal", "propertypage") || n.forceHideCheckboxes) && function(e) {
                        e.showResultsOnTheMap = void 0, e.homesAndApartmentsFirst = void 0, e.travelPurpose = void 0, e.flightSearch = void 0
                    }(e), "index" === (0, fn.ZP)() && (e.travelPurpose = void 0), null !== (r = e.occupancy) && void 0 !== r && r.holidayRental && (0, _n.kf)() && (e.occupancy.holidayRental.shown = !0, e.homesAndApartmentsFirst = void 0)
                }(x.state, {
                    i18n: b,
                    popularDestinations: _,
                    previousSearches: x.previousSearches,
                    userSearches: y,
                    hasGuessedLocation: Boolean(x.guessedLocation),
                    forceHideCheckboxes: c
                }), (0, i.useEffect)((() => {
                    k.current && v && (k.current({
                        type: Ye.OCCUPANCY_GROUP_VISIBILITY_STATE_CHANGED,
                        payload: {
                            name: "rooms",
                            shown: !1
                        }
                    }), k.current({
                        type: Ye.OCCUPANCY_GROUP_VISIBILITY_STATE_CHANGED,
                        payload: {
                            name: "bedrooms",
                            shown: !0
                        }
                    }))
                }), [v]), (0, i.useEffect)((() => {
                    k.current && null !== _ && void 0 !== _ && _.length && N && function(e) {
                        let {
                            dispatch: n,
                            popularDestinations: t,
                            previousSearches: i,
                            userSearches: a
                        } = e;
                        const r = (0, rn.trackExperiment)(rn.exp `TZUfdKNKNKHNYKSccEHAANfNEJGKTJVRT`);
                        (0, Sn.M9)() ? n({
                            type: Ye.DESTINATION_OPTIONS_FETCHED,
                            payload: {
                                options: [...a || [], ...t || []]
                            }
                        }): r ? (n({
                            type: Ye.DESTINATION_OPTIONS_FETCHED,
                            payload: {
                                options: i || []
                            }
                        }), 2 === r && (null !== i && void 0 !== i && i.length ? n({
                            type: Ye.DESTINATION_SECONDARY_OPTIONS_FETCHED,
                            payload: {
                                secondaryOptions: t || []
                            }
                        }) : n({
                            type: Ye.DESTINATION_OPTIONS_FETCHED,
                            payload: {
                                options: t || []
                            }
                        }))) : (n({
                            type: Ye.DESTINATION_OPTIONS_FETCHED,
                            payload: {
                                options: t || []
                            }
                        }), n({
                            type: Ye.DESTINATION_SECONDARY_OPTIONS_FETCHED,
                            payload: {
                                secondaryOptions: []
                            }
                        }))
                    }({
                        dispatch: k.current,
                        popularDestinations: _,
                        previousSearches: x.previousSearches,
                        userSearches: y
                    })
                }), [x.previousSearches, N, _, y]);
                const P = (0, sn.isFeatureRunning)(sn.feature `HVLDTLUeMTXEUDdJBCWAUDWHCSCWQQWe`);
                (0, i.useEffect)((() => {
                    const e = (e, n) => {
                            var t;
                            null !== n && void 0 !== n && n.keyboardAccessible && !P ? null === (t = h.current) || void 0 === t || t.call(h) : k.current && k.current({
                                type: Ye.DATE_OPENED,
                                payload: {
                                    open: "start"
                                }
                            });
                            "scrollBehavior" in document.documentElement.style ? window.scrollTo({
                                top: 0,
                                left: 0,
                                behavior: "smooth"
                            }) : window.scrollTo(0, 0)
                        },
                        n = dn.eventBus.subscribe(Cn.SHOW_PRICES_CLICKED, e),
                        t = dn.eventBus.subscribe(Gn.OPEN_CALENDAR, e),
                        i = dn.eventBus.subscribe(Gn.RESET_AND_FOCUS_DESTINATION_INPUT, (() => {
                            var e;
                            null === (e = g.current) || void 0 === e || e.call(g), k.current && k.current({
                                type: Ye.DESTINATION_INPUT_CHANGED,
                                payload: {
                                    value: "",
                                    method: "input-clear"
                                }
                            })
                        }));
                    return () => {
                        dn.eventBus.unsubscribe(n), dn.eventBus.unsubscribe(t), dn.eventBus.unsubscribe(i)
                    }
                }), [P]);
                const L = (0, rn.trackExperiment)(rn.exp `HVLDTLUedKNKNKHcVdaWMaBQOHT`) > 0;
                hn(x.pageUrl);
                const w = o && !(null !== (t = x.state.date) && void 0 !== t && null !== (t = t.start) && void 0 !== t && t.date);
                (0, Sn.QK)(), (0, _n.eD)(x.state);
                const B = rn.exp `HVQeYFRURURYSfZRIIbMRbZNZHT`,
                    U = (0, rn.trackExperiment)(B) > 0,
                    M = a().createElement(tn, {
                        version: r,
                        footerOnDarkBackground: l,
                        localiseDate: e => (0, on.p6)(b, {
                            date: e,
                            form: ln
                        }),
                        formAction: C.toString(),
                        formTarget: O || D ? "_blank" : void 0,
                        initialState: x.state,
                        experimentalOptions: {
                            destination: {
                                autocompleteAlwaysExtended: L,
                                autocompleteItemsRestyle: Boolean((0, bn.pr)() || L)
                            },
                            calendar: {
                                keepCheckoutCalendarOpen: (0, bn.en)(),
                                keepCalendarOpenOnCookieBannerClick: !!A || void 0,
                                keepCalendarOpenOnClickOutside: w,
                                iconLarge: U,
                                calendarPosition: "condensed" === r ? "right" : "bottom"
                            },
                            dates: {
                                singleField: P
                            },
                            occupancy: {
                                showPetsFilter: (0, Hn.ep)(),
                                isAssistanceAnimalsDisclaimerShown: (0, Hn.Il)(),
                                iconLarge: U
                            }
                        },
                        onAssistanceAnimalsDisclaimerClick: () => {
                            (0, rn.trackCustomGoal)(rn.exp `GDIcdSZcHCSIURSBVSGfZVFRURURHe`, 4), "propertypage" === (0, fn.ZP)() && (0, rn.trackCustomGoal)(rn.exp `GDIcdSZcHCSCGVfOMTXEUDdeOYC`, 2)
                        },
                        onAutocompleteOptionSelect: (e, n, t) => {
                            let {
                                option: i
                            } = e;
                            if (i.url) return window.location.href = i.url.toString(), void(i.isRecentSearch && (0, rn.trackCustomGoal)((0, Sn.BH)(), 2));
                            i.isGoogleResultNotResolved && i.placeId && x.autocomplete.resolveSearchPlaceIdToLatLon(i.placeId, i.source), (0, _n.kf)() ? t({
                                type: Ye.OCCUPANCY_GROUP_VISIBILITY_STATE_CHANGED,
                                payload: {
                                    name: "holidayRental",
                                    shown: Boolean(i.isHomesSearchEnabled)
                                }
                            }) : "index" !== F && "searchresults" !== F || t({
                                type: Ye.HOMES_AND_APARTMENTS_FIRST_VISIBILITY_STATE_CHANGED,
                                payload: {
                                    shown: Boolean(i.isHomesSearchEnabled)
                                }
                            }), t({
                                type: Ye.MAX_LOS_UPDATED,
                                payload: {
                                    maxLOS: i.maxLOS || In.Kt
                                }
                            }); - 1 === ("index" === F && (0, rn.trackExperiment)(rn.exp `HVQeYFRURURYDEZREWQUQeFIYbFVZYFaO`) ? Zn : qn).indexOf(i.destType) || i.metaMatchPropertyTypeId ? t({
                                type: Ye.SHOW_ON_MAP_VISIBILITY_STATE_CHANGED,
                                payload: {
                                    shown: !1
                                }
                            }) : (t({
                                type: Ye.SHOW_ON_MAP_VISIBILITY_STATE_CHANGED,
                                payload: {
                                    shown: !0
                                }
                            }), t({
                                type: Ye.SHOW_ON_MAP_CHANGED,
                                payload: {
                                    checked: !0
                                }
                            })), (0, bn.vU)(i), "isPopularDest" in i && i.isPopularDest && (0, bn.Lx)()
                        },
                        onDestinationFocus: e => {
                            var n;
                            null !== e && void 0 !== e && e.target.value || ((0, rn.trackExperimentStage)(rn.exp `TZUfdKNKNKHNYKSccEHAANfNEJGKTJVRT`, 1), null !== (n = x.previousSearches) && void 0 !== n && n.filter((e => !e.isAroundMe)).length && (0, rn.trackCustomGoal)(rn.exp `TZUfdKNKNKHNYKSccEHAANfNEJGKTJVRT`, 2), Nn(), (0, bn.H2)(), (0, rn.trackExperimentStage)((0, Sn.BH)(), 1), y.length > 0 && (0, rn.trackCustomGoal)((0, Sn.BH)(), 1), null !== _ && void 0 !== _ && _.length || (0, rn.trackCustomGoal)(rn.exp `HVLDTLUedRNYYdTUHSYBJNCFHe`, 1));
                            (0, Sn.cA)()
                        },
                        onDestinationChange: e => {
                            let {
                                value: n
                            } = e;
                            var t;
                            (S(!n), n) || ((0, rn.trackExperimentStage)(rn.exp `TZUfdKNKNKHNYKSccEHAANfNEJGKTJVRT`, 1), (0, bn.H2)(), null !== (t = x.previousSearches) && void 0 !== t && t.filter((e => !e.isAroundMe)).length && (0, rn.trackCustomGoal)(rn.exp `TZUfdKNKNKHNYKSccEHAANfNEJGKTJVRT`, 2), (0, rn.trackExperimentStage)((0, Sn.BH)(), 1), y.length > 0 && (0, rn.trackCustomGoal)((0, Sn.BH)(), 1), null !== _ && void 0 !== _ && _.length || (0, rn.trackCustomGoal)(rn.exp `HVLDTLUedRNYYdTUHSYBJNCFHe`, 1));
                            T(!0)
                        },
                        onDestinationChangeDebounced: (e, n, t) => {
                            let {
                                value: i
                            } = e;
                            i && (x.autocomplete.getDestinations(i).then((e => {
                                e && (t({
                                    type: Ye.DESTINATION_OPTIONS_FETCHED,
                                    payload: {
                                        options: e
                                    }
                                }), t({
                                    type: Ye.DESTINATION_SECONDARY_OPTIONS_FETCHED,
                                    payload: {
                                        secondaryOptions: []
                                    }
                                }), L && function(e) {
                                    let {
                                        dispatch: n,
                                        options: t,
                                        state: i,
                                        filtersAutocomplete: a
                                    } = e;
                                    n({
                                        type: Ye.DESTINATION_SECONDARY_OPTIONS_FETCHED,
                                        payload: {
                                            secondaryOptions: []
                                        }
                                    });
                                    const r = t[0];
                                    "city" !== (null === r || void 0 === r ? void 0 : r.destType) || r.webFilters || a.getItems({
                                        query: {
                                            guests: {
                                                totalAdults: i.occupancy.adults.value,
                                                totalChildren: i.occupancy.kids.value,
                                                childrenAges: i.occupancy.kidsAges.values
                                            },
                                            rooms: {
                                                total: i.occupancy.rooms.value
                                            },
                                            location: {
                                                locationCc1: r.cc1,
                                                locationId: Number(r.destId),
                                                locationType: (r.destType || mn.z5.NO_DEST_TYPE).toUpperCase()
                                            }
                                        }
                                    }, {
                                        destName: r.title
                                    }).then((e => {
                                        n({
                                            type: Ye.DESTINATION_SECONDARY_OPTIONS_FETCHED,
                                            payload: {
                                                secondaryOptions: e || []
                                            }
                                        })
                                    }))
                                }({
                                    options: e,
                                    filtersAutocomplete: x.filtersAutocomplete,
                                    dispatch: t,
                                    state: n
                                }), (0, bn.Ue)(e, i), Nn())
                            })), (0, rn.trackExperimentStage)(rn.exp `HVLDTLUedKNKNKHcVdaWMaBQOHT`, 7))
                        },
                        onCalendarOpen: (e, n, t) => {
                            (0, Sn.JI)(), (0, rn.trackCustomGoal)(B, 1), t({
                                type: qe.E.HIDDEN_FIELDS_CHANGED,
                                payload: {
                                    efdco: {
                                        efdco: "1"
                                    }
                                }
                            })
                        },
                        onHomesAndApartmentsChange: () => {
                            (0, rn.trackExperimentStage)(rn.exp `NAFQOPeYWbKdPSKYaFBddQSBLdaRO`, 8)
                        },
                        onTravelPurposeChange: () => {
                            (0, rn.trackGoal)("www_index_travel_for_work_checkbox_click")
                        },
                        onShowOnMapChange: (e, n) => {
                            var t;
                            ! function(e) {
                                let {
                                    checked: n,
                                    destType: t
                                } = e;
                                "index" !== (0, fn.ZP)() || "latlong" !== t || n || (0, rn.trackCustomGoal)(rn.exp `HVQeYFRURURYDEZREWQUQeFIYbFVZYFaO`, 1)
                            }({
                                checked: e.checked,
                                destType: null === (t = n.destination) || void 0 === t || null === (t = t.option) || void 0 === t ? void 0 : t.destType
                            })
                        },
                        onSubmit: (e, n) => {
                            var t, i;
                            let {
                                errors: a,
                                addHiddenFieldsAndSubmitTheFormAfter: r
                            } = e;
                            if (a) return void((0, sn.isFeatureRunning)(sn.feature `cZbRAPPeEfWe`) && (0, un.w7)(un._N.DATA_LAYER, un.Kg.SEARCH_ERROR, {
                                errors: a,
                                state: n
                            }));
                            if ("propertypage" === (0, fn.ZP)() && ((0, rn.trackGoalWithValue)("js_ugc_pp_back_to_sr", 1), function(e, n, t) {
                                    var i, a, r, d, s;
                                    if (void 0 === typeof window) return;
                                    const l = (null === (i = n.date) || void 0 === i || null === (i = i.start) || void 0 === i ? void 0 : i.date) instanceof Date ? Wn()(n.date.start.date).format(Kn.zT) : "",
                                        o = t.date.start.date ? Wn()(t.date.start.date).format(Kn.zT) : "",
                                        u = (null === (a = n.date) || void 0 === a || null === (a = a.end) || void 0 === a ? void 0 : a.date) instanceof Date ? Wn()(n.date.end.date).format(Kn.zT) : "",
                                        c = t.date.end.date ? Wn()(t.date.end.date).format(Kn.zT) : "";
                                    if ((null === (r = n.occupancy) || void 0 === r || null === (r = r.adults) || void 0 === r ? void 0 : r.value) !== t.occupancy.adults.value || (null === (d = n.occupancy) || void 0 === d || null === (d = d.kids) || void 0 === d ? void 0 : d.value) !== t.occupancy.kids.value || (null === (s = n.occupancy) || void 0 === s || null === (s = s.rooms) || void 0 === s ? void 0 : s.value) !== t.occupancy.rooms.value || l !== o || u !== c) {
                                        const n = new URL(e);
                                        (0, Kn.Uj)(n.searchParams), n.searchParams.set("checkin", o), n.searchParams.set("checkout", c), n.searchParams.set("group_adults", String(t.occupancy.adults.value)), n.searchParams.set("req_adults", String(t.occupancy.adults.value)), n.searchParams.set("no_rooms", String(t.occupancy.rooms.value)), n.searchParams.set("group_children", String(t.occupancy.kids.value)), n.searchParams.set("req_children", String(t.occupancy.kids.value)), n.searchParams.delete("age"), n.searchParams.delete("req_age"), t.occupancy.kidsAges && t.occupancy.kidsAges.values.forEach((e => {
                                            n.searchParams.append("age", String(e)), n.searchParams.append("req_age", String(e))
                                        })), setTimeout((() => {
                                            window.location.replace(n.toString())
                                        }), 3e3)
                                    }
                                }(x.pageUrl, x.state, n)), null !== (t = n.flightSearch) && void 0 !== t && t.checked) {
                                var d, l, o, u;
                                const e = Tn({
                                    destinationId: (null === (d = n.destination) || void 0 === d || null === (d = d.option) || void 0 === d ? void 0 : d.destId) || (null === (l = n.destination) || void 0 === l || null === (l = l.options) || void 0 === l ? void 0 : l[0].destId),
                                    destinationType: (null === (o = n.destination) || void 0 === o || null === (o = o.option) || void 0 === o ? void 0 : o.destType) || (null === (u = n.destination) || void 0 === u || null === (u = u.options) || void 0 === u ? void 0 : u[0].destType),
                                    startDate: n.date.start.date,
                                    endDate: n.date.end.date,
                                    numAdults: n.occupancy.adults.value,
                                    childrenAges: n.occupancy.kidsAges.values
                                });
                                window.open(e)
                            }
                            if (null !== (i = n.homesAndApartmentsFirst) && void 0 !== i && i.checked) {
                                (0, an.getRequestContext)().isRobotRequest() || (0, rn.trackExperimentStage)(rn.exp `NAFQOPeYWbKdPSKYaFBddQSBLdaRO`, 9)
                            }
                            const c = (0, bn.K0)(x.pageUrl, n, {
                                addThemeIdFromUrl: "searchresults" === (0, fn.ZP)() && (0, rn.trackExperiment)(rn.exp `HVQeYFRURURYTaKRAQOCYEIFUXT`) > 0 && !E,
                                isSearchEntitiesEnabledForFormAction: I
                            });
                            "searchresults" === (0, fn.ZP)() && x.pageUrl.searchParams.get("theme_id") && !E && (c.submit.retain_theme_id = "1"), s && (c.submit = { ...c.submit,
                                ...s
                            }), r(c), "index" === F && (0, rn.trackGoal)("www_index_search_button_click"), (0, sn.isFeatureRunning)(sn.feature `cZbRAPPeEfWe`) && (0, un.w7)(un._N.DATA_LAYER, un.Kg.SEARCH, {
                                state: n
                            })
                        },
                        onDateChange: () => {
                            dn.eventBus.publish(In.lM.DATE_CHANGED)
                        },
                        onOccupancyChange: e => {
                            "propertypage" === (0, fn.ZP)() && "pets" === e.name && 1 === e.value && (0, rn.trackCustomGoal)(rn.exp `GDIcdSZcHCSCGVfOMTXEUDdeOYC`, 1), (0, _n.X1)(e), (0, Sn.Eb)(e), (0, Sn.F4)(e), dn.eventBus.publish(In.lM.OCCUPANCY_CHANGED)
                        },
                        onDealsUpsorterChange: () => {
                            (0, Sn.qy)()
                        },
                        onOccupancyVisibilityStateChange: e => {
                            (0, _n.bW)(e, x.state), "open" === e && ((0, rn.trackCustomGoal)(B, 2), (0, rn.trackExperimentStage)(rn.exp `GDIcdSZcHCSIURSBVSGfZVFRURURHe`, 3), "index" === F && (0, rn.trackExperimentStage)(rn.exp `GDIcdSZcHCSIURSBVSGfZVFRURURHe`, 1), "searchresults" === F && (0, rn.trackExperimentStage)(rn.exp `GDIcdSZcHCSIURSBVSGfZVFRURURHe`, 2), "propertypage" === F && (0, Hn.O3)())
                        },
                        render: e => {
                            let {
                                dispatch: n,
                                destinationFocus: t,
                                submitForm: i,
                                startDateInputFocus: a
                            } = e;
                            k.current = n, g.current = t, f.current = i, h.current = a
                        }
                    });
                if (c) return M;
                if ((0, bn.rP)()) {
                    var H, V;
                    let e = "";
                    if (null !== (H = (0, an.getRequestContext)().getAffiliate()) && void 0 !== H && H.isCobrand) {
                        const n = (0, rn.trackExperiment)(rn.exp `OJVZAIFZGKTVaVUXFSdEDRNPUePVbSccbHC`);
                        1 === n ? e = $n.containerCobrandedV1 : 2 === n && (e = $n.containerCobrandedV2)
                    } else if (null !== (V = (0, an.getRequestContext)().getAffiliate()) && void 0 !== V && V.isBookingBranded) {
                        1 === (0, rn.trackExperiment)(rn.exp `OJVZAIFZGKTVaVUXFSdEDRNPUAZNdAYKe`) && (e = $n.containerBookingBrandedV1)
                    }
                    const n = (0, rn.trackExperiment)(rn.exp `eWHMcCcCcCSYeJUaXNNJIaKEO`);
                    let t = $n.content;
                    return 1 === n && (t = d()($n.content, $n.contentElevated)), a().createElement("div", {
                        className: d()($n.container, e)
                    }, a().createElement("div", {
                        className: t
                    }, M))
                }
                return M
            }
        },
        "2c140560": (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => i.Z
            });
            var i = t("ac294a45")
        },
        "81b96a0f": (e, n, t) => {
            "use strict";
            t.d(n, {
                Kg: () => un,
                _N: () => tn,
                w7: () => Gn
            });
            const i = "no payload is provided as argument",
                a = "publisher argument is not provided",
                r = "event name argument is not provided",
                d = "arguments missing to attachHandler function",
                s = "window object is not defined",
                l = "window and document objects are not defined",
                o = "window.dataLayer is not defined",
                u = "payload wrong type, should be of type object",
                c = "payload failed validation",
                m = "publisher of unknown type",
                v = "default case in publisher switch reached, check type of publisher used.",
                k = "encountered error while publishing event",
                g = "skip publishing for no-op event",
                p = "encountered error while publishing to datalayer",
                f = "default processor function was selected",
                h = "unable to generate timestamp",
                N = "payload items array is empty or does not exist",
                S = "unable to build property item payload",
                _ = "validation failed: payload property not found",
                y = "validation failed: payload property wrong type",
                b = "no payload to log in logger",
                F = "unable to initialize library",
                E = "encountered error while handling photo click",
                T = "encountered error while submitting add_to_cart event on prop page",
                C = "encountered error while submitting add_to_cart_mobile event on prop page",
                I = "no env object defined",
                A = "destination name is not found in env object",
                O = "unable to read values from search prop payload",
                D = "unable to read rooms_available_and_soldout from env",
                R = "unable to read hotel room price and rate conditions on property page",
                x = "unable to create cache store for ga4 tracker in window.booking",
                P = "no key argument is supplied to store in cache",
                L = "store is not ready and cannot be instantiated",
                w = "b_feature_running_GA4_TRACKING_ON",
                B = "b_feature_running_GA4_TRACKING_LOG_ON";
            let U = !1,
                M = !1;

            function H() {
                return new URLSearchParams("undefined" === typeof window || null === window || "object" !== typeof window.location ? "" : window.location.href)
            }

            function V(e) {
                return H().get(e)
            }

            function G(e) {
                return H().has(e)
            }

            function Y() {
                ! function() {
                    if (M) return U;
                    if (!G(w)) return U;
                    const e = V(w);
                    U = "1" === e
                }(), M = !0
            }
            let W = !!G(B) && "1" === V(B) || !1;
            const K = "GA4_LOGGER: ";

            function $(e) {
                W && ("undefined" !== typeof e ? console.log(`${K}${e}`) : q(b))
            }

            function q(e) {
                W && ("undefined" !== typeof e ? console.warn(`${K}${e}`) : q(b))
            }
            const Z = "_ga cookies are present";
            var j, z, Q, X, J;

            function ee(e) {
                return "undefined" !== typeof e && null !== e
            }! function(e) {
                e.B_COM = "Booking.com"
            }(j || (j = {})),
            function(e) {
                e.STAYS = "stays", e.FLIGHTS = "flights", e.PACKAGES = "packages", e.CAR_RENTALS = "car_rentals", e.ATTRACTIONS = "attractions", e.AIRPORT_TAXI = "airport_taxi"
            }(z || (z = {})),
            function(e) {
                e.STAYS = "Stays", e.FLIGHTS = "Flights", e.PACKAGES = "Packages", e.CAR_RENTALS = "Car rentals", e.ATTRACTIONS = "Attractions", e.AIRPORT_TAXI = "Airport taxi"
            }(Q || (Q = {})),
            function(e) {
                e.FLIGHTS = "/flights/", e.ATTRACTIONS = "/attractions/", e.CARS = "/cars/", e.AIRPORT_TAXI = "/taxi/"
            }(X || (X = {})),
            function(e) {
                e.DESKTOP = "www", e.MDOT = "mdot"
            }(J || (J = {}));
            const ne = void 0,
                te = "",
                ie = "Yes",
                ae = "No";

            function re(e) {
                let n = !1;
                if ("undefined" === typeof e || null === e) return n;
                if ("undefined" === typeof window || "undefined" === typeof window.location) return n;
                return new URL(window.location.href).pathname.indexOf(e) >= 0 && (n = !0), n
            }

            function de(e) {
                let n = te;
                if (!ee(e)) return n;
                if ("undefined" === typeof window || "undefined" === typeof window.location) return n;
                try {
                    let t = new URL(window.location.href).searchParams.get(e);
                    if (null === t) return n;
                    n = t
                } catch (i) {
                    t = i.toString(), W && ("undefined" !== typeof t ? console.error(`${K}${t}`) : q(b))
                }
                var t;
                return n
            }
            var se, le, oe, ue, ce;

            function me(e) {
                return ee(e) ? "string" !== typeof e || 0 === e.length ? `${e}` : e.charAt(0).toUpperCase() + e.slice(1) : te
            }

            function ve(e) {
                return ee(e) ? "string" !== typeof e || 0 === e.length ? `${e}` : e.replaceAll("_", "-") : te
            }

            function ke(e) {
                return ee(e) ? "string" !== typeof e || 0 === e.length ? `${e}` : e.replaceAll(" ", "_") : te
            }

            function ge(e, n, t) {
                if (!ee(e)) return te;
                if ("string" !== typeof e || 0 === e.length) return `${e}`;
                if (-1 === e.indexOf(",")) return e;
                let i = e.split(",");
                return t ? i[i.length - 1] : i[n]
            }

            function pe(e) {
                let n = ne;
                return ee(e) ? "string" === typeof e && e.length > 0 && !Number.isNaN(+e) ? +e : "number" === typeof e ? e : n : n
            }! function(e) {
                e.INDEX = "index", e.SEARCH = "searchresults", e.PROPERTY = "hotel", e.CHECKOUT = "book", e.CONFIRMATION = "confirmation"
            }(se || (se = {})),
            function(e) {
                e[e.YOUR_SELECTION = 1] = "YOUR_SELECTION", e[e.YOUR_DETAILS = 2] = "YOUR_DETAILS", e[e.FINAL_STEP = 3] = "FINAL_STEP"
            }(le || (le = {})),
            function(e) {
                e.ACTION_NAME = "b_action", e.BOOK_STAGE = "b_book_stage", e.SITE_TYPE = "b_site_type", e.AFFILIATION_ID_V1 = "aid", e.AFFILIATION_ID_V2 = "b_aid", e.UFI = "b_ufi", e.UFI_HOTEL = "hotel_ufi", e.UFI_VISITOR = "b_visitor_ufi", e.UFI_FE = "fe_ufi", e.UFI_MAP_DEST_ID = "b_map_dest_id", e.UFI_DEST_ID = "b_dest_id", e.DESTINATION_FULLNAME = "b_destination_fullname", e.CITY_NAME_URL = "b_urlcity", e.CITY_NAME_EN = "city_name_en", e.MAP_NIGHTS = "b_map_nights", e.CHECKIN_CHECKOUT_INTERVAL = "b_checkin_checkout_interval", e.GROUP_ROOMS_WANTED = "b_group_rooms_wanted", e.TOTAL_ROOMS = "b_total_rooms", e.GROUP_ADULTS = "b_group_adults", e.TOTAL_ADULTS = "b_total_adults", e.GROUP_CHILDREN = "b_group_children", e.TOTAL_CHILDREN = "b_total_children", e.SEARCH_CONFIG = "b_search_config", e.OCCUPANCY = "b_occupancy", e.COMPANY_NAME = "b_companyname", e.ACCOMMODATION_TYPE = "b_acc_type", e.ACC_TYPE_ID = "b_accommodationtype_id", e.USER_GENIUS_STATUS = "b_user_genius_status", e.USER_GENIUS_LEVEL_V1 = "b_genius_level", e.USER_GENIUS_LEVEL_V2 = "genius_level", e.USER_IS_GENIUS_V1 = "b_is_genius", e.USER_IS_GENIUS_V2 = "b_reg_user_is_genius", e.USER_IS_GENIUS_V3 = "is_genius", e.USER_IS_GENIUS_V4 = "b_user_is_genius", e.USER_ID = "b_user_id", e.USER_AUTH = "auth_level", e.USER_AUTH_LVL = "b_user_auth_level", e.USER_AUTH_LVL_H = "b_user_auth_level_is_high", e.USER_AUTH_LVL_LH = "b_user_auth_level_is_low_or_high", e.USER_AUTH_LVL_NONE = "b_user_auth_level_is_none", e.USER_IP_LOCATION = "ip_country", e.USER_GUEST_COUNTRY = "b_guest_country", e.COUNTRY_CODE = "b_countrycode", e.CHECKIN_DATE = "b_checkin_date", e.CHECKOUT_DATE = "b_checkout_date", e.TRAVELLING_FOR_WORK = "fe_pers_purpose", e.HOTEL_CLASS = "b_hotel_class", e.HOTEL_ID = "b_hotel_id", e.HOTEL_NAME = "b_hotel_name", e.ROOMS_AVAILABLE_AND_SOLDOUT = "b_rooms_available_and_soldout", e.ALT_PAYMENT_USER_AMOUNT = "b_alt_payment_user_amount", e.RESERVATION_BOOKNUMBER = "fe_booknumber", e.C360_RES_DETAIL_V1 = "b_c360_reservation_detail", e.C360_RES_DETAIL_V2 = "fe_c360_reservation_detail", e.LANG_BROWSER = "browser_lang", e.LANG_SELECTED = "b_selected_language", e.LANG_PLAIN = "b_lang", e.LANG_LOCALE = "b_locale", e.B_CRUMBS_CTX = "b_bcrumbs_context", e.UTAG_NEWSLETTER_SUBSCRIBED = "is_subscribed_to_newsletter"
            }(oe || (oe = {})),
            function(e) {
                e.BUSINESS = "business", e.LEISURE = "leisure"
            }(ue || (ue = {})),
            function(e) {
                e.TRAVEL_PURPOSE = "sb_travel_purpose", e.CHECKOUT_INTERESTED_IN_TAXI = "interested_taxi", e.CHECKOUT_INTERESTED_IN_CAR = "interested_car_rentals"
            }(ce || (ce = {}));
            const fe = "booking",
                he = "env",
                Ne = "utag_data",
                Se = "ga4_lib_init",
                _e = "ga4_lib_handlers";

            function ye() {
                return "undefined" === typeof window ? (q(s), !1) : "undefined" === typeof window[fe] || null === window[fe] ? (q(I), !1) : "undefined" !== typeof window[fe][he] && null !== window[fe][he] || (q("no env object defined"), !1)
            }

            function be(e) {
                if (!ee(e)) return "";
                if (!ye()) return q("window.booking is not ready or does not exit"), "";
                const n = window[fe][he];
                return ee(n[e]) ? n[e] : (q("property was not found in env object " + e), "")
            }

            function Fe(e) {
                return "undefined" !== typeof window && null !== window && "undefined" !== typeof window[Ne] && null !== window[Ne] && ee(e) ? ee(window[Ne][e]) ? window[Ne][e] : ne : ""
            }

            function Ee() {
                return be(oe.ACTION_NAME)
            }

            function Te() {
                const e = ne,
                    n = be(oe.AFFILIATION_ID_V2),
                    t = be(oe.AFFILIATION_ID_V1);
                return ee(n) && n !== te ? n : ee(t) && t !== te ? t : (q("affiliate id value is not found in env object"), e)
            }

            function Ce() {
                let e = ne;
                const n = be(oe.UFI),
                    t = be(oe.UFI_DEST_ID);
                return ee(n) && n !== te ? n : ee(t) && t !== te ? t : (q("ufi id value is not found in env object"), e)
            }

            function Ie() {
                const e = be(oe.ACC_TYPE_ID);
                if (e !== te) return e;
                const n = be(oe.ACCOMMODATION_TYPE);
                return n !== te ? n : (q("accommodation type id is not found in env object"), te)
            }

            function Ae() {
                let e = ne,
                    n = te;
                const t = be(oe.USER_GENIUS_STATUS);
                return ee(t) && t !== te && (n = t.b_user_id, ee(t.b_user_id)) ? `${n}` : (q("user_id value is not found in env object"), e)
            }

            function Oe() {
                let e, n = ne;
                const t = be(oe.USER_GENIUS_STATUS);
                return ee(t) && t !== te && (e = t[oe.USER_IS_GENIUS_V1], ee(e) && 1 === e) ? t[oe.USER_GENIUS_LEVEL_V1] : (q("genius level is not found in env object"), n)
            }

            function De() {
                const e = be(oe.ACTION_NAME);
                return e === te ? ne : e
            }

            function Re() {
                const e = be(oe.USER_AUTH),
                    n = be(oe.USER_AUTH_LVL_NONE),
                    t = be(oe.USER_AUTH_LVL_H),
                    i = be(oe.USER_AUTH_LVL_LH);
                return "0" == e || 1 == n ? 0 : "1" == e || "2" == e || 1 == t || 1 == i ? 1 : (q("user logged in data is not found in env object"), 0)
            }

            function xe() {
                const e = [oe.LANG_SELECTED, oe.LANG_PLAIN, oe.LANG_LOCALE, oe.LANG_BROWSER];
                let n = ne;
                for (let t = 0; t < e.length; t++) {
                    let i = be(e[t]);
                    if (ee(i) && i !== te) {
                        n = i;
                        break
                    }
                }
                return n === ne && q("language was not found in env object"), n
            }

            function Pe() {
                const e = [oe.USER_IP_LOCATION, oe.USER_GUEST_COUNTRY];
                let n = ne;
                for (let t = 0; t < e.length; t++) {
                    let i = be(e[t]);
                    if (ee(i) && i !== te) {
                        n = i;
                        break
                    }
                }
                return n === ne && q("user country is not found in env object"), n
            }

            function Le() {
                const e = Fe(oe.UTAG_NEWSLETTER_SUBSCRIBED);
                return "1" === e || "true" === e || e ? 1 : 0
            }

            function we() {
                return be(oe.SITE_TYPE)
            }

            function Be() {
                let e = be(oe.ACTION_NAME);
                return "index" === e || "searchresults" === e ? Q.STAYS : "cars" === e ? Q.CAR_RENTALS : "taxi" === e ? Q.AIRPORT_TAXI : re(X.FLIGHTS) ? Q.FLIGHTS : re(X.ATTRACTIONS) ? Q.ATTRACTIONS : Q.STAYS
            }

            function Ue() {
                let e = ne,
                    n = be(oe.DESTINATION_FULLNAME);
                return n !== te ? e = n : q(A), e
            }

            function Me() {
                let e = be(oe.HOTEL_NAME);
                return e === te ? (q(A), ne) : e
            }

            function He() {
                let e = be(oe.GROUP_ADULTS);
                if (e !== te) return +e;
                let n = be(oe.OCCUPANCY);
                return ee(n) && "object" === typeof n ? n.adults : (q("adults number not found in env object"), ne)
            }

            function Ve() {
                let e = be(oe.GROUP_CHILDREN);
                if (e !== te) return +e;
                let n = be(oe.OCCUPANCY);
                return ee(n) && "object" === typeof n ? n.children : (q("children number not found in env object"), ne)
            }

            function Ge() {
                const e = be(oe.B_CRUMBS_CTX);
                return "string" === typeof e ? {} : ee(e) ? e : {}
            }

            function Ye() {
                const e = [oe.CITY_NAME_URL, oe.CITY_NAME_EN, oe.DESTINATION_FULLNAME];
                let n = te;
                for (let t = 0; t < e.length; t++) {
                    let i = be(e[t]);
                    if (ee(i) && i !== te) {
                        n = i;
                        break
                    }
                }
                return n === te && q("city name not found in env object"), n
            }

            function We() {
                const e = be(oe.COUNTRY_CODE);
                return e === te && q("dest country is not found in env object"), e
            }

            function Ke() {
                const e = be(oe.CHECKIN_DATE);
                return e === te && q("checkin date not found in env object"), e
            }

            function $e() {
                const e = be(oe.CHECKOUT_DATE);
                return e === te && q("checkout date not found in env object"), e
            }

            function qe() {
                const e = [oe.CHECKIN_CHECKOUT_INTERVAL, oe.MAP_NIGHTS];
                let n = ne;
                const t = be(e[0]);
                return t !== te && (n = t), n === ne && q("number of nights not found in env object"), n
            }

            function Ze() {
                const e = [oe.SEARCH_CONFIG, oe.GROUP_ROOMS_WANTED];
                let n = ne,
                    t = be(e[0]),
                    i = be(e[1]);
                return ee(t) && "object" === typeof t ? t.b_nr_rooms_needed : ee(i) && i !== te ? i : (q("rooms number not found in env object"), n)
            }

            function je() {
                const e = de(ce.TRAVEL_PURPOSE);
                return (e !== te ? e : function() {
                    const e = ne,
                        n = be(oe.TRAVELLING_FOR_WORK);
                    return ee(n) && n !== te ? n : (q("travel purpose not found in env object"), e)
                }()) === ue.BUSINESS ? ie : ae
            }

            function ze() {
                const e = be(oe.HOTEL_CLASS);
                return ee(e) && e !== te ? e : (q("unable to read hotel class/stars rating from env"), ne)
            }

            function Qe() {
                const e = be(oe.HOTEL_ID);
                return ee(e) && e !== te || q("unable to read hotel id from env"), e
            }

            function Xe() {
                let e, n = {
                    rate_conditions: [],
                    price: ne
                };
                if (e = be(oe.ROOMS_AVAILABLE_AND_SOLDOUT), !ee(e) || e === te) return q(D), n;
                try {
                    if (e.length && 0 === e.length) return q(D), n;
                    let t, i = e[0];
                    null !== i.b_has_room_inventory && i.b_has_room_inventory > 0 && (t = i.b_blocks && i.b_blocks.length > 0 ? i.b_blocks[0] : null, null !== t && (n.price = t.b_raw_price, n.rate_conditions = [], t.b_cancellation_type && n.rate_conditions.push(ve(`${t.b_cancellation_type}`)), t.b_mealplan_included_name && n.rate_conditions.push(ve(`${t.b_mealplan_included_name}`))))
                } catch (t) {
                    q(R)
                }
                return n
            }

            function Je(e) {
                let n, t = te;
                if (!ee(e) || e === te) return t;
                if (n = be(oe.ROOMS_AVAILABLE_AND_SOLDOUT), !ee(n) || n === te) return q(D), t;
                try {
                    if (n.length && 0 === n.length) return q(D), t;
                    let i = e.split(".").map((e => e - 1)),
                        a = n[i[0]].b_blocks[i[1]];
                    ee(a) && (t = a.b_raw_price)
                } catch (i) {
                    q(R)
                }
                return t
            }

            function en() {
                let e = be(oe.ALT_PAYMENT_USER_AMOUNT);
                return e === te && (q("price was not found in env on checkout page"), e = ne), e
            }

            function nn() {
                let e = be(oe.RESERVATION_BOOKNUMBER);
                return e === te && q("reservation id not found in env object"), e
            }
            var tn;
            ! function(e) {
                e.DATA_LAYER = "data_layer"
            }(tn || (tn = {}));
            const an = [
                ["event", "string"],
                ["tsmp", "string"]
            ];
            const rn = "ga4Cache";

            function dn() {
                if ("undefined" === typeof window) return q(s), !1;
                if ("undefined" === typeof window.booking) return q(I), !1;
                if ("undefined" === typeof window.booking[rn]) {
                    if (!("undefined" === typeof window ? (q(s), !1) : "undefined" === typeof window.booking ? (q(I), !1) : ("undefined" === typeof window.booking[rn] && (window.booking[rn] = {}), !0))) return q(x), !1
                }
                return !0
            }

            function sn(e, n) {
                if ("undefined" === typeof e) return q(P), !1;
                if ("undefined" === typeof n) return q(i), !1;
                if (!dn()) return q(L), !1;
                try {
                    window.booking[rn][e] = n
                } catch (t) {
                    return q(`${t}`), !1
                }
                return !0
            }

            function ln(e, n) {
                if ("undefined" === typeof e) return q(P), !1;
                if ("undefined" === typeof n) return q(i), !1;
                if (!dn()) return q(L), !1;
                try {
                    "undefined" !== typeof window.booking[rn][e] && null !== window.booking[rn][e] || (window.booking[rn][e] = n)
                } catch (t) {
                    return q(`${t}`), !1
                }
                return !0
            }

            function on(e) {
                return dn() ? "undefined" === typeof e || null === e ? (q("no key argument is supplied to read from cache"), {}) : window.booking[rn][e] : (q(L), {})
            }
            var un;
            ! function(e) {
                e.DEFAULT_EVENT_NAME = "default_event_name", e.FILTERS_APPLIED = "filters_applied", e.FILTERS_APPLIED_MOBILE = "filters_applied_mobile", e.SORT_APPLIED = "sort_applied", e.SELECT_ITEM = "select_item", e.SELECT_ITEM_MOBILE = "select_item_mobile", e.VIEW_ITEM_LIST = "view_item_list", e.VIEW_ITEM_LIST_MOBILE = "view_item_list_mobile", e.PAGE_VIEW = "page_view", e.PAGE_VIEW_INDEX = "page_view_index", e.PAGE_VIEW_SEARCH = "page_view_search", e.PAGE_VIEW_SEARCH_MOBILE = "page_view_search_mobile", e.PAGE_VIEW_PROPERTY = "page_view_property", e.PAGE_VIEW_CHECKOUT = "page_view_checkout", e.PAGE_VIEW_CONFIRMATION = "page_view_confirmation", e.NAVIGATION_BAR_INTERACTION = "navigation_bar_interaction", e.SEARCH = "search", e.SEARCH_MOBILE = "search_mobile", e.SEARCH_ERROR = "search_error", e.MAP_OPEN = "map_open", e.MAP_OPEN_MOBILE = "map_open_mobile", e.MAP_CLOSE = "map_close", e.MAP_CLOSE_MOBILE = "map_close_mobile", e.VIEW_ITEM = "view_item", e.PHOTO_CLICK = "photo_click", e.REVIEWS_CLICK = "reviews_click", e.WISHLIST_SAVE = "wishlist_save", e.SOCIAL_SHARE = "social_share", e.SEARCH_CHANGE_DETAILS = "search_change_details", e.ADD_TO_CART = "add_to_cart", e.ADD_TO_CART_MOBILE = "add_to_cart_mobile", e.BEGIN_CHECKOUT = "begin_checkout", e.CHANGE_SELECTION_CHECKOUT = "change_selection_checkout_your_details", e.ADD_PAYMENT_INFO = "add_payment_info", e.PURCHASE = "ga4_purchase", e.CANCELLATION = "cancellation", e.NEWSLETTER_SIGN_UP = "newsletter_sign_up", e.APP_DOWNLOAD = "app_download", e.OPEN_APP = "open_app", e.PAGE_VIEW_CHECKOUT_PROPERTY_CARD = "internal_page_view_checkout_prop_card", e.NO_OP = "no_op_event", e.TEST_EVENT = "test_event"
            }(un || (un = {}));
            const cn = Object.values(un);

            function mn(e) {
                if ("undefined" === typeof window) return void q(s);
                if ("undefined" === typeof window.dataLayer) return void q(o);
                const n = function(e) {
                    let n = !0;
                    if ("undefined" === typeof e || null === e) return q(i), !1;
                    if ("object" !== typeof e) return q(u), !1;
                    for (let t = 0; t < an.length; t++) {
                        let i = an[t][0],
                            a = an[t][1];
                        if (!e.hasOwnProperty(i)) {
                            n = !1, q(_);
                            break
                        }
                        if (typeof e[i] !== a) {
                            n = !1, q(y);
                            break
                        }
                    }
                    return n
                }(e);
                if (n) try {
                    window.dataLayer.push(e), e.event && cn.includes(e.event) && sn(e.event, e)
                } catch (t) {
                    q(t.toString()), q(p)
                } else q(c)
            }

            function vn(e, n) {
                if ("undefined" !== typeof e && null !== e)
                    if ("undefined" !== typeof n)
                        if (n.event !== un.NO_OP)
                            if (e === tn.DATA_LAYER) mn(n);
                            else q(v);
                else $(g);
                else q(i);
                else q(m)
            }

            function kn(e) {
                return "string" === typeof e || "number" === typeof e ? e < 10 ? `0${e}` : `${e}` : ""
            }

            function gn() {
                try {
                    return `${Date.now()}`
                } catch (e) {
                    q(h)
                }
                return "0"
            }

            function pn(e, n) {
                let t, i, a = ne;
                if ("undefined" === typeof e || null === e) return a;
                if ("undefined" === typeof n || null === n) return a;
                try {
                    t = "string" === typeof e ? new Date(e) : e, i = "string" === typeof n ? new Date(n) : n, a = Math.round((i - t) / 864e5)
                } catch (r) {
                    q(r.toString()), q("unable to calculate difference between two dates")
                }
                return a
            }

            function fn(e) {
                let n, t, i = ne;
                return "undefined" === typeof e || null === e ? (q("unable to create partition date from date string"), i) : "string" === typeof e ? e.split("T")[0] : "object" === typeof e && e instanceof Date ? (n = kn(e.getMonth() + 1), t = kn(e.getDate()), `${e.getFullYear()}-${n}-${t}`) : i
            }
            var hn, Nn, Sn;

            function _n(e) {
                if (!ee(e)) return te;
                switch (e) {
                    case Sn.HOTEL:
                        return "Hotel";
                    case Sn.BOOKING_HOME:
                        return "Property";
                    default:
                        return `${e}`
                }
            }! function(e) {
                e.ACCOMMODATIONS = "accommodations", e.FLIGHTS = "flights", e.PACKAGES = "packages", e.CARS = "cars", e.ATTRACTIONS = "attractions", e.AIRPORT_TAXIS = "airport_taxis"
            }(hn || (hn = {})),
            function(e) {
                e.ACCOMMODATIONS = "Accommodations", e.FLIGHTS = "Flights", e.PACKAGES = "Packages", e.CARS = "Car rentals", e.ATTRACTIONS = "Attractions", e.AIRPORT_TAXIS = "Airport taxis"
            }(Nn || (Nn = {})),
            function(e) {
                e.HOTEL = "hotel", e.BOOKING_HOME = "booking home"
            }(Sn || (Sn = {}));
            const yn = {
                    ad: "Andorra",
                    ae: "United Arab Emirates",
                    af: "Afghanistan",
                    ag: "Antigua and Barbuda",
                    ai: "Anguilla",
                    al: "Albania",
                    am: "Armenia",
                    ao: "Angola",
                    aq: "Antarctica",
                    ar: "Argentina",
                    as: "American Samoa",
                    at: "Austria",
                    au: "Australia",
                    aw: "Aruba",
                    ax: "\xc5land",
                    az: "Azerbaijan",
                    ba: "Bosnia and Herzegovina",
                    bb: "Barbados",
                    bd: "Bangladesh",
                    be: "Belgium",
                    bf: "Burkina Faso",
                    bg: "Bulgaria",
                    bh: "Bahrain",
                    bi: "Burundi",
                    bj: "Benin",
                    bl: "Saint Barth\xe9lemy",
                    bm: "Bermuda",
                    bn: "Brunei",
                    bo: "Bolivia",
                    bq: "Bonaire",
                    br: "Brazil",
                    bs: "Bahamas",
                    bt: "Bhutan",
                    bv: "Bouvet Island",
                    bw: "Botswana",
                    by: "Belarus",
                    bz: "Belize",
                    ca: "Canada",
                    cc: "Cocos [Keeling] Islands",
                    cd: "Democratic Republic of the Congo",
                    cf: "Central African Republic",
                    cg: "Republic of the Congo",
                    ch: "Switzerland",
                    ci: "Ivory Coast",
                    ck: "Cook Islands",
                    cl: "Chile",
                    cm: "Cameroon",
                    cn: "China",
                    co: "Colombia",
                    cr: "Costa Rica",
                    cu: "Cuba",
                    cv: "Cape Verde",
                    cw: "Curacao",
                    cx: "Christmas Island",
                    cy: "Cyprus",
                    cz: "Czech Republic",
                    de: "Germany",
                    dj: "Djibouti",
                    dk: "Denmark",
                    dm: "Dominica",
                    do: "Dominican Republic",
                    dz: "Algeria",
                    ec: "Ecuador",
                    ee: "Estonia",
                    eg: "Egypt",
                    eh: "Western Sahara",
                    er: "Eritrea",
                    es: "Spain",
                    et: "Ethiopia",
                    fi: "Finland",
                    fj: "Fiji",
                    fk: "Falkland Islands",
                    fm: "Micronesia",
                    fo: "Faroe Islands",
                    fr: "France",
                    ga: "Gabon",
                    gb: "United Kingdom",
                    gd: "Grenada",
                    ge: "Georgia",
                    gf: "French Guiana",
                    gg: "Guernsey",
                    gh: "Ghana",
                    gi: "Gibraltar",
                    gl: "Greenland",
                    gm: "Gambia",
                    gn: "Guinea",
                    gp: "Guadeloupe",
                    gq: "Equatorial Guinea",
                    gr: "Greece",
                    gs: "South Georgia and the South Sandwich Islands",
                    gt: "Guatemala",
                    gu: "Guam",
                    gw: "Guinea-Bissau",
                    gy: "Guyana",
                    hk: "Hong Kong",
                    hm: "Heard Island and McDonald Islands",
                    hn: "Honduras",
                    hr: "Croatia",
                    ht: "Haiti",
                    hu: "Hungary",
                    id: "Indonesia",
                    ie: "Ireland",
                    il: "Israel",
                    im: "Isle of Man",
                    in: "India",
                    io: "British Indian Ocean Territory",
                    iq: "Iraq",
                    ir: "Iran",
                    is: "Iceland",
                    it: "Italy",
                    je: "Jersey",
                    jm: "Jamaica",
                    jo: "Jordan",
                    jp: "Japan",
                    ke: "Kenya",
                    kg: "Kyrgyzstan",
                    kh: "Cambodia",
                    ki: "Kiribati",
                    km: "Comoros",
                    kn: "Saint Kitts and Nevis",
                    kp: "North Korea",
                    kr: "South Korea",
                    kw: "Kuwait",
                    ky: "Cayman Islands",
                    kz: "Kazakhstan",
                    la: "Laos",
                    lb: "Lebanon",
                    lc: "Saint Lucia",
                    li: "Liechtenstein",
                    lk: "Sri Lanka",
                    lr: "Liberia",
                    ls: "Lesotho",
                    lt: "Lithuania",
                    lu: "Luxembourg",
                    lv: "Latvia",
                    ly: "Libya",
                    ma: "Morocco",
                    mc: "Monaco",
                    md: "Moldova",
                    me: "Montenegro",
                    mf: "Saint Martin",
                    mg: "Madagascar",
                    mh: "Marshall Islands",
                    mk: "North Macedonia",
                    ml: "Mali",
                    mm: "Myanmar [Burma]",
                    mn: "Mongolia",
                    mo: "Macao",
                    mp: "Northern Mariana Islands",
                    mq: "Martinique",
                    mr: "Mauritania",
                    ms: "Montserrat",
                    mt: "Malta",
                    mu: "Mauritius",
                    mv: "Maldives",
                    mw: "Malawi",
                    mx: "Mexico",
                    my: "Malaysia",
                    mz: "Mozambique",
                    na: "Namibia",
                    nc: "New Caledonia",
                    ne: "Niger",
                    nf: "Norfolk Island",
                    ng: "Nigeria",
                    ni: "Nicaragua",
                    nl: "Netherlands",
                    no: "Norway",
                    np: "Nepal",
                    nr: "Nauru",
                    nu: "Niue",
                    nz: "New Zealand",
                    om: "Oman",
                    pa: "Panama",
                    pe: "Peru",
                    pf: "French Polynesia",
                    pg: "Papua New Guinea",
                    ph: "Philippines",
                    pk: "Pakistan",
                    pl: "Poland",
                    pm: "Saint Pierre and Miquelon",
                    pn: "Pitcairn Islands",
                    pr: "Puerto Rico",
                    ps: "Palestine",
                    pt: "Portugal",
                    pw: "Palau",
                    py: "Paraguay",
                    qa: "Qatar",
                    re: "R\xe9union",
                    ro: "Romania",
                    rs: "Serbia",
                    ru: "Russia",
                    rw: "Rwanda",
                    sa: "Saudi Arabia",
                    sb: "Solomon Islands",
                    sc: "Seychelles",
                    sd: "Sudan",
                    se: "Sweden",
                    sg: "Singapore",
                    sh: "Saint Helena",
                    si: "Slovenia",
                    sj: "Svalbard and Jan Mayen",
                    sk: "Slovakia",
                    sl: "Sierra Leone",
                    sm: "San Marino",
                    sn: "Senegal",
                    so: "Somalia",
                    sr: "Suriname",
                    ss: "South Sudan",
                    st: "S\xe3o Tom\xe9 and Pr\xedncipe",
                    sv: "El Salvador",
                    sx: "Sint Maarten",
                    sy: "Syria",
                    sz: "Swaziland",
                    tc: "Turks and Caicos Islands",
                    td: "Chad",
                    tf: "French Southern Territories",
                    tg: "Togo",
                    th: "Thailand",
                    tj: "Tajikistan",
                    tk: "Tokelau",
                    tl: "East Timor",
                    tm: "Turkmenistan",
                    tn: "Tunisia",
                    to: "Tonga",
                    tr: "Turkey",
                    tt: "Trinidad and Tobago",
                    tv: "Tuvalu",
                    tw: "Taiwan",
                    tz: "Tanzania",
                    ua: "Ukraine",
                    ug: "Uganda",
                    um: "U.S. Minor Outlying Islands",
                    us: "United States",
                    uy: "Uruguay",
                    uz: "Uzbekistan",
                    va: "Vatican City",
                    vc: "Saint Vincent and the Grenadines",
                    ve: "Venezuela",
                    vg: "British Virgin Islands",
                    vi: "U.S. Virgin Islands",
                    vn: "Vietnam",
                    vu: "Vanuatu",
                    wf: "Wallis and Futuna",
                    ws: "Samoa",
                    xk: "Kosovo",
                    ye: "Yemen",
                    yt: "Mayotte",
                    za: "South Africa",
                    zm: "Zambia",
                    zw: "Zimbabwe"
                },
                bn = Object.keys(yn);

            function Fn(e) {
                return ee(e) ? "string" === typeof e && 0 === e.length ? ne : "string" === typeof e && "undefined" !== typeof yn[e.toLowerCase()] ? yn[e.toLowerCase()] : e : ne
            }

            function En(e, n, t, i, a) {
                const {
                    id: r,
                    header: d,
                    countryCode: s,
                    accommodationTypeId: l,
                    rateInformation: o
                } = e;
                let u = ne,
                    c = ne,
                    m = ne,
                    v = ne;
                try {
                    u = d && d.propertyName ? d.propertyName : u, c = "undefined" !== typeof t ? t : c, d && d.rating && (m = d.rating), o && "undefined" !== typeof o.priceDisplayInfo && null !== o.priceDisplayInfo && (v = o.priceDisplayInfo.priceBreakdown.headlinePrice.userAmount.rawAmount, v = "number" === typeof v ? v.toFixed(2) : v)
                } catch (k) {
                    q(k.toString()), q(O)
                }
                return {
                    item_id: r,
                    item_name: u,
                    affiliation: a,
                    index: n,
                    item_brand: l || ne,
                    item_category: Nn.ACCOMMODATIONS,
                    item_category2: s,
                    item_category3: i,
                    item_category4: `${c}`,
                    item_category5: _n(Sn.HOTEL),
                    item_list_name: i,
                    item_variant: m,
                    price: pe(v),
                    quantity: 1
                }
            }

            function Tn() {
                return {
                    event: un.PAGE_VIEW,
                    tsmp: gn(),
                    ai: void 0,
                    action: void 0,
                    ui: void 0,
                    glev: void 0,
                    logged_in: void 0,
                    language: void 0,
                    user_location: void 0,
                    is_subscribed_to_newsletter: void 0,
                    site_section: void 0,
                    dest_name: void 0,
                    adults: void 0,
                    book_window: void 0,
                    children: void 0,
                    city_name: void 0,
                    country_name: void 0,
                    date_in: void 0,
                    date_out: void 0,
                    dest_cc: void 0,
                    dest_ufi: void 0,
                    nights: void 0,
                    rooms: void 0,
                    travelling_for_work: void 0,
                    total_search_pages: void 0,
                    percent_places_unavailable: void 0,
                    search_page_number: void 0,
                    rate_condition: void 0,
                    add_shuttle: void 0,
                    rent_car: void 0,
                    payment_option: void 0,
                    payment_method: void 0
                }
            }

            function Cn(e) {
                let n = {};
                switch (e) {
                    case un.SORT_APPLIED:
                        const e = on(un.SORT_APPLIED);
                        return n = e && e.sort_option ? e.sort_option : ne, n;
                    case un.FILTERS_APPLIED:
                        const t = on(un.FILTERS_APPLIED);
                        n = t ? t.filters : {};
                        break;
                    case un.PAGE_VIEW_INDEX:
                        n = on(un.PAGE_VIEW_INDEX);
                        break;
                    case un.VIEW_ITEM:
                        n = on(un.VIEW_ITEM);
                        break;
                    default:
                        return q("default switch case was triggered in getEventFromStore func"), n
                }
                return "undefined" === typeof n && (n = {}), n
            }

            function In(e) {
                const {
                    filtersApplied: n,
                    filtersByField: t
                } = e;
                if (!ee(n) || !ee(t)) return {
                    event: un.NO_OP,
                    tsmp: gn()
                };
                let i;
                return "object" === typeof t && Object.keys(t).length > 0 ? (i = {}, Object.keys(n).map((e => {
                    let n = e.split("=")[0];
                    if (!t[n]) return;
                    let a = "",
                        r = `filter_${t[n].title}`;
                    if (r = ke(r.toLowerCase()), t[n] && t[n].items) {
                        let i = t[n].items.find((n => n.value === e));
                        i && (a = i.label.toLowerCase())
                    }
                    if (i[r]) {
                        let e = i[r];
                        i[r] = e.concat(",", a)
                    } else i[r] = a
                }))) : q("filter categories object not present in payload"), {
                    event: un.FILTERS_APPLIED,
                    tsmp: gn(),
                    filters: i || n,
                    sort_option: Cn(un.SORT_APPLIED)
                }
            }

            function An(e) {
                const {
                    state: n
                } = e;
                if (!ee(n)) return {
                    event: un.SEARCH,
                    tsmp: gn()
                };
                const {
                    destination: t,
                    occupancy: i,
                    date: a,
                    travelPurpose: r
                } = n;
                let d = ne,
                    s = ne,
                    l = ne,
                    o = ne,
                    u = ne,
                    c = ne,
                    m = ne,
                    v = ne,
                    k = ne,
                    g = ne,
                    p = ne,
                    f = te,
                    h = ne,
                    N = ne,
                    S = te;
                a && (d = ee(a.start) ? a.start.date : d, s = ee(a.end) ? a.end.date : s), i && (u = i.adults ? i.adults.value : u, c = i.kids ? i.kids.value : c, m = i.rooms ? i.rooms.value : m), v = r && r.checked ? ie : ae, ee(t) && (p = ee(t.option) ? t.option.destId : p, f = ge(t.value, 0), S = ge(t.value, 0, !0)), p || (p = Ce()), l = pn(d, s), o = pn(new Date, d), k = fn(d), g = fn(s), N = We(), N === te ? S !== f && (N = function(e) {
                    if (!ee(e)) return ne;
                    if ("string" !== typeof e || 0 === e.length) return ne;
                    let n = bn.find((n => yn[n] === e));
                    return n || ne
                }(S), N && (h = S)) : h = Fn(N);
                const _ = f && f === te ? void 0 : f.trim();
                return {
                    event: un.SEARCH,
                    tsmp: gn(),
                    search_term: _,
                    adults: u,
                    book_window: o < 0 ? 0 : o,
                    children: c,
                    city_name: _,
                    country_name: h,
                    date_in: k,
                    date_out: g,
                    dest_cc: N,
                    dest_ufi: p ? `${p}` : ne,
                    nights: l,
                    rooms: m,
                    travelling_for_work: v
                }
            }

            function On() {
                return "undefined" !== typeof window && null !== window
            }

            function Dn() {
                return "undefined" !== typeof document && null !== document
            }
            const Rn = "[data-city-tax-value]",
                xn = "[data-vat-value]";

            function Pn() {
                let e = 0;
                try {
                    [Rn, xn].map((n => {
                        const t = document.querySelector(n);
                        if (ee(t) && ee(t.dataset)) {
                            let i = n === Rn ? "cityTaxValue" : "vatValue";
                            if (ee(t.dataset[i])) {
                                let n = Number(t.dataset[i]);
                                n > 0 && (e += n)
                            }
                        }
                    }))
                } catch (n) {
                    q(n.toString())
                }
                return `${e}`
            }
            var Ln;

            function wn() {
                return {
                    event: un.MAP_OPEN,
                    tsmp: gn(),
                    display_method: "map"
                }
            }

            function Bn() {
                return {
                    event: un.MAP_CLOSE,
                    tsmp: gn(),
                    display_method: "map"
                }
            }! function(e) {
                e.PAYMENT_BY_BOOKING = "Payment by Booking"
            }(Ln || (Ln = {}));
            const Un = {
                [un.DEFAULT_EVENT_NAME]: Mn,
                [un.FILTERS_APPLIED]: In,
                [un.FILTERS_APPLIED_MOBILE]: function(e) {
                    const {
                        filtersApplied: n,
                        filtersByField: t
                    } = e;
                    if (!ee(n) || !ee(t)) return {
                        event: un.NO_OP,
                        tsmp: gn()
                    };
                    let i = {};
                    return Array.isArray(t) && t.map((e => {
                        i[e.field] = e
                    })), In({
                        filtersApplied: n,
                        filtersByField: i
                    })
                },
                [un.SORT_APPLIED]: function(e) {
                    return {
                        event: un.SORT_APPLIED,
                        sort_option: e || ne,
                        tsmp: gn()
                    }
                },
                [un.SELECT_ITEM]: function(e) {
                    let n = {};
                    try {
                        n = function(e) {
                            const {
                                item: n,
                                index: t
                            } = e;
                            let i = -1,
                                a = -1,
                                r = te,
                                d = ne,
                                s = te,
                                l = te,
                                o = te,
                                u = te,
                                c = te,
                                m = ne;
                            try {
                                if (i = ee(t) ? t : i, ee(n)) {
                                    const {
                                        displayName: e,
                                        basicPropertyData: t,
                                        location: i,
                                        priceDisplayInfoIrene: v
                                    } = n;
                                    ee(e) && (r = e.text), ee(t) && (a = t.id, d = t.accommodationTypeId, o = `${t.ufi}`, ee(t.location) && (s = t.location.countryCode, l = t.location.city), ee(t.starRating) && (c = `${t.starRating.value}`)), ee(i) && (u = i.displayLocation), ee(v) && (m = v.displayPrice.amountPerStay.amountUnformatted)
                                } else q("no item present in search result incoming payload")
                            } catch (v) {
                                q(v.toString()), q(O)
                            }
                            return {
                                item_id: a,
                                item_name: r,
                                affiliation: Te(),
                                index: i,
                                item_brand: d,
                                item_category: Nn.ACCOMMODATIONS,
                                item_category2: Fn(s),
                                item_category3: l,
                                item_category4: o,
                                item_category5: _n(Sn.HOTEL),
                                item_list_name: u,
                                item_variant: pe(c),
                                price: m,
                                quantity: 1
                            }
                        }(e)
                    } catch (t) {
                        q(t.toString()), q(S)
                    }
                    return {
                        event: un.SELECT_ITEM,
                        tsmp: gn(),
                        _clear: !0,
                        items: [n],
                        sort_option: Cn(un.SORT_APPLIED),
                        filters: Cn(un.FILTERS_APPLIED)
                    }
                },
                [un.SELECT_ITEM_MOBILE]: function(e) {
                    const {
                        index: n,
                        card: t,
                        searchMeta: i
                    } = e;
                    let a = ne,
                        r = Te(),
                        d = ne,
                        s = {},
                        l = ne;
                    try {
                        i && (a = i.searchMeta.destId || Ce(), d = i.destinationFullName, l = i.sorters.find((e => e.isSelected))), t && (s = En(t, n, a, d, r))
                    } catch (o) {
                        q(o.toString()), q(S)
                    }
                    return {
                        event: un.SELECT_ITEM,
                        tsmp: gn(),
                        _clear: !0,
                        items: [s],
                        sort_option: l ? l.value : ne,
                        filters: Cn(un.FILTERS_APPLIED)
                    }
                },
                [un.VIEW_ITEM_LIST]: function(e) {
                    var n;
                    const {
                        items: t,
                        sorters: i,
                        pagination: a,
                        searchMeta: r,
                        destinationFullName: d,
                        status: s
                    } = e;
                    if (ee(s) && "complete" !== s) return {
                        event: un.NO_OP,
                        tsmp: gn()
                    };
                    let l = [],
                        o = Ce(),
                        u = Te(),
                        c = ne,
                        m = ne;
                    const v = i.find((e => e.isSelected));
                    try {
                        ee(r) && (o = (null === r || void 0 === r ? void 0 : r.destId) || o, m = (null === (n = null === r || void 0 === r ? void 0 : r.availabilityInfo) || void 0 === n ? void 0 : n.unavailabilityPercent) || m), "undefined" !== typeof t && t.length > 0 ? l = t.map(((e, n) => function(e, n, t, i, a) {
                            const {
                                id: r,
                                header: d,
                                countryCode: s,
                                availability: l,
                                accommodationTypeId: o
                            } = e;
                            let u = ne,
                                c = ne,
                                m = ne,
                                v = ne,
                                k = ne;
                            try {
                                u = d && d.title ? d.title : u, c = "undefined" !== typeof t ? t : c, "undefined" !== typeof d && null !== d && "undefined" !== typeof d.rating && null !== d.rating && (m = `${d.rating.value}`), l && ("undefined" !== typeof l.priceDisplayInfo && null !== l.priceDisplayInfo ? (v = l.priceDisplayInfo.priceBreakdown.headlinePrice.userAmount.rawAmount, v = "number" === typeof v ? v.toFixed(2) : v) : ("undefined" !== typeof l.rateInformation && null !== l.rateInformation && (k = l.rateInformation.ratePrice, v = k.split(/\s/)[1]), "undefined" === typeof v && (v = k)))
                            } catch (g) {
                                q(g.toString()), q(O)
                            }
                            return {
                                item_id: r,
                                item_name: u,
                                affiliation: a,
                                index: n,
                                item_brand: o || ne,
                                item_category: Nn.ACCOMMODATIONS,
                                item_category2: s,
                                item_category3: i,
                                item_category4: `${c}`,
                                item_category5: _n(Sn.HOTEL),
                                item_list_name: i,
                                item_variant: pe(m),
                                price: pe(v),
                                quantity: 1
                            }
                        }(e, n, o, d, u))) : q(N)
                    } catch (k) {
                        q(k.toString()), q(S)
                    }
                    return ee(a) && (c = a.currentPageNumber ? a.currentPageNumber : c), {
                        event: un.VIEW_ITEM_LIST,
                        tsmp: gn(),
                        _clear: !0,
                        items: l,
                        search_page_number: c,
                        percent_places_unavailable: m,
                        sort_option: v ? v.value : ne,
                        filters: Cn(un.FILTERS_APPLIED)
                    }
                },
                [un.VIEW_ITEM_LIST_MOBILE]: function(e) {
                    var n;
                    const {
                        items: t,
                        sorters: i,
                        context: a,
                        pagination: r,
                        searchMeta: d,
                        destinationFullName: s,
                        status: l
                    } = e;
                    if (ee(l) && "complete" !== l) return {
                        event: un.NO_OP,
                        tsmp: gn()
                    };
                    let o = [],
                        u = Ce(),
                        c = Te(),
                        m = ne,
                        v = ne,
                        k = {};
                    const g = i.find((e => e.isSelected));
                    try {
                        if (ee(d) && (u = (null === d || void 0 === d ? void 0 : d.destId) || u, v = (null === (n = null === d || void 0 === d ? void 0 : d.availabilityInfo) || void 0 === n ? void 0 : n.unavailabilityPercent) || v), "undefined" !== typeof t && t.length > 0 ? o = t.map(((e, n) => En(e, n, u, s, c))) : q(N), d.userHasSelectedFilters && a) {
                            const {
                                appliedFilters: e,
                                filters: n
                            } = a;
                            let t = {},
                                i = {};
                            if (n && Array.isArray(n) && n.length > 0 && (n.map((e => {
                                    var n;
                                    t[e.field] = e.options;
                                    let a = null === (n = e.title) || void 0 === n ? void 0 : n.text;
                                    a === te && e.title.translationTag && (a = e.title.translationTag.translation), i[e.field] = a
                                })), e && Array.isArray(e) && e.length > 0)) {
                                e.map((e => e.urlId.split("=")[0])).map((e => {
                                    if (i[e]) {
                                        let n = `filter_${ke(i[e].toLowerCase())}`;
                                        k[n] = t[e].filter((e => e.selected)).map((e => {
                                            var n;
                                            let t = e.value.text.toLowerCase();
                                            return t === te && e.value.translationTag && (t = null === (n = e.value.translationTag) || void 0 === n ? void 0 : n.translation.toLowerCase()), t
                                        }))
                                    }
                                }))
                            }
                        }
                    } catch (p) {
                        q(p.toString()), q(S)
                    }
                    return ee(r) && (m = r.currentPageNumber ? r.currentPageNumber : m), {
                        event: un.VIEW_ITEM_LIST,
                        tsmp: gn(),
                        _clear: !0,
                        items: o,
                        search_page_number: m,
                        percent_places_unavailable: v,
                        sort_option: g ? g.value : ne,
                        filters: k || ne
                    }
                },
                [un.PAGE_VIEW_INDEX]: function() {
                    const e = Tn();
                    return e.ai = Te(), e.action = De(), e.ui = Ae(), e.glev = Oe(), e.logged_in = Re(), e.language = xe(), e.user_location = Pe(), e.is_subscribed_to_newsletter = Le(), e.site_section = Be(), e
                },
                [un.PAGE_VIEW_SEARCH]: function(e) {
                    var n;
                    let t = Ke(),
                        i = ne,
                        a = ne,
                        r = ne,
                        d = ne,
                        s = ne,
                        l = ne;
                    const {
                        pagination: o,
                        searchMeta: u
                    } = e, c = Tn();
                    return ee(t) && t !== te && (i = pn(new Date, t)), ee(o) && (a = o.nbAvailablePages, r = o.currentPageNumber), ee(u) && (d = (null === (n = null === u || void 0 === u ? void 0 : u.availabilityInfo) || void 0 === n ? void 0 : n.unavailabilityPercent) || d), s = Ye(), s = s === te ? ne : s, l = We(), c.action = De(), c.ai = Te(), c.user_location = Pe(), c.language = xe(), c.ui = Ae(), c.glev = Oe(), c.logged_in = Re(), c.site_section = Be(), c.is_subscribed_to_newsletter = Le(), c.dest_name = Ue(), c.adults = He(), c.book_window = i, c.children = Ve(), c.city_name = s, c.country_name = Fn(l), c.date_in = t, c.date_out = $e(), c.dest_cc = l, c.dest_ufi = Ce(), c.nights = pe(qe()), c.rooms = pe(Ze()), c.percent_places_unavailable = d, c.travelling_for_work = je(), c.total_search_pages = a, c.search_page_number = r, c
                },
                [un.PAGE_VIEW_SEARCH_MOBILE]: function(e) {
                    var n, t, i;
                    let a = ne,
                        r = ne,
                        d = ne,
                        s = ne,
                        l = ne,
                        o = ne,
                        u = ne;
                    const {
                        pagination: c,
                        searchMeta: m,
                        destinationFullName: v,
                        destinationCountryCode: k
                    } = e, g = Tn();
                    return m.dates && m.dates.checkin ? (a = m.dates.checkin, r = pn(new Date, m.dates.checkin)) : (a = Ke(), r = pn(new Date, a)), ee(c) && (d = c.nbAvailablePages, s = c.currentPageNumber), ee(m) && (l = (null === (n = null === m || void 0 === m ? void 0 : m.availabilityInfo) || void 0 === n ? void 0 : n.unavailabilityPercent) || l), o = Ye(), o = o === te ? ne : o, u = k || We(), g.action = De(), g.ai = Te(), g.user_location = Pe(), g.language = xe(), g.ui = Ae(), g.glev = Oe(), g.logged_in = Re(), g.site_section = Be(), g.is_subscribed_to_newsletter = Le(), g.dest_name = v, g.adults = m.nbAdults, g.book_window = r, g.children = m.nbChildren, g.city_name = o, g.country_name = Fn(u), g.date_in = a, g.date_out = (null === (t = m.dates) || void 0 === t ? void 0 : t.checkout) || $e(), g.dest_cc = u, g.dest_ufi = Ce(), g.nights = (null === (i = m.dates) || void 0 === i ? void 0 : i.lengthOfStayInDays) || pe(qe()), g.rooms = ee(m.nbRooms) ? m.nbRooms : pe(Ze()), g.percent_places_unavailable = l, g.travelling_for_work = je(), g.total_search_pages = d, g.search_page_number = s, g
                },
                [un.PAGE_VIEW_PROPERTY]: function() {
                    let e = ne,
                        n = ne,
                        t = Ke(),
                        i = ne,
                        a = ne;
                    const r = Tn(),
                        d = Xe(),
                        s = Ge();
                    return ee(t) && t !== te && (n = t, e = pn(new Date, n)), i = Ye(), i = i === te ? s.b_hotel_city : me(i), a = We(), r.action = De(), r.ai = Te(), r.user_location = Pe(), r.language = xe(), r.ui = Ae(), r.glev = Oe(), r.logged_in = Re(), r.site_section = Be(), r.is_subscribed_to_newsletter = Le(), r.dest_name = Ue() || i, r.adults = He(), r.book_window = e, r.children = Ve(), r.city_name = i, r.country_name = Fn(a), r.date_in = n, r.date_out = $e(), r.dest_cc = a, r.dest_ufi = Ce(), r.nights = pe(qe()), r.rooms = pe(Ze()), r.travelling_for_work = je(), r.price = pe(d.price) || ne, r.rate_condition = d.rate_conditions || ne, r.is_subscribed_to_newsletter = Le(), r
                },
                [un.PAGE_VIEW_CHECKOUT]: function() {
                    const e = Tn(),
                        n = function() {
                            let e = ae,
                                n = ae,
                                t = be("b_this_url");
                            return t === te && (t = be("b_analytics_tracking_string")), t.indexOf("interested_taxi") > 0 && (e = ie), t.indexOf("interested_car_rentals") > 0 && (n = ie), {
                                interested_taxi: e,
                                interested_car_rentals: n
                            }
                        }();
                    return e.add_shuttle = n.interested_taxi, e.rent_car = n.interested_car_rentals, e
                },
                [un.PAGE_VIEW_CONFIRMATION]: function(e) {
                    var n;
                    if (!ee(e) || !ee(null === e || void 0 === e ? void 0 : e.hotelName)) return q("no data payload in confirmation page view event"), {
                        event: un.NO_OP,
                        tsmp: gn()
                    };
                    const t = Tn(),
                        {
                            stayInfo: i,
                            roomCountInfo: a
                        } = e;
                    let r = ne,
                        d = ne,
                        s = ne,
                        l = ne,
                        o = ne;
                    return i && (l = null === i || void 0 === i ? void 0 : i.numberOfNights, l = l && l > 0 ? l : pe(qe()), s = i.checkInDate || Ke(), s && (r = pn(new Date, s))), a && (o = a.numberOfConfirmedRoom), d = null === e || void 0 === e ? void 0 : e.totalPriceInfo.hotelCountryCode, t.action = De() || se.CONFIRMATION, t.ai = Te(), t.user_location = Fn(null === (n = null === e || void 0 === e ? void 0 : e.totalPriceInfo) || void 0 === n ? void 0 : n.bookerCountry) || Pe(), t.language = xe(), t.ui = Ae(), t.glev = Oe(), t.logged_in = Re(), t.site_section = Q.STAYS, t.is_subscribed_to_newsletter = Le(), t.dest_name = Ue(), t.adults = He(), t.book_window = r, t.children = Ve(), t.city_name = null === e || void 0 === e ? void 0 : e.hotelCity, t.country_name = Fn(d), t.date_in = s, t.date_out = $e(), t.dest_cc = d, t.dest_ufi = Ce(), t.nights = l, t.rooms = o || pe(Ze()), t.travelling_for_work = je(), t.payment_option = function() {
                        const e = [oe.C360_RES_DETAIL_V1, oe.C360_RES_DETAIL_V2];
                        let n = be(e[0]),
                            t = be(e[1]);
                        return ee(n) && n !== te ? 1 === n.payment_by_booking : ee(t) && t !== te ? 1 === t.payment_by_booking : (q("payment_by_booking value was not found on confirmation page"), !1)
                    }() ? Ln.PAYMENT_BY_BOOKING : ne, t.payment_method = function() {
                        let e = ne;
                        try {
                            const n = document.querySelector("[data-payment-method]");
                            if (ee(n) && ee(n.dataset)) {
                                let t = "paymentMethod";
                                ee(n.dataset[t]) && (e = n.dataset[t])
                            }
                        } catch (n) {
                            q(n.toString())
                        }
                        return e
                    }(), t
                },
                [un.NAVIGATION_BAR_INTERACTION]: function(e) {
                    const {
                        navigation_element: n
                    } = e, t = "undefined" !== typeof n ? n : "value_not_set";
                    return {
                        event: un.NAVIGATION_BAR_INTERACTION,
                        tsmp: gn(),
                        navigation_element: t
                    }
                },
                [un.SEARCH]: An,
                [un.SEARCH_MOBILE]: function(e) {
                    const {
                        state: n
                    } = e;
                    if (!ee(n)) return {
                        event: un.SEARCH,
                        tsmp: gn()
                    };
                    const {
                        destination: t,
                        occupancy: i,
                        date: a,
                        travelPurpose: r
                    } = n;
                    let d = ne,
                        s = ne,
                        l = ne,
                        o = ne,
                        u = ne,
                        c = ne,
                        m = ne,
                        v = ne,
                        k = ne,
                        g = ne,
                        p = ne,
                        f = ne,
                        h = ne,
                        N = ne,
                        S = ne;
                    if (t) {
                        if (t.value && t.value !== te ? f = t.value ? t.value : f : t.option && (f = t.option.valueForInput ? t.option.valueForInput : f), t.option && t.option.destId && t.option.title !== te) p = t.option.destId, h = t.option.title, S = t.option.cc1;
                        else if (t.optionsShown && t.options && t.options.length > 0) {
                            const e = t.options[0],
                                n = t.options[1];
                            e && e.isAroundMe ? (p = n.destId, h = n.title, S = n.cc1) : e && (p = e.destId, h = e.title, S = e.cc1)
                        }
                        N = Fn(S)
                    }
                    return a && (d = a.start ? a.start.date : d, s = a.end ? a.end.date : s), l = pn(d, s), o = pn(new Date, d), k = fn(d), g = fn(s), i && (u = i.adults ? i.adults.value : u, c = i.kids ? i.kids.value : c, m = i.rooms ? i.rooms.value : m), v = r && r.checked ? ie : ae, {
                        event: un.SEARCH,
                        tsmp: gn(),
                        search_term: f ? f.trim() : f,
                        adults: u,
                        book_window: o < 0 ? 0 : o,
                        children: c,
                        city_name: h,
                        country_name: N,
                        date_in: k,
                        date_out: g,
                        dest_cc: S,
                        dest_ufi: `${p}`,
                        nights: l,
                        rooms: m,
                        travelling_for_work: v
                    }
                },
                [un.SEARCH_ERROR]: function(e) {
                    let n = ne,
                        t = ne;
                    const {
                        errors: i,
                        state: a
                    } = e;
                    if (ee(i) && (n = "object" === typeof i ? Object.keys(i)[0] : i), !ee(a)) return {
                        event: un.SEARCH_ERROR,
                        tsmp: gn(),
                        error_type: n
                    };
                    const r = An(e);
                    return t = ee(a.date) ? a.date.maxLOS : t, Object.assign(r, {
                        event: un.SEARCH_ERROR,
                        tsmp: gn(),
                        error_type: n,
                        max_length_of_stay: t
                    })
                },
                [un.MAP_OPEN]: wn,
                [un.MAP_OPEN_MOBILE]: function() {
                    return wn()
                },
                [un.MAP_CLOSE]: Bn,
                [un.MAP_CLOSE_MOBILE]: function() {
                    return Bn()
                },
                [un.VIEW_ITEM]: function(e) {
                    const {
                        starRating: n
                    } = e, t = Xe(), i = Me(), a = n || ze(), r = Ge();
                    let d = Ye();
                    d = d === te ? r.b_hotel_city : me(d);
                    let s = Ie();
                    return s = s === te ? ne : s, {
                        event: un.VIEW_ITEM,
                        tsmp: gn(),
                        _clear: !0,
                        items: [{
                            item_id: pe(Qe()),
                            item_name: i && i.length > 0 ? i : Ue(),
                            affiliation: Te(),
                            index: ne,
                            item_brand: pe(s),
                            item_category: Nn.ACCOMMODATIONS,
                            item_category2: Fn(We()),
                            item_category3: d,
                            item_category4: Ce(),
                            item_category5: _n(Sn.HOTEL),
                            item_list_name: d,
                            item_variant: pe(a),
                            price: pe(t.price),
                            quantity: 1
                        }]
                    }
                },
                [un.PHOTO_CLICK]: function() {
                    return {
                        event: un.PHOTO_CLICK,
                        tsmp: gn()
                    }
                },
                [un.REVIEWS_CLICK]: function(e) {
                    const {
                        raw: n,
                        formatted: t
                    } = e;
                    let i = ne,
                        a = ne;
                    return a = ee(t) ? t.score : a, i = ee(n) ? n.count : i, {
                        event: un.REVIEWS_CLICK,
                        tsmp: gn(),
                        review_number: i,
                        review_score: a
                    }
                },
                [un.WISHLIST_SAVE]: function() {
                    return {
                        event: un.WISHLIST_SAVE,
                        tsmp: gn()
                    }
                },
                [un.SOCIAL_SHARE]: function(e) {
                    const {
                        channel: n
                    } = e;
                    return {
                        event: un.SOCIAL_SHARE,
                        tsmp: gn(),
                        social_media_name: ee(n) ? me(n) : ne
                    }
                },
                [un.SEARCH_CHANGE_DETAILS]: function(e) {
                    if (Ee() !== se.PROPERTY) return $("page is not property page, skipping processing"), {
                        event: un.NO_OP,
                        tsmp: gn()
                    };
                    const {
                        state: n
                    } = e;
                    if (!ee(n)) return $("no payload is present for processing processSearchChangeDetailsTS"), {
                        event: un.NO_OP,
                        tsmp: gn()
                    };
                    const {
                        date: t,
                        occupancy: i
                    } = n;
                    let a = ne,
                        r = ne,
                        d = ne,
                        s = ne,
                        l = ne,
                        o = ne,
                        u = ne,
                        c = ne,
                        m = ne,
                        v = ne,
                        k = ne,
                        g = ne,
                        p = Ge();
                    try {
                        a = de(ce.TRAVEL_PURPOSE), a = a === ue.BUSINESS ? ie : ae, t && (ee(t.start) && (r = t.start.date), ee(t.end) && (o = t.end.date), u = pn(r, o), c = pn(new Date, r) || be("days_to_checkin")), i && (s = ee(i.kids) ? i.kids.value : s, d = ee(i.adults) ? i.adults.value : d, l = ee(i.rooms) ? i.rooms.value : l), p && Object.keys(p).length > 0 && (m = p.city_name, v = p.country_name, k = p.b_countrycode, g = p.b_ufi)
                    } catch (f) {
                        q(f.toString())
                    }
                    return {
                        event: un.SEARCH_CHANGE_DETAILS,
                        tsmp: gn(),
                        dest_name: Ue() || m || Fn(We()),
                        adults: d,
                        book_window: c,
                        children: s,
                        city_name: me(Ye()),
                        country_name: v || Fn(We()),
                        date_in: fn(r),
                        date_out: fn(o),
                        dest_cc: k || We(),
                        dest_ufi: g || Ce(),
                        nights: u,
                        rooms: l,
                        travelling_for_work: a
                    }
                },
                [un.ADD_TO_CART]: function(e) {
                    const {
                        rt_pos_final: n,
                        rt_pos_selected: t,
                        hotel_id: i,
                        rt_selected_total_price: a,
                        aid: r
                    } = e;
                    let d = ne,
                        s = 0,
                        l = te,
                        o = ne,
                        u = te,
                        c = ne,
                        m = ne;
                    l = me(Ye()), o = Ue() || Fe("destination_name"), u = Me(), c = ze() || Fe("hotel_class"), m = i || Qe();
                    let v = Ie();
                    v = v === te ? ne : v;
                    const k = Cn(un.VIEW_ITEM);
                    let g = k && k.items ? k.items[0] : ne;
                    if (ee(t)) try {
                        d = t.split("_").length, a ? s = Number(a) : n.split(",").map((e => {
                            s += parseFloat(Je(e))
                        })), s && (s = parseFloat(s.toFixed(2)))
                    } catch (p) {
                        q(T), q(p.toString())
                    }
                    return g ? g.price = s : g = {
                        item_id: pe(m),
                        item_name: u || o,
                        affiliation: r || Te(),
                        index: ne,
                        item_brand: pe(v),
                        item_category: Nn.ACCOMMODATIONS,
                        item_category2: Fn(We()),
                        item_category3: l,
                        item_category4: Ce(),
                        item_category5: _n(Sn.HOTEL),
                        item_list_name: l || o,
                        item_variant: pe(c),
                        price: 0 === s ? ne : s,
                        quantity: d
                    }, {
                        event: un.ADD_TO_CART,
                        tsmp: gn(),
                        _clear: !0,
                        items: [g]
                    }
                },
                [un.ADD_TO_CART_MOBILE]: function(e) {
                    const {
                        rt_pos_final: n,
                        rt_pos_selected: t,
                        hotel_id: i,
                        rt_selected_total_price: a,
                        aid: r
                    } = e;
                    let d = ne,
                        s = 0,
                        l = te,
                        o = ne,
                        u = te,
                        c = ne,
                        m = ne;
                    l = me(Ye()), o = Ue() || Fe("destination_name"), u = Me(), c = ze() || Fe("hotel_class"), m = i || Qe();
                    let v = Ie();
                    v = v === te ? ne : v;
                    const k = Cn(un.VIEW_ITEM);
                    let g = k && k.items ? k.items[0] : ne;
                    if (ee(t)) try {
                        d = t.split("_").length, a ? s = Number(a) : n.split(",").map((e => {
                            s += parseFloat(Je(e))
                        })), s && (s = parseFloat(s.toFixed(2)))
                    } catch (p) {
                        q(T), q(p.toString())
                    }
                    return g ? g.price = s : g = {
                        item_id: pe(m),
                        item_name: u || o,
                        affiliation: r || Te(),
                        index: ne,
                        item_brand: pe(v),
                        item_category: Nn.ACCOMMODATIONS,
                        item_category2: Fn(We()),
                        item_category3: l,
                        item_category4: Ce(),
                        item_category5: _n(Sn.HOTEL),
                        item_list_name: l || o,
                        item_variant: pe(c),
                        price: 0 === s ? ne : s,
                        quantity: d
                    }, {
                        event: un.ADD_TO_CART,
                        tsmp: gn(),
                        _clear: !0,
                        items: [g]
                    }
                },
                [un.BEGIN_CHECKOUT]: function(e) {
                    const {
                        propertyDetails: n
                    } = e;
                    if (!ee(n)) return q("no propertyDetails payload in begin checkout processing func"), {
                        event: un.NO_OP,
                        tsmp: gn()
                    };
                    let {
                        id: t,
                        name: i,
                        location: a,
                        accommodationType: r,
                        starRating: d
                    } = n;
                    const s = (null === r || void 0 === r ? void 0 : r.type) ? me(`${null===r||void 0===r?void 0:r.type}`.toLowerCase()) : _n(Sn.HOTEL);
                    return {
                        event: un.BEGIN_CHECKOUT,
                        tsmp: gn(),
                        _clear: !0,
                        items: [{
                            item_id: t,
                            item_name: i,
                            affiliation: Te(),
                            index: ne,
                            item_brand: (null === r || void 0 === r ? void 0 : r.id) || ne,
                            item_category: Nn.ACCOMMODATIONS,
                            item_category2: Fn(null === a || void 0 === a ? void 0 : a.countryCode),
                            item_category3: (null === a || void 0 === a ? void 0 : a.city) || Ye(),
                            item_category4: (null === a || void 0 === a ? void 0 : a.ufi) || Ce(),
                            item_category5: s,
                            item_list_name: (null === a || void 0 === a ? void 0 : a.city) || (null === a || void 0 === a ? void 0 : a.formattedAddress) || ne,
                            item_variant: (null === d || void 0 === d ? void 0 : d.value) || ne,
                            price: en(),
                            quantity: 1
                        }]
                    }
                },
                [un.CHANGE_SELECTION_CHECKOUT]: function() {
                    return {
                        event: un.CHANGE_SELECTION_CHECKOUT,
                        tsmp: gn()
                    }
                },
                [un.ADD_PAYMENT_INFO]: function() {
                    return {
                        event: un.ADD_PAYMENT_INFO,
                        tsmp: gn(),
                        _clear: !0
                    }
                },
                [un.PURCHASE]: function(e) {
                    var n, t, i, a;
                    if (!ee(e) || !ee(null === e || void 0 === e ? void 0 : e.hotelName)) return q("no data payload in purchase event"), {
                        event: un.NO_OP,
                        tsmp: gn()
                    };
                    let r, d, s = Te(),
                        l = (null === e || void 0 === e ? void 0 : e.hotelName) || Me(),
                        o = l && l.length > 0 ? l : Ue(),
                        u = null === e || void 0 === e ? void 0 : e.totalPriceInfo.totalPrice,
                        c = be("fe_trans_total_price_euro"),
                        m = ne,
                        v = ze() || Fe("hotel_class");
                    if ((null === e || void 0 === e ? void 0 : e.hotelCity) || (d = Ye(), d = d === te ? ne : me(d)), (null === (n = null === e || void 0 === e ? void 0 : e.roomCountInfo) || void 0 === n ? void 0 : n.roomReservations) && (null === (t = null === e || void 0 === e ? void 0 : e.roomCountInfo) || void 0 === t ? void 0 : t.roomReservations[0]) && (m = null === (a = null === (i = null === e || void 0 === e ? void 0 : e.roomCountInfo) || void 0 === i ? void 0 : i.roomReservations[0]) || void 0 === a ? void 0 : a.roomReservationId), r = Fe("ttv") || u || c, r = `${r}`.trim(), r.indexOf(" ") > 0) {
                        r.split(" ").map((e => {
                            Number(e) > 0 && (r = Number(e))
                        }))
                    }
                    return {
                        event: un.PURCHASE,
                        tsmp: gn(),
                        _clear: !0,
                        rid: m || nn() || Fe("rid"),
                        ttv: r,
                        ai: s,
                        tax: Pn() || ne,
                        items: [{
                            item_id: (null === e || void 0 === e ? void 0 : e.hotelId) || Qe(),
                            item_name: o,
                            affiliation: s,
                            index: ne,
                            item_brand: (null === e || void 0 === e ? void 0 : e.roomCountInfo.accommodationTypeId) || Ie(),
                            item_category: Nn.ACCOMMODATIONS,
                            item_category2: Fn(null === e || void 0 === e ? void 0 : e.totalPriceInfo.hotelCountryCode),
                            item_category3: (null === e || void 0 === e ? void 0 : e.hotelCity) || d,
                            item_category4: Ce(),
                            item_category5: (null === e || void 0 === e ? void 0 : e.isBookingHome) ? _n(Sn.BOOKING_HOME) : _n(Sn.HOTEL),
                            item_list_name: Fe("destination_name") || (null === e || void 0 === e ? void 0 : e.hotelCity) || (null === e || void 0 === e ? void 0 : e.hotelAddress),
                            item_variant: pe(v),
                            price: pe(r),
                            quantity: 1
                        }]
                    }
                },
                [un.CANCELLATION]: function() {
                    return {
                        event: un.CANCELLATION,
                        tsmp: gn(),
                        cancellation_hotel_name: Me() || Fe("hotel_name") || Qe(),
                        cancellation_dest_name: Ye() || Fe("city_name")
                    }
                },
                [un.NEWSLETTER_SIGN_UP]: function() {
                    return {
                        event: un.NEWSLETTER_SIGN_UP,
                        tsmp: gn(),
                        is_subscribed_to_newsletter: Le()
                    }
                },
                [un.APP_DOWNLOAD]: function() {
                    return {
                        event: un.APP_DOWNLOAD,
                        tsmp: gn()
                    }
                },
                [un.OPEN_APP]: function() {
                    return {
                        event: un.OPEN_APP,
                        tsmp: gn()
                    }
                },
                [un.PAGE_VIEW_CHECKOUT_PROPERTY_CARD]: function(e) {
                    return ee(e) && sn(un.PAGE_VIEW_CHECKOUT_PROPERTY_CARD, e), {
                        event: un.NO_OP,
                        tsmp: gn()
                    }
                }
            };

            function Mn(e) {
                return q(f), {
                    event: un.NO_OP,
                    tsmp: gn()
                }
            }
            const Hn = "_ga";

            function Vn() {
                if (!On() || !Dn()) return !1;
                try {
                    return function() {
                        if (!On() || !Dn()) return !1;
                        if (!ee(document.cookie)) return !1;
                        let e = !1;
                        try {
                            document.cookie.split("; ").find((e => e.startsWith(Hn))) && (e = !0)
                        } catch (n) {
                            q(n.toString())
                        }
                        return $(`${Z}: ${e}`), e
                    }()
                } catch (e) {
                    q(e.toString())
                }
                return !1
            }

            function Gn(e, n, t) {
                if (Vn())
                    if ("undefined" !== typeof e)
                        if ("undefined" !== typeof n)
                            if ("undefined" !== typeof t) try {
                                const i = function(e) {
                                    return "undefined" !== typeof Un[e] ? Un[e] : Mn
                                }(n);
                                vn(e, i(t))
                            } catch (d) {
                                q(d.toString()), q(k)
                            } else q(i);
                            else q(r);
                else q(a)
            }
            var Yn, Wn;

            function Kn(e, n, t, i) {
                let a = null;
                if (On() && Dn())
                    if (ee(e))
                        if (ee(n))
                            if (ee(t))
                                if (ee(i)) {
                                    switch (e) {
                                        case Yn.CLASS:
                                            let e = document.getElementsByClassName(n);
                                            a = ee(e[0]) ? e[0] : a;
                                            break;
                                        case Yn.ID:
                                            a = document.getElementById(n);
                                            break;
                                        case Yn.ATTRIBUTE:
                                            a = document.querySelector(n);
                                            break;
                                        default:
                                            q("default case was run in attachHandler function")
                                    }
                                    if ("undefined" !== typeof a && null !== a) try {
                                        a.removeEventListener(t, i), a.addEventListener(t, i)
                                    } catch (r) {
                                        q(r.toString()), q("error while trying to add event listener")
                                    } else q("elem is null in attach handler")
                                } else q(`${d}: handler func`);
                else q(`${d}: handler func type`);
                else q(`${d}: element identifier`);
                else q(`${d}: element identifier type`);
                else q(l)
            }

            function $n() {
                Ee() === se.SEARCH ? Kn(Yn.CLASS, "map_full_overlay__close", Wn.CLICK, (function() {
                    Gn(tn.DATA_LAYER, un.MAP_CLOSE, {})
                })) : $("current page is not searchresults, skipping searchresults handlers")
            }

            function qn() {
                Ee() === se.PROPERTY ? (we().toLowerCase() === J.DESKTOP && (! function() {
                    function e(e) {
                        try {
                            const {
                                target: n
                            } = e;
                            if (ee(n)) {
                                let e = n;
                                e.classList && (e.classList.contains("bh-photo-grid-item") || e.classList.contains("bh-photo-grid-thumb-more") || e.classList.contains("bh-photo-grid-thumb-more-inner") || e.classList.contains("bh-photo-grid-thumb-more-inner-2") || e.classList.contains("bh-photo-modal-grid-image")) && Gn(tn.DATA_LAYER, un.PHOTO_CLICK, {})
                            }
                        } catch (e) {
                            q(E), q(e.toString())
                        }
                    }
                    Kn(Yn.CLASS, "bh-photo-grid", Wn.CLICK, e), Kn(Yn.CLASS, "bh-photo-modal", Wn.CLICK, e)
                }(), Kn(Yn.ATTRIBUTE, 'form[id="hprt-form"]', Wn.SUBMIT, (function(e) {
                    const {
                        target: n
                    } = e;
                    let t, i;
                    if (ee(n)) try {
                        t = new FormData(n), i = Object.fromEntries(t), Gn(tn.DATA_LAYER, un.ADD_TO_CART, i)
                    } catch (e) {
                        q(T), q(e.toString())
                    }
                }))), we().toLowerCase() === J.MDOT && (Kn(Yn.ID, "hotel-photos", Wn.TOUCHEND, (function(e) {
                    try {
                        const {
                            target: n
                        } = e;
                        if (ee(n)) {
                            let e = n;
                            e.classList && (e.classList.contains("swpg_prev") || e.classList.contains("swpg__next") || e.classList.contains("swpg__button")) && Gn(tn.DATA_LAYER, un.PHOTO_CLICK, {})
                        }
                    } catch (e) {
                        q(E), q(e.toString())
                    }
                })), Kn(Yn.ID, "bookForm", Wn.FORMDATA, (function(e) {
                    const {
                        target: n
                    } = e;
                    if (n) {
                        let e = n;
                        try {
                            const n = ["rt_pos_final", "rt_pos_selected", "hotel_id", "rt_selected_total_price", "aid"],
                                t = {
                                    aid: te,
                                    hotel_id: te,
                                    rt_pos_final: te,
                                    rt_pos_selected: te,
                                    rt_pos_selected_within_room: te,
                                    rt_selected_total_price: te
                                };
                            e && e.children && n.map((n => {
                                e.children[n] && (t[n] = e.children[n].value)
                            })), Gn(tn.DATA_LAYER, un.ADD_TO_CART_MOBILE, t)
                        } catch (t) {
                            q(C), q(t.toString())
                        }
                    } else q(C + ": no formdata target")
                })))) : $("current page is not hotel (property), skipping hotel page handlers")
            }

            function Zn() {
                const e = Object.keys(Un);
                for (const n of e) ln(n, {});
                $("store init complete")
            }! function(e) {
                e.CLASS = "class", e.ID = "id", e.ATTRIBUTE = "attribute"
            }(Yn || (Yn = {})),
            function(e) {
                e.CLICK = "click", e.SUBMIT = "submit", e.TOUCHEND = "touchend", e.FORMDATA = "formdata"
            }(Wn || (Wn = {}));
            const jn = {
                handlersInitDelay: 5 * Math.round(100 * Math.random()) + 100
            };

            function zn() {
                try {
                    if (function() {
                            let e = ne;
                            return !(!ye() || (e = window[fe][he][Se], !e))
                        }()) return void $("an instance of the lib is up");
                    Y(), Zn(), ye() && window[fe][he][_e] || setTimeout((() => {
                        ye() && (window[fe][he][_e] = !0), On() && Dn() ? ($n(), qn(), $("handlers init complete")) : q(l)
                    }), jn.handlersInitDelay), ye() && (window[fe][he][Se] = !0), $("library init complete")
                } catch (e) {
                    q(F)
                }
            }! function() {
                try {
                    if (!Vn()) return void $("consent was not granted by the user");
                    zn()
                } catch (e) {
                    q(e.toString()), q(F)
                }
            }()
        },
        "5d6304f4": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => i
            });
            const i = new class {
                constructor() {
                    this.storage = {}
                }
                get(e) {
                    return this.storage[e]
                }
                set(e, n) {
                    this.storage[e] = n
                }
            }
        },
        b1f34e95: (e, n, t) => {
            "use strict";
            t.d(n, {
                G1: () => s,
                Oq: () => d,
                _Q: () => l,
                ge: () => a,
                jP: () => r,
                mT: () => i,
                yn: () => o
            });
            const i = "nflt",
                a = ";",
                r = "previous_search_id",
                d = {
                    FILTER_CLASS: "class",
                    FILTER_HOTEL_TYPE: "ht_id",
                    FILTER_24HR_RECEPTION: "hr_24",
                    FILTER_FACILITIES: "hotelfacility",
                    FILTER_ROOM_FACILITIES: "roomfacility",
                    FILTER_DISTRICT: "di",
                    FILTER_CHAINS: "chaincode",
                    FILTER_CHAIN: "chain",
                    FILTER_DEALS: "any_deal",
                    FILTER_DEALS_V2: "deals_filter_v2",
                    FILTER_FREE_CANCELLATION: "fc",
                    FILTER_PAYMENT_METHOD: "pmt",
                    FILTER_MEALPLAN: "mealplan",
                    FILTER_PRICE_SLIDER: "price",
                    FILTER_HT_BEACH: "ht_beach",
                    FILTER_TWIN_DOUBLE: "tdb",
                    FILTER_POPULAR_ACTIVITIES: "popular_activities",
                    FILTER_REVIEW_SCORE: "review_score",
                    FILTER_FAMILY_FRIENDLY_PROPERTY: "family_friendly_property",
                    FILTER_OUT_OF_STOCK: "oos",
                    FILTER_PRIVATE_BRAND: "ibr",
                    FILTER_ACCESSIBLE_FACILITIES: "accessible_facilities",
                    FILTER_ACCESSIBLE_ROOM_FACILITIES: "accessible_room_facilities",
                    FILTER_DISTANCE_TO_SKI_LIFT_FILTER: "distanceToSkiliftFilter",
                    FILTER_MIN_BATHROOMS: "min_bathrooms",
                    FILTER_UFI: "uf",
                    FILTER_POPULAR_NEARBY_LANDMARKS: "popular_nearby_landmarks",
                    FILTER_DISTANCE: "distance",
                    FILTER_SEO_THEME: "sth",
                    FILTER_HEALTH_AND_HYGIENE: "health_and_hygiene",
                    FILTER_NUM_BEDS: "num_beds",
                    FILTER_TOP_DESTINATIONS: "top_destinations",
                    FILTER_POPULAR: "popular",
                    FILTER_POPULAR_STICKY: "popular_sticky",
                    FILTER_NO_DORMS: "rpt",
                    FILTER_PRIVACY_TYPE: "privacy_type",
                    FILTER_PRIVACY_TYPE_NO_DATE: "privacy_type_no_date",
                    FILTER_GENIUS_BENEFITS: "genius_benefits",
                    FILTER_PREVIOUSLY_USED: "used_filters",
                    FILTER_BEACH_ACCESS_FACILITY: "BeachAccessFacilityFilter",
                    FILTER_SUSTAINABLE_PROPERTY: "SustainablePropertyFilter",
                    FILTER_SUSTAINABLE_LEVEL_PROPERTY: "SustainablePropertyLevelFilter",
                    FILTER_THAI_PASS: "thai_pass",
                    FILTER_UNIT_CONFIG: "unit_config_grouped",
                    FILTER_RATED_HIGH: "rated_high",
                    FILTER_DISTANCE_TO_POI: "distance_to_poi",
                    FILTER_EPU_BEDROOM_COUNT: "entire_place_bedroom_count",
                    FILTER_DISTRICT_THEME: "dti"
                },
                s = "min",
                l = "max",
                o = new RegExp(`^.+-(${s}|[0-9]+)-(${l}|[0-9]+)-1`, "i")
        },
        ba394a5d: (e, n, t) => {
            "use strict";
            t.d(n, {
                mg: () => r,
                oB: () => i,
                vq: () => a
            });
            const i = "sr_view",
                a = "grid",
                r = "list"
        },
        "05c5dc4d": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => a
            });
            var i = t("ba394a5d");

            function a(e) {
                const n = null === e || void 0 === e ? void 0 : e.searchParams.get(i.oB);
                return n === i.vq || n === i.mg ? n : void 0
            }
        },
        "8ded1df4": (e, n, t) => {
            "use strict";
            t.d(n, {
                F4: () => d,
                Kt: () => a,
                Mv: () => i,
                XY: () => r,
                kz: () => l,
                lM: () => o,
                mO: () => s
            });
            const i = "SearchBox",
                a = 30,
                r = "sb",
                d = [356118, 949424, 964175, 2417311],
                s = {
                    dest_id: "trip,destination_id",
                    dest_type: "trip,destination_type",
                    checkin: "trip,start_date",
                    checkout: "trip,end_date",
                    group_adults: "trip,number_of_adults",
                    group_children: "",
                    age: "trip,children_age",
                    no_rooms: "trip,number_of_rooms"
                },
                l = new Set(["appalachia-us", "carolinas-us", "south-us", "east-coast-us", "great-lakes-us", "great-plains-us", "gulf-coast-us", "mid-atlantic-us", "midwest-us", "mountain-west-us", "new-england-us", "ozarks-us", "pacific-northwest-us", "pacific-west-us", "rocky-mountains-us", "south-atlantic-us", "south-west-us", "west-coast-us"]),
                o = {
                    DATE_CHANGED: "CAPLA_EVENT_search-web_searchresults_DATE_CHANGED",
                    OCCUPANCY_CHANGED: "CAPLA_EVENT_search-web_searchresults_OCCUPANCY_CHANGED"
                }
        },
        77684756: (e, n, t) => {
            "use strict";
            t.d(n, {
                n: () => o
            });
            var i = t("28dbd132"),
                a = t("c1a68871"),
                r = t("c44dcb0c"),
                d = t("dfbd7c7c"),
                s = t("86c19f61"),
                l = t("faeb41f3");

            function o(e, n, t) {
                const o = Object.values((0, a.o)(e, {
                        form: "name_from_preposition"
                    })),
                    u = {},
                    c = (0, s.JI)();
                for (const [i, a] of c) {
                    const n = String(a.getMonth() + 1);
                    u[i] = {
                        year: a.getFullYear(),
                        shortName: e.trans((0, r.t)("month", n, "short"))
                    }
                }
                const m = [{
                    name: e.trans((0, r.t)("sr_sbox_flex_dates_choose_days_a_weekend")),
                    duration: 1,
                    startDay: 5
                }, {
                    name: e.trans((0, r.t)("sr_sbox_flex_dates_choose_days_a_week")),
                    duration: 5,
                    startDay: 1
                }, {
                    name: e.trans((0, r.t)("ls_flex_search_28_radio")),
                    duration: 28,
                    startDay: 6
                }, {
                    name: e.trans((0, r.t)("sr_sbox_flex_dates_choose_days_other_2")),
                    duration: 1,
                    startDay: 1,
                    isDayCustom: !0
                }];
                let v, k = !1;
                if ((0, i.trackExperiment)(i.exp `TZUfONebEWAUFccRMVIZdRRT`) && null !== t && void 0 !== t && t.flexibleDatesConfig && t.flexibleDatesConfig.broadDatesCalendar) {
                    const e = function(e) {
                        var n, t, i;
                        const a = null === e || void 0 === e ? void 0 : e.broadDatesCalendar,
                            r = null === a || void 0 === a || null === (n = a.checkinMonths) || void 0 === n ? void 0 : n.filter(l.Dw),
                            s = null === a || void 0 === a || null === (t = a.los) || void 0 === t ? void 0 : t[0],
                            o = null === a || void 0 === a || null === (i = a.startWeekdays) || void 0 === i ? void 0 : i[0],
                            u = (null === e || void 0 === e ? void 0 : e.dateFlexUseCase) === d.$H.BROAD_DATES;
                        if (s && o) return {
                            selected: {
                                duration: s,
                                startDay: o,
                                months: r ? new Set(r) : void 0,
                                isDayCustom: a.losType === d.Sz.CUSTOM
                            },
                            isEnabled: u
                        };
                        if (null !== r && void 0 !== r && r.length) return {
                            selected: {
                                months: new Set(r)
                            },
                            isEnabled: u
                        };
                        return
                    }(t.flexibleDatesConfig);
                    null !== e && void 0 !== e && e.selected && (v = e.selected), k = Boolean(null === e || void 0 === e ? void 0 : e.isEnabled)
                } else {
                    const e = (0, s.HB)(n, t);
                    if (e)
                        if (k = e.isEnabled, e.duration && e.startDay) {
                            let n = !0;
                            e.isCustom || m.forEach((t => {
                                t.duration !== e.duration || t.startDay !== e.startDay || t.isDayCustom || (n = !1)
                            })), v = {
                                duration: e.duration,
                                startDay: e.startDay,
                                isDayCustom: n,
                                months: e.months
                            }
                        } else e.months && (v = {
                            months: e.months
                        })
                }
                return {
                    isEnabled: k,
                    selected: v,
                    maxAllowedMonths: 3,
                    days: m,
                    weekDays: o.reduce(((e, n, t) => (e[t + 1] = {
                        name: n
                    }, e)), {}),
                    months: u
                }
            }(0, r.t)("weekday_formatted_date", "fakeIndex", "name_from_preposition")
        },
        "7311adbc": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => Wt
            });
            var i = t("ead71eb0"),
                a = t("cedcabf9"),
                r = t("dc6d28ff"),
                d = t("28dbd132");
            const s = "campaign_id",
                l = "checkin",
                o = "checkout",
                u = "upsort_homes",
                c = () => {
                    const {
                        basePageUrl: e,
                        visitorCountry: n,
                        language: t
                    } = function() {
                        const e = (0, r.getRequestContext)();
                        return {
                            get acceptHeader() {
                                return e.getAcceptHeader()
                            },
                            get actionName() {
                                return e.getActionName()
                            },
                            get affiliate() {
                                return e.getAffiliate()
                            },
                            get basePageUrl() {
                                return e.getBasePageUrl()
                            },
                            get body() {
                                return e.getBody()
                            },
                            get bPlatformEnvironment() {
                                return e.getBPlatformEnvironment()
                            },
                            get CDNOrigin() {
                                return e.getCDNOrigin()
                            },
                            get CSPNonce() {
                                return e.getCSPNonce()
                            },
                            get CSRFToken() {
                                return e.getCSRFToken()
                            },
                            get currency() {
                                return e.getCurrency()
                            },
                            get encryptedCommonOauthState() {
                                return e.getEncryptedCommonOauthState()
                            },
                            get ETSerializedState() {
                                return e.getETSerializedState()
                            },
                            get isInternalIp() {
                                return e.isInternalIp()
                            },
                            get isInternalUser() {
                                return e.isInternalUser()
                            },
                            get isLanding() {
                                return e.isLanding()
                            },
                            get isNormalRequest() {
                                return e.isNormalRequest()
                            },
                            get isRobotRequest() {
                                return e.isRobotRequest()
                            },
                            get language() {
                                return e.getLanguage()
                            },
                            get pageviewId() {
                                return e.getPageviewId()
                            },
                            get partnerIdentity() {
                                return e.getPartnerIdentity()
                            },
                            get publicPath() {
                                return e.getPublicPath()
                            },
                            get sessions() {
                                return e.getSessions()
                            },
                            get siteId() {
                                return e.getSiteId()
                            },
                            get siteType() {
                                return e.getSiteType()
                            },
                            get staffIdentity() {
                                return e.getStaffIdentity()
                            },
                            get userAgent() {
                                return e.getUserAgent()
                            },
                            get userIdentity() {
                                return e.getUserIdentity()
                            },
                            get visitorCountry() {
                                return e.getVisitorCountry()
                            },
                            get visitorCountryRegion() {
                                return e.getVisitorCountryRegion()
                            },
                            get visitorIP() {
                                return e.getVisitorIP()
                            },
                            get visitorUfi() {
                                return e.getVisitorUfi()
                            },
                            get isCnDomain() {
                                var n;
                                return null === e || void 0 === e || null === (n = e.getBasePageUrl()) || void 0 === n || null === (n = n.host) || void 0 === n ? void 0 : n.endsWith("booking.cn")
                            }
                        }
                    }();
                    return {
                        campaignId: e.searchParams.get(s) || void 0,
                        checkIn: e.searchParams.get(l) || void 0,
                        checkOut: e.searchParams.get(o) || void 0,
                        countryCode: n,
                        language: t,
                        hasBookingHomeUpsort: Boolean(e.searchParams.get(u))
                    }
                };
            var m = t("c44dcb0c");
            const v = () => (0, r.getRequestContext)().getBPlatformEnvironment && "prod" === (0, r.getRequestContext)().getBPlatformEnvironment(),
                k = () => (0, r.getRequestContext)().getBPlatformEnvironment && "dqs" === (0, r.getRequestContext)().getBPlatformEnvironment(),
                g = () => (0, r.getRequestContext)().getBPlatformEnvironment && ("dev" === (0, r.getRequestContext)().getBPlatformEnvironment() || !(0, r.getRequestContext)().getBPlatformEnvironment());

            function p() {
                return !("undefined" !== typeof window && "undefined" !== typeof window.document)
            }
            const f = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "RestaurantAttributesFragment"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "RestaurantAttributes"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "ambiances"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRestaurantNameTranslationOn"
                                                }
                                            }
                                        }]
                                    }]
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "cuisines"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRestaurantNameTranslationOn"
                                                }
                                            }
                                        }]
                                    }]
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "mealTypes"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRestaurantNameTranslationOn"
                                                }
                                            }
                                        }]
                                    }]
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "openForMeals"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRestaurantNameTranslationOn"
                                                }
                                            }
                                        }]
                                    }]
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isBuffet"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isAlacarte"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                h = {},
                N = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "PropertyPage"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "pagenameDetails"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "PagenameDetails"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "searchConfig"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "SearchConfigInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "relevantForYourTripInput"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "ListType",
                                    type: {
                                        kind: "NonNullType",
                                        type: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "HighlightCriterion"
                                            }
                                        }
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "destination"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SearchDestinationInput"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "travelPurpose"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "TravelPurpose"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "propertyHighlightsCriteria"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "ListType",
                                    type: {
                                        kind: "NonNullType",
                                        type: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "HighlightCriterion"
                                            }
                                        }
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "geniusVipPriceMatchInput"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "GeniusVipPriceMatchInput"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "walletAndRewardsBalanceInput"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "WalletAndRewardsBalanceInput"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "propertyFacilityRankingMode"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "FacilityGroupsOrder"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "selectedFilters"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            },
                            defaultValue: {
                                kind: "StringValue",
                                value: "",
                                block: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "galleryLimit"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            },
                            defaultValue: {
                                kind: "IntValue",
                                value: "45"
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetGallery"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetGalleryNew"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetGalleryLegacy"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetGallery360Photos"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetQuestionsAndAnswers"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "isRestaurantNameTranslationOn"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "isLoggedInUser"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "isPropertyFacilitiesBlockOn"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "isPropertyMostPopularFacilitiesOn"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "isPropertyHighlightListOn"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetFinePrint"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetRestaurantAttributesDesktop"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "propertyMostPopularFacilitiesHighlightsLimit"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            },
                            defaultValue: {
                                kind: "IntValue",
                                value: "8"
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetHighlights"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetParkingSubtitleAttributes"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "propertyMostPopularFacilitiesHighlightsIncludeClosed"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "propertyMostPopularFacilitiesHighlightsIncludeWifiSpeed"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "propertyHighlightsIncludeWifiSpeed"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetRoomsInfo"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetRoomPhotosInfo"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetHostDetail"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "maxPairs"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            defaultValue: {
                                kind: "IntValue",
                                value: "20"
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "isPropertyBrandInfoOn"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetCityTranslation"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetRoomOptions"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetCompanyLegalName"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetFacilitiesCount"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetRelevantForYourTrip"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "facilitiesExcludeGroups"
                                }
                            },
                            type: {
                                kind: "ListType",
                                type: {
                                    kind: "NonNullType",
                                    type: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "Int"
                                        }
                                    }
                                }
                            },
                            defaultValue: {
                                kind: "ListValue",
                                values: []
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldQueryDescriptionGeneratorSignature"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetPastUserReservations"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldGetUserReservations"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hotelPageByPageName"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    },
                                    value: {
                                        kind: "ObjectValue",
                                        fields: [{
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "pageNameDetails"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "pagenameDetails"
                                                }
                                            }
                                        }, {
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "searchConfig"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "searchConfig"
                                                }
                                            }
                                        }, {
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "selectedFilters"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "selectedFilters"
                                                }
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "HotelPageType"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "propertyDetails"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "input"
                                                    },
                                                    value: {
                                                        kind: "ObjectValue",
                                                        fields: [{
                                                            kind: "ObjectField",
                                                            name: {
                                                                kind: "Name",
                                                                value: "destination"
                                                            },
                                                            value: {
                                                                kind: "Variable",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "destination"
                                                                }
                                                            }
                                                        }, {
                                                            kind: "ObjectField",
                                                            name: {
                                                                kind: "Name",
                                                                value: "travelPurpose"
                                                            },
                                                            value: {
                                                                kind: "Variable",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "travelPurpose"
                                                                }
                                                            }
                                                        }]
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "facilitiesCount"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "excludeGroups"
                                                            },
                                                            value: {
                                                                kind: "Variable",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "facilitiesExcludeGroups"
                                                                }
                                                            }
                                                        }],
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "shouldGetFacilitiesCount"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "propertyPageFlags"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isPropertyBooked"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "chainIds"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "brands"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "chain"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PropertyBrandInfoFragment"
                                                        },
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "isPropertyBrandInfoOn"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "accommodationType"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "type"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "travelProud"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isTravelProud"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PropertyQuestionsAnswersFragment"
                                                        },
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "shouldGetQuestionsAndAnswers"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "walletAndRewardsBalance"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "input"
                                                            },
                                                            value: {
                                                                kind: "Variable",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "walletAndRewardsBalanceInput"
                                                                }
                                                            }
                                                        }],
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "isLoggedInUser"
                                                                    }
                                                                }
                                                            }]
                                                        }],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "active"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "balance"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "raw"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "currency"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "prettified"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isTpiExclusiveProperty"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "aiTranslations"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "rooms"
                                                        },
                                                        arguments: [],
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "shouldGetRoomsInfo"
                                                                    }
                                                                }
                                                            }]
                                                        }],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "roomPhotos"
                                                                },
                                                                arguments: [],
                                                                directives: [{
                                                                    kind: "Directive",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "include"
                                                                    },
                                                                    arguments: [{
                                                                        kind: "Argument",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "if"
                                                                        },
                                                                        value: {
                                                                            kind: "Variable",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "shouldGetRoomPhotosInfo"
                                                                            }
                                                                        }
                                                                    }]
                                                                }],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "photoUri"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "translations"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PropertyFacilitiesBlockFragment"
                                                        },
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "isPropertyFacilitiesBlockOn"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PropertyHighlightList"
                                                        },
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "isPropertyHighlightListOn"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PropertyMostPopularFacilitiesFields"
                                                        },
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "isPropertyMostPopularFacilitiesOn"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "RelevantForYourTripFragment"
                                                        },
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "shouldGetRelevantForYourTrip"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hotelCurrencyCode"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PropertyHighlightsAccommodationHighlightsFragment"
                                                        },
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "shouldGetHighlights"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "FinePrintFragment"
                                                        },
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "shouldGetFinePrint"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "RestaurantsFragment"
                                                        },
                                                        directives: []
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "FoodFacilitiesFragment"
                                                        },
                                                        directives: []
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "BreakfastFragment"
                                                        },
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "preferredValue"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PropertyGalleryFragment"
                                                        },
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "shouldGetGallery"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "LegalInfoFragment"
                                                        },
                                                        directives: []
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PropertyFinePrintAdditionalFeeWarning_PropertyFields"
                                                        },
                                                        directives: []
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "HouseRulesFragment"
                                                        },
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "geniusVipPriceMatch"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "input"
                                                            },
                                                            value: {
                                                                kind: "Variable",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "geniusVipPriceMatchInput"
                                                                }
                                                            }
                                                        }],
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "isLoggedInUser"
                                                                    }
                                                                }
                                                            }]
                                                        }],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "GeniusVipPriceMatchFragment"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PastUserReservations"
                                                        },
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "shouldGetPastUserReservations"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "UserReservations"
                                                        },
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "shouldGetUserReservations"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "propertyFullExtended"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "searchBoxPrefillData"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "nbRooms"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "nbAdults"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "nbChildren"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "childrenAges"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "location"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "destType"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "destId"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "destName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "dates"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "checkin"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "checkout"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "languagesSpoken"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "languageCodes"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isWorkFriendly"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "propertyReview"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "PropertyReviewFields"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "childAndBedPolicy"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "ChildAndBedPolicyFields"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "basicPropertyData"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "BasicPropertyDataFields"
                                                                },
                                                                directives: []
                                                            }, {
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "PropertyTypeBadge_BasicPropertyDataFields"
                                                                },
                                                                directives: []
                                                            }, {
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "BHQualityClassificationBannerDesktopFields_BasicPropertyDataFields"
                                                                },
                                                                directives: []
                                                            }, {
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "RoomOptionsFields_BasicPropertyDataFields"
                                                                },
                                                                directives: [{
                                                                    kind: "Directive",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "include"
                                                                    },
                                                                    arguments: [{
                                                                        kind: "Argument",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "if"
                                                                        },
                                                                        value: {
                                                                            kind: "Variable",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "shouldGetRoomOptions"
                                                                            }
                                                                        }
                                                                    }]
                                                                }]
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "bookingHomeFlags"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "PropertyTypeBadge_BookingHomeFlagsFields"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "legalInformation"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isNonTrader"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "starRating"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "StarRatingFields"
                                                                },
                                                                directives: []
                                                            }, {
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "BHQualityClassificationBannerDesktopFields_StarRatingFields"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hostProfile"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "HostProfileFields"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "sustainability"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "SustainabilityFields"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "tripTypesHotelPage"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "TripTypesHotelPageFields"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "tripTypeLabels"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "PropertyTripTypeLabelsInfoFields"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "requestToBookEligibility"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isEnabled"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translation"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "HotelTranslationFields"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isNewlyOpened"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "licenseDetails"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "nextToHotelName"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "inferredLocationScore"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "HotelPageNotFound"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "message"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }].concat([{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyBrandInfoFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "brands"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "logoUrl"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyQuestionsAnswersFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "questionsAndAnswers"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    },
                                    value: {
                                        kind: "ObjectValue",
                                        fields: [{
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "maxPairs"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "maxPairs"
                                                }
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "PropertyQuestionsAndAnswersResult"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "partnerOptedOutOfQAndA"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userAlreadyAskedQuestion"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "partnerAverageResponseTime"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "propertyQuestionAnswerPairs"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "questionId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "question"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translatedQuestion"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "askedTimestamp"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "answer"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translatedAnswer"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "answeredTimestamp"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "roomId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "showTranslations"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "QuestionsAndAnswersError"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "message"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], {
                        kind: "Document",
                        definitions: (e => {
                            const n = {};
                            return e.filter((e => {
                                if ("FragmentDefinition" !== e.kind) return !0;
                                const t = e.name.value;
                                return !n[t] && (n[t] = !0, !0)
                            }))
                        })([{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "PropertyFacilitiesBlockFragment"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Property"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "facilities"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "includeCommonAmenities"
                                        },
                                        value: {
                                            kind: "BooleanValue",
                                            value: !0
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "excludeGroups"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "facilitiesExcludeGroups"
                                            }
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "groupId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "slug"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "instances"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "title"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "attributes"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isOffsite"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "name"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "scheduleEntry"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "from"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "hours"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "minutes"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "to"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "hours"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "minutes"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "dayOfWeek"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "closureScheduleDuringStay"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "from"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "year"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "month"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "day"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "to"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "year"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "month"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "day"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "paymentInfo"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "chargeMode"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "chargeDetails"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "price"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "currency"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "frequency"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "extendedAttributes"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "InternetAttributes"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "coverageArea"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "connectionType"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "ParkingAttributes"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "type"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "reservation"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "SwimmingPoolAttributes"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "location"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "availabilityType"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "ageRestriction"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "isShared"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "isRooftop"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "isShallowEnd"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "isInfinity"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "isHeated"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "isSaltWater"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "isPoolWithView"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "isPlungePool"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "BathroomAttributes"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            alias: {
                                                                                kind: "Name",
                                                                                value: "bathroomType"
                                                                            },
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "type"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            alias: {
                                                                                kind: "Name",
                                                                                value: "bathroomLocation"
                                                                            },
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "location"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "gender"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "numberOfGuestsWithAccess"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "RestaurantAttributes"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "FragmentSpread",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "RestaurantAttributesFragment"
                                                                            },
                                                                            directives: [{
                                                                                kind: "Directive",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "include"
                                                                                },
                                                                                arguments: [{
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "if"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "Variable",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "shouldGetRestaurantAttributesDesktop"
                                                                                        }
                                                                                    }
                                                                                }]
                                                                            }]
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "subFacilities"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "slug"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "instances"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "title"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "facilityGroups"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "sortOrder"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "propertyFacilityRankingMode"
                                            }
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "slug"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "title"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "summary"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profile"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "spokenLanguages"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }].concat(f)),
                        loc: {
                            start: 0,
                            end: 2131,
                            source: {
                                body: "\n  fragment PropertyFacilitiesBlockFragment on Property {\n    facilities(\n      includeCommonAmenities: true\n      excludeGroups: $facilitiesExcludeGroups\n    ) {\n      id\n      groupId\n      slug\n      instances {\n        title\n        attributes {\n          isOffsite\n          name\n          scheduleEntry {\n            from {\n              hours\n              minutes\n            }\n            to {\n              hours\n              minutes\n            }\n            dayOfWeek\n          }\n          closureScheduleDuringStay {\n            from {\n              year\n              month\n              day\n            }\n            to {\n              year\n              month\n              day\n            }\n          }\n          paymentInfo {\n            chargeMode\n            chargeDetails {\n              price\n              currency\n              frequency\n            }\n          }\n          extendedAttributes {\n            ... on InternetAttributes {\n              coverageArea\n              connectionType\n            }\n            ... on ParkingAttributes {\n              type\n              reservation\n            }\n            ... on SwimmingPoolAttributes {\n              location\n              availabilityType\n              ageRestriction\n              isShared\n              isRooftop\n              isShallowEnd\n              isInfinity\n              isHeated\n              isSaltWater\n              isPoolWithView\n              isPlungePool\n            }\n            ... on BathroomAttributes {\n              bathroomType: type\n              bathroomLocation: location\n              gender\n              numberOfGuestsWithAccess\n            }\n            ... on RestaurantAttributes {\n              ...RestaurantAttributesFragment\n                @include(if: $shouldGetRestaurantAttributesDesktop)\n            }\n          }\n        }\n        subFacilities {\n          slug\n          instances {\n            title\n          }\n        }\n      }\n    }\n    facilityGroups(sortOrder: $propertyFacilityRankingMode) {\n      id\n      slug\n      title\n      summary\n    }\n    profile {\n      spokenLanguages\n    }\n  }\n  \n",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    }.definitions, [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyHighlightList"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "highlightCategories"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "entities"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "icon"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "facilities2"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyMostPopularFacilitiesFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "reviews"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "reviewsCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "questions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "reviewsCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "highlights"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "criteria"
                                    },
                                    value: {
                                        kind: "EnumValue",
                                        value: "popularity"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "includeClosed"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "propertyMostPopularFacilitiesHighlightsIncludeClosed"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "limit"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "propertyMostPopularFacilitiesHighlightsLimit"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "entities"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "BaseFacility"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "groupId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "slug"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "icon"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "instances"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "attributes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "isOffsite"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "closureScheduleDuringStay"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [{
                                                                            kind: "Directive",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "include"
                                                                            },
                                                                            arguments: [{
                                                                                kind: "Argument",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "if"
                                                                                },
                                                                                value: {
                                                                                    kind: "Variable",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "propertyMostPopularFacilitiesHighlightsIncludeClosed"
                                                                                    }
                                                                                }
                                                                            }]
                                                                        }],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "from"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "formattedDate"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "to"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "formattedDate"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "paymentInfo"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "chargeMode"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "extendedAttributes"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "InlineFragment",
                                                                                typeCondition: {
                                                                                    kind: "NamedType",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "ParkingAttributes"
                                                                                    }
                                                                                },
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "type"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }, {
                                                                                kind: "InlineFragment",
                                                                                typeCondition: {
                                                                                    kind: "NamedType",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "InternetAttributes"
                                                                                    }
                                                                                },
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "coverageArea"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "connectionType"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "connectionQuality"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [{
                                                                                            kind: "Directive",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "include"
                                                                                            },
                                                                                            arguments: [{
                                                                                                kind: "Argument",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "if"
                                                                                                },
                                                                                                value: {
                                                                                                    kind: "Variable",
                                                                                                    name: {
                                                                                                        kind: "Name",
                                                                                                        value: "propertyMostPopularFacilitiesHighlightsIncludeWifiSpeed"
                                                                                                    }
                                                                                                }
                                                                                            }]
                                                                                        }],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "speedDownload"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }]
                                                                                        }
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "Meal"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "mealType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "ChildAndBed"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cribsAvailableForFree"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cribsAvailableWithinAgeRange"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cribsWithGuaranteedAvailability"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "RelevantForYourTripFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "relevantForYourTrip"
                                },
                                name: {
                                    kind: "Name",
                                    value: "accommodationHighlights"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "criteria"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "relevantForYourTripInput"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "entities"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isHighlightSearchFilter"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "icon"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "GenericFacilityHighlight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "level"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyHighlightsAccommodationHighlightsFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "propertyHighlightsAccommodationHighlights"
                                },
                                name: {
                                    kind: "Name",
                                    value: "accommodationHighlights"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "criteria"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "propertyHighlightsCriteria"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "entities"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "GenericFacilityHighlight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "level"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "FreeWifiFacilityHighlight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "level"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "WifiFacilityHighlight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "level"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isFree"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "speedDownload"
                                                        },
                                                        arguments: [],
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "propertyHighlightsIncludeWifiSpeed"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "subtitleAttributes"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "ParkingFacilityHighlight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "level"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isFree"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isOnsite"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isPrivate"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "subtitleAttributes"
                                                        },
                                                        arguments: [],
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "shouldGetParkingSubtitleAttributes"
                                                                    }
                                                                }
                                                            }]
                                                        }],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "SwimmingPoolFacilityHighlight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "level"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "allTemporaryClosed"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hasIndoorInstance"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hasOutdoorInstance"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hasHeatedInstance"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hasRooftopInstance"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hasInfinityInstance"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "subtitleAttributes"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "PetsAllowedHighlight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "needsToBeRequested"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "subtitle"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "AreaHighlight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "EntirePropertyHighlight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "BreakfastHighlight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "BeachFacilityHighlight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "subtitleAttributes"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "FinePrintFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "finePrints"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "licenseData"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "numbers"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "phrases"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], {
                        kind: "Document",
                        definitions: (e => {
                            const n = {};
                            return e.filter((e => {
                                if ("FragmentDefinition" !== e.kind) return !0;
                                const t = e.name.value;
                                return !n[t] && (n[t] = !0, !0)
                            }))
                        })([{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "RestaurantsFragment"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Property"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: {
                                        kind: "Name",
                                        value: "restaurants"
                                    },
                                    name: {
                                        kind: "Name",
                                        value: "facilities"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "includeCommonAmenities"
                                        },
                                        value: {
                                            kind: "BooleanValue",
                                            value: !1
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "facilities"
                                        },
                                        value: {
                                            kind: "ListValue",
                                            values: [{
                                                kind: "IntValue",
                                                value: "3"
                                            }]
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "groupId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "slug"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "instances"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "title"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "attributes"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "name"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "extendedAttributes"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "RestaurantAttributes"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "FragmentSpread",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "RestaurantAttributesFragment"
                                                                            },
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }].concat(f)),
                        loc: {
                            start: 0,
                            end: 402,
                            source: {
                                body: "\n  fragment RestaurantsFragment on Property {\n    restaurants: facilities(includeCommonAmenities: false, facilities: [3]) {\n      id\n      groupId\n      slug\n      instances {\n        title\n        attributes {\n          name\n          extendedAttributes {\n            ... on RestaurantAttributes {\n              ...RestaurantAttributesFragment\n            }\n          }\n        }\n      }\n    }\n  }\n  \n",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    }.definitions, [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "FoodFacilitiesFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "accommodationType"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "flags"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "BHFlags"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isSingleTypeProperty"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "foodFacilities"
                                },
                                name: {
                                    kind: "Name",
                                    value: "facilities"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "facilities"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "IntValue",
                                            value: "7"
                                        }, {
                                            kind: "IntValue",
                                            value: "43"
                                        }, {
                                            kind: "IntValue",
                                            value: "72"
                                        }, {
                                            kind: "IntValue",
                                            value: "73"
                                        }, {
                                            kind: "IntValue",
                                            value: "115"
                                        }, {
                                            kind: "IntValue",
                                            value: "116"
                                        }, {
                                            kind: "IntValue",
                                            value: "117"
                                        }, {
                                            kind: "IntValue",
                                            value: "133"
                                        }, {
                                            kind: "IntValue",
                                            value: "135"
                                        }, {
                                            kind: "IntValue",
                                            value: "136"
                                        }, {
                                            kind: "IntValue",
                                            value: "141"
                                        }, {
                                            kind: "IntValue",
                                            value: "145"
                                        }, {
                                            kind: "IntValue",
                                            value: "159"
                                        }, {
                                            kind: "IntValue",
                                            value: "176"
                                        }, {
                                            kind: "IntValue",
                                            value: "177"
                                        }, {
                                            kind: "IntValue",
                                            value: "203"
                                        }, {
                                            kind: "IntValue",
                                            value: "204"
                                        }, {
                                            kind: "IntValue",
                                            value: "205"
                                        }, {
                                            kind: "IntValue",
                                            value: "206"
                                        }, {
                                            kind: "IntValue",
                                            value: "219"
                                        }, {
                                            kind: "IntValue",
                                            value: "224"
                                        }, {
                                            kind: "IntValue",
                                            value: "306"
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "groupId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "slug"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "instances"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "foodAmenities"
                                },
                                name: {
                                    kind: "Name",
                                    value: "commonAmenities"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "group"
                                    },
                                    value: {
                                        kind: "EnumValue",
                                        value: "Food"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "groupId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "slug"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "instances"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "BreakfastFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "meals"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mealType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "attributes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "BreakfastAttributes"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "foodMenu"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "style"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cuisine"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "dietary"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "openingTime"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "startTime"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "endTime"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "drinks"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "foodScore"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "score"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "nReviews"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "photo"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyGalleryFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "propertyGallery"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "limit"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "galleryLimit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "sortOrder"
                                    },
                                    value: {
                                        kind: "EnumValue",
                                        value: "GALLERY_SORT_CRITERIA_WEB"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "main"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "shouldGetGalleryLegacy"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isNew"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecent"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "all"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "shouldGetGalleryLegacy"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "altText"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isNew"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecent"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "originalDimension"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "aspectRatio"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes200"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max200",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes300"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max300",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes500"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max500",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes1024"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max1024x768",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mainPhoto"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "shouldGetGalleryNew"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "altText"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isNew"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecent"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "originalDimension"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "aspectRatio"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "logoPhoto"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "shouldGetGalleryNew"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "altText"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isNew"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecent"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "originalDimension"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "aspectRatio"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "roomPhotos"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "shouldGetGalleryNew"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "roomId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "photos"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "altText"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isNew"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isRecent"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "photoType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "originalDimension"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "aspectRatio"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "width"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "height"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "photoRes200"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "resource"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "size"
                                                            },
                                                            value: {
                                                                kind: "StringValue",
                                                                value: "square60",
                                                                block: !1
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "relativeUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "absoluteUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "photoRes300"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "resource"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "size"
                                                            },
                                                            value: {
                                                                kind: "StringValue",
                                                                value: "max300",
                                                                block: !1
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "relativeUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "absoluteUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "photoRes500"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "resource"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "size"
                                                            },
                                                            value: {
                                                                kind: "StringValue",
                                                                value: "max500",
                                                                block: !1
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "relativeUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "absoluteUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "photoRes1024"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "resource"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "size"
                                                            },
                                                            value: {
                                                                kind: "StringValue",
                                                                value: "max1024x768",
                                                                block: !1
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "relativeUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "absoluteUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mainGalleryPhotos"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "shouldGetGalleryNew"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "altText"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isNew"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecent"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "originalDimension"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "aspectRatio"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes200"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max200",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "relativeUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes300"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max300",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "relativeUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes500"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max500",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "relativeUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes1024"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max1024x768",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "relativeUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photos360"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "shouldGetGallery360Photos"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "altText"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isNew"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecent"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "originalDimension"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "aspectRatio"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes200"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max200",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "relativeUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes300"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max300",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "relativeUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes500"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max500",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "relativeUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes1500"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max1500",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "relativeUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "photoRes3000"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "resource"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "size"
                                                    },
                                                    value: {
                                                        kind: "StringValue",
                                                        value: "max3000",
                                                        block: !1
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "relativeUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "absoluteUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "LegalInfoFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "legalInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "traderInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isTrader"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "legalEntityId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "contactDetails"
                                                },
                                                arguments: [],
                                                directives: [{
                                                    kind: "Directive",
                                                    name: {
                                                        kind: "Name",
                                                        value: "include"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "if"
                                                        },
                                                        value: {
                                                            kind: "Variable",
                                                            name: {
                                                                kind: "Name",
                                                                value: "shouldGetHostDetail"
                                                            }
                                                        }
                                                    }]
                                                }],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "address"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "addressLine1"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "addressLine2"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "countryCode"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "city"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "state"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "postalCode"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "registrationNumber"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "tradeRegisterName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "firstName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "middleName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "lastName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "email"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "phoneNumber"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "companyLegalName"
                                                        },
                                                        arguments: [],
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "shouldGetCompanyLegalName"
                                                                    }
                                                                }
                                                            }]
                                                        }]
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "regulatorySubjectType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyFinePrintAdditionalFeeWarning_PropertyFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "finePrintEntryPoint"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "warnAboutImportantInformation"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "HouseRulesFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "accommodationType"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "policies"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "pets"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "petsAllowed"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "chargeModePets"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "damagePolicy"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "amount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "guest"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "currency"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "property"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "currency"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "standardPhrase"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "houseRules"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "checkinCheckoutTimes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkinTimeRange"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "fromFormatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "untilFormatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkoutTimeRange"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "fromFormatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "untilFormatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "requireCreditCardAndPhotoIdPhrase"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "requireNoticeOfArrivalTimePrase"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "checkinAgeRestriction"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "minCheckinAge"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "minCheckinAgePhrase"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkinAgeRestrictionPhrase"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "groups"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "groupLimit"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "groupLimitPhrase"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "smoking"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "smokingNotAllowedAllRoomsPhrase"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "quietHours"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "timeRange"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "fromFormatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "untilFormatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "quietHoursPhrase"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "parties"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "partiesNotAllowedPhrase"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "curfew"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "timeRange"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "fromFormatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "untilFormatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "curfewPhrase"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "cancellation"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hasDates"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "cityRegulations"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cityRegulationsPhrase"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cityRegulationsPhraseOrNull"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "paymentMethods"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isExclusive"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "acceptedCreditCards"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "nameEn"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hotelAcceptsCashStatus"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isPropertyBookingManagedPayAtProperty"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "scaFlowPropertyUserIp"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "GeniusVipPriceMatchFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "GeniusVipPriceMatchResponse"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "status"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "campaignData"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "endsAtFormatted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "numDaysBeforeCheckIn"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PastUserReservations"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userReservations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "past"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkinDate"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "UserReservations"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Property"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userReservations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "past"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkinDate"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "current"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "reservationId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkinDate"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkoutDate"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "upcoming"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "reservationId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkinDate"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkoutDate"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "daysUntilCheckin"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyReviewFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "PropertyReview"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "totalScore"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "score"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "reviewsCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "scoreOutOf10"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "featuredReviews"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "userId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isAnonymous"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "averageScore"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "completed"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "guestCountryCode"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "guestName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "positiveText"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "negativeText"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "language"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "customerType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "purposeType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "reviewUrl"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "userAvatarUrl"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isTranslatable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasHideCountryFlag"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "roomType"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "description"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "questions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "question"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "question"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "questionId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "scoreSegment"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "reviewsCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "scoreOutOf10"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "customerType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "ChildAndBedPolicyFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ChildAndBedPolicy"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minChildrenAge"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "allowChildren"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "allowCribs"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "allowExtraBeds"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isFCR"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cribsWithGuaranteedAvailability"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "childPolicyRules"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ageFrom"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ageTo"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ageBandId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ruleId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ruleType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "localizedPrice"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "priceType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "priceMode"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], {
                        kind: "Document",
                        definitions: (e => {
                            const n = {};
                            return e.filter((e => {
                                if ("FragmentDefinition" !== e.kind) return !0;
                                const t = e.name.value;
                                return !n[t] && (n[t] = !0, !0)
                            }))
                        })([{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "BasicPropertyDataFields"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BasicPropertyData"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "ufi"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "location"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "city"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "latitude"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "longitude"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "countryCode"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isCityCenter"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedAddress"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedAddressShort"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isOldTown"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "LocationCityTranslation"
                                            },
                                            directives: [{
                                                kind: "Directive",
                                                name: {
                                                    kind: "Name",
                                                    value: "include"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "if"
                                                    },
                                                    value: {
                                                        kind: "Variable",
                                                        name: {
                                                            kind: "Name",
                                                            value: "shouldGetCityTranslation"
                                                        }
                                                    }
                                                }]
                                            }]
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "pageName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "externalReviews"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: {
                                                kind: "Name",
                                                value: "score"
                                            },
                                            name: {
                                                kind: "Name",
                                                value: "totalScore"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            alias: {
                                                kind: "Name",
                                                value: "reviewCount"
                                            },
                                            name: {
                                                kind: "Name",
                                                value: "reviewsCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "reviews"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "showScore"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }].concat([{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "LocationCityTranslation"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Location"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cityTranslation"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "nameIn"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }])),
                        loc: {
                            start: 0,
                            end: 463,
                            source: {
                                body: "\n  fragment BasicPropertyDataFields on BasicPropertyData {\n    id\n    ufi\n    location {\n      city\n      latitude\n      longitude\n      countryCode\n      isCityCenter\n      formattedAddress\n      formattedAddressShort\n      isOldTown\n      ...LocationCityTranslation @include(if: $shouldGetCityTranslation)\n    }\n    name\n    pageName\n    externalReviews {\n      score: totalScore\n      reviewCount: reviewsCount\n    }\n    reviews {\n      showScore\n    }\n  }\n  \n",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    }.definitions, [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyTypeBadge_BasicPropertyDataFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BasicPropertyData"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "accommodationTypeId"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "BHQualityClassificationBannerDesktopFields_BasicPropertyDataFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BasicPropertyData"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "RoomOptionsFields_BasicPropertyDataFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BasicPropertyData"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "rooms"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "roomOptions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "allowCribAndExtraBed"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cribsCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyTypeBadge_BookingHomeFlagsFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BookingHomeFlags"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isBH8"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isSUP"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "StarRatingFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "StarRating"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "value"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "symbol"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tocLink"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "translation"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "showAdditionalInfoIcon"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "caption"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "translation"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "BHQualityClassificationBannerDesktopFields_StarRatingFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "StarRating"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "value"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "symbol"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "HostProfileFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "HostProfile"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "info"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "relativeUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "professionalInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "yearsOnWebsite"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "managedProperties"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "reviews"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "count"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "welcomeMessage"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ownerInfo"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "neighboorhoodInfo"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "familyTips"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "languageCode"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "spokenLanguages"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "SustainabilityFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "PropertySustainability"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isSustainable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "certifications"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "logoUrl"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "issuerDetails"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "value"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "TripTypesHotelPageFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "TripTypesHotelPage"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "nearbySkiLifts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "localizedDistance"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "latitude"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "longitude"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "skiResort"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "resortId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "beaches"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "beachId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photoUrl"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "localizedDistanceFormatted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "reviewScore"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "reviewScoreFormatted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "closestTopBeach"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "beachId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "reviewScore"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "reviewScoreFormatted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyTripTypeLabelsInfoFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "PropertyTripTypeLabelsInfo"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isSkiSeason"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "enabledDestinationLabels"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "enabledPropertyLabels"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "HotelTranslationFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "HotelTranslation"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "description"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "markupDescription"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "finePrint"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "metadata"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "formMetadata"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "form"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "actualLanguage"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "trackedExperiment"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "generatorSignature"
                                                },
                                                arguments: [],
                                                directives: [{
                                                    kind: "Directive",
                                                    name: {
                                                        kind: "Name",
                                                        value: "include"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "if"
                                                        },
                                                        value: {
                                                            kind: "Variable",
                                                            name: {
                                                                kind: "Name",
                                                                value: "shouldQueryDescriptionGeneratorSignature"
                                                            }
                                                        }
                                                    }]
                                                }]
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }])),
                    loc: {
                        start: 0,
                        end: 6841,
                        source: {
                            body: '\n  query PropertyPage(\n    $pagenameDetails: PagenameDetails!\n    $searchConfig: SearchConfigInput!\n    $relevantForYourTripInput: [HighlightCriterion!]!\n    $destination: SearchDestinationInput\n    $travelPurpose: TravelPurpose\n    $propertyHighlightsCriteria: [HighlightCriterion!]!\n    $geniusVipPriceMatchInput: GeniusVipPriceMatchInput\n    $walletAndRewardsBalanceInput: WalletAndRewardsBalanceInput\n    $propertyFacilityRankingMode: FacilityGroupsOrder\n    $selectedFilters: String = ""\n    $galleryLimit: Int = 45\n    $shouldGetGallery: Boolean = false\n    $shouldGetGalleryNew: Boolean = false\n    $shouldGetGalleryLegacy: Boolean = false\n    $shouldGetGallery360Photos: Boolean = false\n    $shouldGetQuestionsAndAnswers: Boolean = false\n    $isRestaurantNameTranslationOn: Boolean = false\n    $isLoggedInUser: Boolean = false\n    $isPropertyFacilitiesBlockOn: Boolean = false\n    $isPropertyMostPopularFacilitiesOn: Boolean = false\n    $isPropertyHighlightListOn: Boolean = false\n    $shouldGetFinePrint: Boolean = false\n    $shouldGetRestaurantAttributesDesktop: Boolean = false\n    $propertyMostPopularFacilitiesHighlightsLimit: Int = 8\n    $shouldGetHighlights: Boolean = false\n    $shouldGetParkingSubtitleAttributes: Boolean = false\n    $propertyMostPopularFacilitiesHighlightsIncludeClosed: Boolean = false\n    $propertyMostPopularFacilitiesHighlightsIncludeWifiSpeed: Boolean = false\n    $propertyHighlightsIncludeWifiSpeed: Boolean = false\n    $shouldGetRoomsInfo: Boolean = false\n    $shouldGetRoomPhotosInfo: Boolean = false\n    $shouldGetHostDetail: Boolean = false\n    $maxPairs: Int! = 20\n    $isPropertyBrandInfoOn: Boolean = false\n    $shouldGetCityTranslation: Boolean = false\n    $shouldGetRoomOptions: Boolean = false\n    $shouldGetCompanyLegalName: Boolean = false\n    $shouldGetFacilitiesCount: Boolean = false\n    $shouldGetRelevantForYourTrip: Boolean = false\n    $facilitiesExcludeGroups: [Int!] = []\n    $shouldQueryDescriptionGeneratorSignature: Boolean = false\n    $shouldGetPastUserReservations: Boolean = false\n    $shouldGetUserReservations: Boolean = false\n  ) {\n    hotelPageByPageName(\n      input: {\n        pageNameDetails: $pagenameDetails\n        searchConfig: $searchConfig\n        selectedFilters: $selectedFilters\n      }\n    ) {\n      ... on HotelPageType {\n        propertyDetails(\n          input: { destination: $destination, travelPurpose: $travelPurpose }\n        ) {\n          id\n          facilitiesCount(excludeGroups: $facilitiesExcludeGroups)\n            @include(if: $shouldGetFacilitiesCount)\n          propertyPageFlags {\n            isPropertyBooked\n          }\n          chainIds\n          brands {\n            chain {\n              id\n            }\n          }\n          ...PropertyBrandInfoFragment @include(if: $isPropertyBrandInfoOn)\n          accommodationType {\n            type\n          }\n          travelProud {\n            isTravelProud\n          }\n          ...PropertyQuestionsAnswersFragment\n            @include(if: $shouldGetQuestionsAndAnswers)\n          walletAndRewardsBalance(input: $walletAndRewardsBalanceInput)\n            @include(if: $isLoggedInUser) {\n            active\n            balance {\n              raw\n              currency\n              prettified\n            }\n          }\n          isTpiExclusiveProperty\n          aiTranslations {\n            name\n          }\n          rooms @include(if: $shouldGetRoomsInfo) {\n            id\n            roomPhotos @include(if: $shouldGetRoomPhotosInfo) {\n              id\n              photoUri\n            }\n            translations {\n              name\n            }\n          }\n          ...PropertyFacilitiesBlockFragment\n            @include(if: $isPropertyFacilitiesBlockOn)\n          ...PropertyHighlightList @include(if: $isPropertyHighlightListOn)\n          ...PropertyMostPopularFacilitiesFields\n            @include(if: $isPropertyMostPopularFacilitiesOn)\n          ...RelevantForYourTripFragment\n            @include(if: $shouldGetRelevantForYourTrip)\n          hotelCurrencyCode\n          ...PropertyHighlightsAccommodationHighlightsFragment\n            @include(if: $shouldGetHighlights)\n          ...FinePrintFragment @include(if: $shouldGetFinePrint)\n          ...RestaurantsFragment\n          ...FoodFacilitiesFragment\n          ...BreakfastFragment\n          preferredValue\n          ...PropertyGalleryFragment @include(if: $shouldGetGallery)\n          ...LegalInfoFragment\n          ...PropertyFinePrintAdditionalFeeWarning_PropertyFields\n          ...HouseRulesFragment\n          geniusVipPriceMatch(input: $geniusVipPriceMatchInput)\n            @include(if: $isLoggedInUser) {\n            ...GeniusVipPriceMatchFragment\n          }\n          ...PastUserReservations @include(if: $shouldGetPastUserReservations)\n          ...UserReservations @include(if: $shouldGetUserReservations)\n        }\n        propertyFullExtended {\n          searchBoxPrefillData {\n            nbRooms\n            nbAdults\n            nbChildren\n            childrenAges\n            location {\n              destType\n              destId\n              destName\n            }\n            dates {\n              checkin\n              checkout\n            }\n          }\n          languagesSpoken {\n            languageCodes\n          }\n          isWorkFriendly\n          propertyReview {\n            ...PropertyReviewFields\n          }\n          childAndBedPolicy {\n            ...ChildAndBedPolicyFields\n          }\n          basicPropertyData {\n            ...BasicPropertyDataFields\n            ...PropertyTypeBadge_BasicPropertyDataFields\n            ...BHQualityClassificationBannerDesktopFields_BasicPropertyDataFields\n            ...RoomOptionsFields_BasicPropertyDataFields\n              @include(if: $shouldGetRoomOptions)\n          }\n          bookingHomeFlags {\n            ...PropertyTypeBadge_BookingHomeFlagsFields\n          }\n          legalInformation {\n            isNonTrader\n          }\n          starRating {\n            ...StarRatingFields\n            ...BHQualityClassificationBannerDesktopFields_StarRatingFields\n          }\n          hostProfile {\n            ...HostProfileFields\n          }\n          sustainability {\n            ...SustainabilityFields\n          }\n          tripTypesHotelPage {\n            ...TripTypesHotelPageFields\n          }\n          tripTypeLabels {\n            ...PropertyTripTypeLabelsInfoFields\n          }\n          requestToBookEligibility {\n            isEnabled\n          }\n          translation {\n            ...HotelTranslationFields\n          }\n          isNewlyOpened\n          licenseDetails {\n            nextToHotelName\n          }\n          inferredLocationScore\n        }\n      }\n      ... on HotelPageNotFound {\n        message\n      }\n    }\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n',
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };
            var S = t("bc26e4f1"),
                _ = t("af1e2b38"),
                y = t("239beb17"),
                b = t("b1f34e95"),
                F = t("9c64ac31");
            const E = /^(\d{4})-(\d{1,2})-(\d{1,2})$/,
                T = e => {
                    const n = E.exec(e);
                    if (n && 4 === n.length) {
                        const e = Number(n[3]),
                            t = Number(n[1]),
                            i = Number(n[2]);
                        if (!isNaN(t) && !isNaN(i) && !isNaN(e)) return new Date(t, i - 1, e, 0, 0, 0)
                    }
                    return null
                };

            function C(e) {
                let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : (() => {
                    const e = new Date;
                    return e.setHours(0, 0, 0, 0), e
                })();
                if (!e) return null;
                const t = function(e) {
                    let n = null;
                    const t = e.get("checkin");
                    let i, a;
                    t && (n = T(t));
                    const r = e.get("checkin_year_month");
                    if (r && -1 !== r.indexOf("-") ? (i = r.split("-")[0], a = r.split("-")[1]) : (i = e.get("checkin_year"), a = e.get("checkin_month")), i && a) {
                        const t = i ? Number(i) : NaN,
                            r = a ? Number(a) : NaN;
                        if (n && (t !== n.getFullYear() || r !== n.getMonth() + 1)) return null;
                        const d = e.get("checkin_monthday"),
                            s = d ? Number(d) : NaN;
                        if (!isNaN(t) && !isNaN(r) && !isNaN(s)) return new Date(t, r - 1, s, 0, 0, 0, 0)
                    }
                    return n || null
                }(e);
                if (!t) return null;
                const i = function(e) {
                    const n = e.get("checkout");
                    if (n) return T(n);
                    let t, i;
                    const a = e.get("checkout_year_month");
                    a && -1 !== a.indexOf("-") ? (t = a.split("-")[0], i = a.split("-")[0]) : (t = e.get("checkout_year"), i = e.get("checkout_month"));
                    const r = e.get("checkout_monthday");
                    if (t && i && r) {
                        const e = t ? Number(t) : NaN,
                            n = i ? Number(i) : NaN,
                            a = r ? Number(r) : NaN;
                        if (!isNaN(e) && !isNaN(n) && !isNaN(a)) return new Date(e, n - 1, a, 0, 0, 0, 0)
                    }
                    return null
                }(e);
                if (!i) return null;
                const a = (0, S.NG)(n, 500),
                    r = (0, S.NG)(t, 45),
                    d = new Date(n);
                return d.setDate(d.getDate() - 1), (0, S.hF)(t, d) || (0, S.wn)(i, t) || (0, S.Sl)(t, i) || (0, S.Sl)(t, a) || (0, S.Sl)(i, r) ? null : {
                    checkin: t,
                    checkout: i
                }
            }
            const I = {
                    DEFAULT: 1,
                    MIN: 1,
                    MAX: 30
                },
                A = {
                    DEFAULT: 2,
                    MIN: 1,
                    MAX: 30
                },
                O = {
                    DEFAULT: 0,
                    MIN: 0,
                    MAX: 10
                },
                D = {
                    DEFAULT: 12,
                    MIN: 0,
                    MAX: 17
                },
                R = (e, n) => {
                    if (null === e) return n.DEFAULT;
                    const t = parseInt(e, 10);
                    return isNaN(t) || t < n.MIN || t > n.MAX ? n.DEFAULT : t
                };
            let x = function(e) {
                    return e.bookingProcess = "bookingProcess", e.needsProfile = "needsProfile", e.popularity = "popularity", e.propertyStrip = "propertyStrip", e.relevantForYourTrip = "relevantForYourTrip", e.roomAmenities = "roomAmenities", e.textToTopic = "textToTopic", e
                }({}),
                P = function(e) {
                    return e.AIRPORT = "AIRPORT", e.CHAIN = "CHAIN", e.CITY = "CITY", e.COUNTRY = "COUNTRY", e.DISTRICT = "DISTRICT", e.HOTEL = "HOTEL", e.IATA = "IATA", e.LANDMARK = "LANDMARK", e.LATLONG = "LATLONG", e.NO_DEST_TYPE = "NO_DEST_TYPE", e.REGION = "REGION", e.SUB_REGION = "SUB_REGION", e.UNRECOGNIZED = "UNRECOGNIZED", e
                }({}),
                L = function(e) {
                    return e.ATTRACTIONS_SR = "ATTRACTIONS_SR", e.BOOKING_DETAIL = "BOOKING_DETAIL", e.BOOKING_PROCESS_1 = "BOOKING_PROCESS_1", e.BOOKING_PROCESS_2 = "BOOKING_PROCESS_2", e.CONFIRMATION_EMAIL = "CONFIRMATION_EMAIL", e.CONFIRMATION_PAGE = "CONFIRMATION_PAGE", e.GENIUS_LANDING_PAGE = "GENIUS_LANDING_PAGE", e.INDEX = "INDEX", e.INVITATION_EMAIL = "INVITATION_EMAIL", e.LANDING_PAGE = "LANDING_PAGE", e.PROPERTY_DISPLAY = "PROPERTY_DISPLAY", e.PROPERTY_PAGE = "PROPERTY_PAGE", e.ROOM_DETAIL = "ROOM_DETAIL", e.ROOM_LIST = "ROOM_LIST", e.SEARCH_RESULTS = "SEARCH_RESULTS", e.WALLET = "WALLET", e
                }({}),
                w = function(e) {
                    return e.TP_BUSINESS = "TP_BUSINESS", e.TP_LEISURE = "TP_LEISURE", e.TP_UNKNOWN = "TP_UNKNOWN", e
                }({});

            function B(e, n) {
                let t, i;
                if ("function" !== typeof e || n && "function" !== typeof n) throw new TypeError("Expected a function");
                return function() {
                    for (var a = arguments.length, r = new Array(a), d = 0; d < a; d++) r[d] = arguments[d];
                    const s = n ? n(...r) : JSON.stringify(r);
                    return t !== s && (i = e(...r), t = s), i
                }
            }

            function U() {
                return Boolean(function() {
                    var e;
                    return null === (e = (0, r.getRequestContext)().getUserIdentity()) || void 0 === e ? void 0 : e.userId
                }())
            }

            function M(e) {
                switch (e.toLowerCase()) {
                    case "city":
                        return P.CITY;
                    case "country":
                        return P.COUNTRY;
                    case "region":
                        return P.REGION;
                    case "district":
                        return P.DISTRICT;
                    case "landmark":
                        return P.LANDMARK;
                    case "airport":
                        return P.AIRPORT;
                    case "hotel":
                        return P.HOTEL;
                    default:
                        return
                }
            }

            function H(e) {
                const n = C((e ? ? (0, r.getRequestContext)().getBasePageUrl()).searchParams);
                return null === n ? {} : {
                    searchConfigDate: {
                        checkin: (0, S.Gr)(n.checkin),
                        checkout: (0, S.Gr)(n.checkout)
                    }
                }
            }

            function V(e) {
                const n = e ? ? (0, r.getRequestContext)().getBasePageUrl(),
                    t = n.searchParams,
                    {
                        nbRooms: i,
                        nbAdults: a,
                        nbChildren: d,
                        childrenAges: s
                    } = function(e) {
                        const n = R(e.get("group_children"), O);
                        let t = e.getAll("age").map((e => R(e, D)));
                        return 0 !== n && 0 === t.length && t.push(D.DEFAULT), 0 === n && t.length > 0 && (t = []), {
                            childrenAges: t,
                            nbChildren: n,
                            nbAdults: R(e.get("group_adults"), A),
                            nbRooms: R(e.get("no_rooms"), I)
                        }
                    }(t);
                return { ...H(n),
                    nbRooms: i,
                    nbAdults: a,
                    nbChildren: d,
                    childrenAges: s
                }
            }

            function G(e) {
                return function(e) {
                    const n = {
                        countryCode: "",
                        pagename: ""
                    };
                    if (!e) return n;
                    const t = decodeURIComponent(e.pathname).match(/^\/hotel\/(\w+)\/([\w\d-]+)\.([\w-]+\.)?html(&|;)?$/);
                    return t && t[1] && t[2] ? {
                        countryCode: t[1],
                        pagename: t[2]
                    } : n
                }(e ? ? (0, r.getRequestContext)().getBasePageUrl())
            }

            function Y(e) {
                const n = e ? ? (0, r.getRequestContext)().getBasePageUrl();
                return {
                    searchInput: {
                        checkin: n.searchParams.get("checkin") || "",
                        checkout: n.searchParams.get("checkout") || "",
                        propertyId: ""
                    },
                    sourcePage: L.PROPERTY_PAGE
                }
            }
            const W = [37, 38, 39, 40, 41];
            const K = B((function() {
                const {
                    isWWW: e,
                    isMDOT: n
                } = (0, _.Z6)(), t = (0, r.getRequestContext)(), i = t.getBasePageUrl(), a = i.searchParams, s = function(e) {
                    if (e) return {
                        destId: Number(e.get("dest_id")) || 0,
                        destType: M(e.get("dest_type") ? ? "")
                    }
                }(a), l = "business" === a.get("sb_travel_purpose") ? w.TP_BUSINESS : w.TP_LEISURE, o = function(e) {
                    const n = e ? ? (0, r.getRequestContext)().getBasePageUrl();
                    let t = "";
                    const i = (0, F.IM)(n.searchParams);
                    return i.length && (t = i.sort().join(b.ge)), t
                }(i), u = (0, y.isFeatureRunning)(y.feature `eWHMZSRAQKSLYUEOMAOEIbIYBAae`), c = e, m = "he" !== t.getLanguage(), k = m, g = d.exp `eWHMcCcCcCSYeJADDbdEcLcDMFae`, p = d.exp `eWHMOOIBTTPeVbOMFcPQfQMdEWe`, f = d.exp `eWHMOOIBTTPeVXXZeGPNeFaOMZJXXT`, h = d.exp `eWHMcCcCcCSYeJTWWCQSFONNVceVbYANZASBcae`, N = d.exp `eWHMeDUfUMVBFUHeSQLYVJVIZdRRT`, S = null === o || void 0 === o ? void 0 : o.includes("hotelfacility=63"), E = n && S && (0, d.trackExperiment)(f) > 0, T = (0, d.trackExperiment)(h) > 0, C = n && (0, d.trackExperiment)(f) > 0, I = n && (0, d.trackExperiment)(f) > 0, A = e || n && 0 === (0, d.trackExperiment)(f), O = e && !(0, d.trackExperiment)(g) || n && !(0, d.trackExperiment)(p), D = m, R = e, P = n || e, L = n && (0, d.trackExperiment)(d.exp `aaOYWPDSFbWHWXFZEVWDAEO`) > 0, B = e, H = [], K = [{
                    criterion: x.relevantForYourTrip,
                    criterionParams: {
                        limit: 15
                    }
                }];
                P && (v() || (0, y.isFeatureRunning)(y.feature `eWHMIZDHUWEEdWLIZSVafMQMLeaQTUDcHSCWGO`)) ? H.push({
                    criterion: x.needsProfile,
                    criterionParams: {
                        limit: 10,
                        onlyCommonAmenities: !1
                    }
                }) : H.push({
                    criterion: x.propertyStrip,
                    criterionParams: {
                        limit: 10,
                        onlyCommonAmenities: !1
                    }
                });
                const $ = !!(0, d.trackExperiment)(d.exp `eWHMeDUfUMVBFUHRbdFIaYYfPHe`) || !!(0, d.trackExperiment)(d.exp `eWHMeDUfUMVBFUPBJEUZSZEaAFZKVBBVYYT`),
                    q = e,
                    Z = q || n && $,
                    j = e || n && $,
                    z = !!(0, d.trackExperiment)(d.exp `eWHMeDUfUMVBFUPCDATBaeSLPYKDcdWXFZEVC`),
                    Q = j && 1 === (0, d.trackExperiment)(N),
                    X = j && 0 === (0, d.trackExperiment)(N),
                    J = v() && (e && (0, d.trackExperiment)(g) > 0 || n && (0, d.trackExperiment)(p) > 0),
                    ee = (0, y.isFeatureRunning)(y.feature `ADDbddHUYbOMFcHYfYUQdLZGSRLJYIPNXNWTNDbIYBAae`),
                    ne = (0, y.isFeatureRunning)(y.feature `bQIJSCNEUZFSfCbTZIAEKNdQZfRHe`),
                    te = n && (0, y.isFeatureRunning)(y.feature `aaMRNRXaVeVXPPRWPHDDPCfTJBGFBfZADRO`) && (0, d.trackExperiment)(d.exp `aaOYWPFLFacbYDJQDJBPEYKe`) > 0,
                    ie = e && U() && (0, d.trackExperiment)(d.exp `eWHMAERBfISWdLPXPRQIKdFHaO`) > 0,
                    ae = n && U() && (0, d.trackExperiment)(d.exp `eWHMOMaOVWbHFcEREHGC`) > 0;
                return {
                    pagenameDetails: G(i),
                    searchConfig: V(i),
                    selectedFilters: o,
                    propertyHighlightsCriteria: H,
                    galleryLimit: T ? 500 : 45,
                    shouldGetGallery: j,
                    shouldGetGalleryNew: Q,
                    shouldGetGalleryLegacy: X,
                    shouldGetGallery360Photos: z,
                    geniusVipPriceMatchInput: Y(i),
                    isPropertyFacilitiesBlockOn: E,
                    isRestaurantNameTranslationOn: u,
                    isPropertyHighlightListOn: J,
                    shouldGetRelevantForYourTrip: I,
                    relevantForYourTripInput: K,
                    isPropertyMostPopularFacilitiesOn: A,
                    propertyMostPopularFacilitiesHighlightsLimit: 10,
                    propertyMostPopularFacilitiesHighlightsIncludeClosed: c,
                    propertyMostPopularFacilitiesHighlightsIncludeWifiSpeed: k,
                    shouldGetHighlights: O,
                    propertyHighlightsIncludeWifiSpeed: D,
                    shouldGetParkingSubtitleAttributes: !1,
                    shouldGetRestaurantAttributesDesktop: R,
                    shouldGetFinePrint: !0,
                    shouldGetRoomsInfo: Z,
                    shouldGetRoomOptions: te,
                    shouldGetRoomPhotosInfo: q,
                    shouldGetHostDetail: !0,
                    destination: s,
                    travelPurpose: l,
                    shouldGetQuestionsAndAnswers: !Boolean(RegExp(/booking.cn/).exec((0, r.getRequestContext)().getBasePageUrl().hostname)),
                    isLoggedInUser: U(),
                    maxPairs: 20,
                    isPropertyBrandInfoOn: B,
                    shouldGetCityTranslation: L,
                    shouldGetCompanyLegalName: ne,
                    shouldGetFacilitiesCount: C,
                    facilitiesExcludeGroups: W,
                    shouldQueryDescriptionGeneratorSignature: ee,
                    shouldGetPastUserReservations: ie,
                    shouldGetUserReservations: ae
                }
            }), (() => (0, r.getRequestContext)().toJSONString()));

            function $() {
                const e = 1e4;
                return g() || k() ? {
                    "X-Booking-Timeout-Ms": e,
                    "X-Booking-Timeout-Budget-Ms": e,
                    "x-envoy-upstream-rq-timeout-ms": e
                } : {
                    "X-Booking-Timeout-Ms": 4e3,
                    "x-envoy-upstream-rq-timeout-ms": 4e3
                }
            }
            var q = t("41c6c66e");
            const Z = () => g() || k(),
                j = B((e => function() {
                    if (Z()) {
                        for (var e = arguments.length, n = new Array(e), t = 0; t < e; t++) n[t] = arguments[t];
                        const i = [p() ? "[Server Warning]" : "[JS Warning]", ...n];
                        console.warn.apply(void 0, i)
                    }
                }("Property does not exist.", {
                    url: e
                }))),
                z = B(((e, n) => (0, q.reportWarning)(`Failed to fetch data from the Property query \n URL: ${e} \n Error: ${n}`)));
            B(((e, n) => (0, q.reportWarning)(`Failed to fetch data from the Property questions \n URL: ${e} \n Error: ${n}`)));

            function Q(e) {
                let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                const t = (0, r.getRequestContext)().getBasePageUrl(),
                    i = K(),
                    d = function(e) {
                        return !e.pagenameDetails.countryCode || !e.pagenameDetails.pagename || !e.searchConfig
                    }(i),
                    s = p() ? "network-only" : "cache-only";
                if (!n) {
                    const {
                        error: n,
                        loading: r,
                        data: u
                    } = function(e) {
                        const n = { ...h,
                            ...e
                        };
                        return a.useQuery(N, n)
                    }({
                        skip: d,
                        variables: i,
                        errorPolicy: "all",
                        fetchPolicy: s,
                        nextFetchPolicy: "cache-only",
                        context: {
                            headers: $()
                        }
                    });
                    if (n && z(t.toString(), n.message), u) {
                        var l, o;
                        if ("HotelPageType" === (null === u || void 0 === u || null === (l = u.hotelPageByPageName) || void 0 === l ? void 0 : l.__typename)) return {
                            data: e(u.hotelPageByPageName),
                            loading: r,
                            error: n
                        };
                        if ("HotelPageNotFound" === (null === u || void 0 === u || null === (o = u.hotelPageByPageName) || void 0 === o ? void 0 : o.__typename)) return j(t.toString()), {
                            loading: r,
                            error: n
                        }
                    }
                    return {
                        loading: r,
                        error: n
                    }
                }
                const {
                    error: u,
                    data: c
                } = function(e) {
                    const n = { ...h,
                        ...e
                    };
                    return a.useSuspenseQuery(N, n)
                }({
                    skip: d,
                    variables: i,
                    errorPolicy: "all",
                    context: {
                        headers: $()
                    }
                });
                if (u && z(t.toString(), u.message), c) {
                    var m, v;
                    if ("HotelPageType" === (null === c || void 0 === c || null === (m = c.hotelPageByPageName) || void 0 === m ? void 0 : m.__typename)) return {
                        data: e(c.hotelPageByPageName),
                        loading: !1,
                        error: u
                    };
                    if ("HotelPageNotFound" === (null === c || void 0 === c || null === (v = c.hotelPageByPageName) || void 0 === v ? void 0 : v.__typename)) return j(t.toString()), {
                        loading: !1,
                        error: u
                    }
                }
                return {
                    loading: !1,
                    error: u
                }
            }
            var X = t("24e040c9"),
                J = t.n(X),
                ee = t("43a4d203"),
                ne = t("15199e50"),
                te = t("35bd00ce");
            const ie = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "CheckinCheckoutDates"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "checkin"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "checkout"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 61,
                    source: {
                        body: "\n  query CheckinCheckoutDates {\n    checkin\n    checkout\n  }\n",
                        name: "GraphQL request",
                        locationOffset: {
                            line: 1,
                            column: 1
                        }
                    }
                }
            };
            var ae = t("4f475142");
            const re = e => {
                if ("undefined" === typeof window) {
                    const n = new Date,
                        t = new Date;
                    t.setDate(t.getDate() + 1);
                    const i = {
                        checkin: (0, ae.Gr)(n),
                        checkout: (0, ae.Gr)(t)
                    };
                    return e.writeQuery({
                        query: ie,
                        data: i
                    }), i
                }
                return e.readQuery({
                    query: ie
                })
            };
            var de = t("77684756"),
                se = t("6ae86058"),
                le = t("b62ab38d");
            const oe = {
                    DEFAULT: 1,
                    MIN: 1,
                    MAX: 30
                },
                ue = {
                    DEFAULT: 2,
                    MIN: 1,
                    MAX: 30
                },
                ce = {
                    DEFAULT: 0,
                    MIN: 0,
                    MAX: 10
                },
                me = {
                    DEFAULT: 0,
                    MIN: 0,
                    MAX: 17
                },
                ve = {
                    nbRooms: oe.DEFAULT,
                    nbAdults: ue.DEFAULT,
                    nbChildren: ce.DEFAULT,
                    childrenAges: []
                },
                ke = (e, n) => {
                    if (null === e) return null;
                    const t = parseInt(e, 10);
                    return isNaN(t) || t < n.MIN || t > n.MAX ? null : t
                };

            function ge(e) {
                const n = {},
                    t = ke(e.get("group_children"), ce);
                null !== t && (n.nbChildren = t, n.childrenAges = e.getAll("age").map((e => {
                    const n = ke(e, me);
                    return null === n ? null : n
                })).filter((e => null !== e)));
                const i = ke(e.get("no_rooms"), oe);
                null !== i && (n.nbRooms = i);
                const a = ke(e.get("group_adults"), ue);
                return null !== a && (n.nbAdults = a), n
            }
            var pe = t("67934118");
            const fe = /us|ca|jp|bt|kh|cn|hk|in|id|il|jo|la|mo|mm|np|pk|ph|sa|sg|kr|sy|tw|th|ae|ye|as|au|gu|mh|nz|ws|um|bw|et|ke|mz|za|zw|ag|ar|bs|bz|br|co|dm|do|sv|gt|hn|jm|mx|ni|pa|py|pe|pr|tt|vi|ve|pt|ie|mt/;
            var he = t("faeb41f3"),
                Ne = t("8ded1df4"),
                Se = t("2be56023"),
                _e = t("284975bf"),
                ye = t("768370ae"),
                be = t("cdfdb49e");

            function Fe(e) {
                const n = {};
                return ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"].forEach(((t, i) => {
                    n[t] = e.trans((0, m.t)("weekday", `${i+1}`, "shortest"))
                })), n
            }
            const Ee = e => {
                let {
                    isEntireHomeSearchEnabled: n,
                    entireHomeSearchLabel: t,
                    pageUrl: i,
                    i18n: a
                } = e;
                const d = {
                    checked: "1" === i.searchParams.get("sb_entire_place"),
                    shown: n
                };
                return t && (0, r.getRequestContext)().getSiteType() === ee.SiteType.WWW && (d.label = a.trans((0, m.t)(t)), d.labelLong = a.trans((0, m.t)(t))), d
            };
            var Te = t("dfbd7c7c");
            const Ce = {},
                Ie = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "rankedItemsSearchBoxIndex"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "RankedItemInput"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "rankedItems"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "input"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "placements"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "shelves"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "components"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "elements"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "promo_vertical"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "exposure_product_id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "is_eligible"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 322,
                        source: {
                            body: "\n  query rankedItemsSearchBoxIndex($input: RankedItemInput!) {\n    rankedItems(input: $input) {\n      placements {\n        shelves {\n          components {\n            elements {\n              promo_vertical\n              exposure_product_id\n              is_eligible\n            }\n          }\n        }\n      }\n    }\n  }\n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };

            function Ae(e) {
                const n = { ...Ce,
                    ...e
                };
                return a.useQuery(Ie, n)
            }

            function Oe(e) {
                const n = { ...Ce,
                    ...e
                };
                return a.useSuspenseQuery(Ie, n)
            }
            var De = t("00d29d3a");
            class Re {
                constructor() {
                    (0, De.Z)(this, "FRONTEND_TAG", "frontend"), this.rankedItemInput = {
                        context: {
                            api_version: "0.0",
                            page: "DEFAULT_PAGE",
                            platform: Te._D.www,
                            language: "en-us",
                            currency: "eur",
                            affiliate_id: 0,
                            placement_names: [],
                            track_identifier: {
                                uvi_type: Te.aJ.unknown,
                                uvi: "0"
                            },
                            user_data: {},
                            user_location: {}
                        }
                    }
                }
                apiVersion(e) {
                    return this.rankedItemInput.context.api_version = e, this
                }
                page(e) {
                    return this.rankedItemInput.context.page = e, this
                }
                platform(e) {
                    if (!e) return this;
                    let n;
                    switch (e) {
                        case Te._D.www:
                            n = Te._D.www;
                            break;
                        case Te._D.mdot:
                            n = Te._D.mdot;
                            break;
                        case Te._D.emk:
                            n = Te._D.emk;
                            break;
                        default:
                            n = Te._D.www
                    }
                    return this.rankedItemInput.context.platform = n, this
                }
                language(e) {
                    return e && (this.rankedItemInput.context.language = e), this
                }
                currency(e) {
                    return e && "hotel_currency" !== e && (this.rankedItemInput.context.currency = e.toLowerCase()), this
                }
                affiliateId(e) {
                    return e && (this.rankedItemInput.context.affiliate_id = e), this
                }
                placements(e) {
                    return this.rankedItemInput.context.placement_names.push(...e), this
                }
                trackIdentifier(e, n) {
                    if (e) {
                        const n = e.find((e => e.type === this.FRONTEND_TAG));
                        if (n) return this.rankedItemInput.context.track_identifier = {
                            uvi_type: this.convertUviType(n.type),
                            uvi: n.uvi ? n.uvi : ""
                        }, this
                    }
                    if (!n) return this;
                    const t = n.find((e => e.type === this.FRONTEND_TAG));
                    return t ? (this.rankedItemInput.context.track_identifier = {
                        uvi_type: this.convertUviType(t.type),
                        uvi: t.id ? t.id : ""
                    }, this) : this
                }
                authLevel(e) {
                    return e && (this.rankedItemInput.context.user_data = {
                        auth_level: e
                    }), this
                }
                userLocation(e) {
                    const n = d.exp `aXTfOFJZMYeKTcaWQOcTEYOVTKe`;
                    if ((0, d.trackExperiment)(n)) {
                        var t;
                        const n = (0, r.getRequestContext)().getVisitorUfi() || (null === (t = (0, r.getRequestContext)().toGRORequestContext().localization) || void 0 === t ? void 0 : t.guessedUfi);
                        this.rankedItemInput.context.user_location = {
                            cc1: e,
                            ufi: n
                        }
                    } else this.rankedItemInput.context.user_location = {
                        cc1: e
                    };
                    return this
                }
                build() {
                    return this.rankedItemInput
                }
                convertUviType(e) {
                    switch (e) {
                        case "frontend":
                            return Te.aJ.frontend;
                        case "device":
                            return Te.aJ.device;
                        case "email":
                            return Te.aJ.email;
                        default:
                            return Te.aJ.unknown
                    }
                }
            }
            var xe = t("524291ea");
            let Pe = function(e) {
                return e.BOOKING_HOTEL_INDEX = "BOOKING_HOTEL_INDEX", e.BOOKING_HOTEL_CITY_INDEX = "BOOKING_HOTEL_CITY_INDEX", e.BOOKING_HOTEL_REGION_INDEX = "BOOKING_HOTEL_REGION_INDEX", e.BOOKING_HOTEL_PLACE_OF_INTEREST_INDEX = "BOOKING_HOTEL_PLACE_OF_INTEREST_INDEX", e.BOOKING_HOTEL_AIRPORT_INDEX = "BOOKING_HOTEL_AIRPORT_INDEX", e.BOOKING_HOTEL_DISTRICT_INDEX = "BOOKING_HOTEL_DISTRICT_INDEX", e.BOOKING_HOTEL_COUNTRY_INDEX = "BOOKING_HOTEL_COUNTRY_INDEX", e.ACCOMMODATION__PROPERTY = "ACCOMMODATION__PROPERTY", e
            }({});

            function Le(e, n) {
                var t;
                let i;
                if ("landingpage" === e) {
                    const e = (0, xe.b)(n);
                    i = null === e || void 0 === e ? void 0 : e.destType
                }
                switch ("index" === e && (i = "INDEX"), "propertypage" === e && (i = "PROPERTYPAGE"), null === (t = i) || void 0 === t ? void 0 : t.toUpperCase()) {
                    case "INDEX":
                        i = Pe.BOOKING_HOTEL_INDEX;
                        break;
                    case "CITY":
                        i = Pe.BOOKING_HOTEL_CITY_INDEX;
                        break;
                    case "REGION":
                        i = Pe.BOOKING_HOTEL_REGION_INDEX;
                        break;
                    case "PLACE_OF_INTEREST":
                        i = Pe.BOOKING_HOTEL_PLACE_OF_INTEREST_INDEX;
                        break;
                    case "AIRPORT":
                        i = Pe.BOOKING_HOTEL_AIRPORT_INDEX;
                        break;
                    case "DISTRICT":
                        i = Pe.BOOKING_HOTEL_DISTRICT_INDEX;
                        break;
                    case "COUNTRY":
                        i = Pe.BOOKING_HOTEL_COUNTRY_INDEX;
                        break;
                    case "PROPERTYPAGE":
                        i = Pe.ACCOMMODATION__PROPERTY
                }
                return i
            }

            function we(e, n) {
                return "BOOKING_HOTEL_INDEX" === Le(e, n)
            }
            const Be = {},
                Ue = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "SearchBoxAffiliateCustomizations"
                        },
                        variableDefinitions: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "brandedPlatform"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "components"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "landingSearchbox"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "backgroundColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "borderColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "buttonColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "buttonBorderColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "buttonBackgroundHoverColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "buttonTextColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "buttonTextHoverColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "inputBorderColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "fontColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "mobileButtonColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "mobileButtonFontColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "mobileBackgroundColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "mobileFontColor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 497,
                        source: {
                            body: "\n  query SearchBoxAffiliateCustomizations {\n    brandedPlatform {\n      components {\n        landingSearchbox {\n          backgroundColor\n          borderColor\n          buttonColor\n          buttonBorderColor\n          buttonBackgroundHoverColor\n          buttonTextColor\n          buttonTextHoverColor\n          inputBorderColor\n          fontColor\n          mobileButtonColor\n          mobileButtonFontColor\n          mobileBackgroundColor\n          mobileFontColor\n        }\n      }\n    }\n  }\n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };

            function Me(e) {
                const n = { ...Be,
                    ...e
                };
                return a.useQuery(Ue, n)
            }

            function He(e) {
                const n = { ...Be,
                    ...e
                };
                return a.useSuspenseQuery(Ue, n)
            }
            const Ve = {},
                Ge = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "searchBoxContentIndex"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "SearchBoxRenderInput"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "searchBoxContent"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "input"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "previousSearches"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "childrenAges"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "prefillData"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbRooms"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbAdults"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbChildren"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "childrenAges"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "location"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "destType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "destId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "destName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "dates"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "checkin"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "checkout"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "options"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "entireHomesSearchEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "travellingForWorkSearchEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "dateFlexibilityOptions"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "enabled"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "guessedLocation"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "destId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "destType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "destName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "maxLengthOfStayInDays"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "landingPageThemeId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 705,
                        source: {
                            body: "\n  query searchBoxContentIndex($input: SearchBoxRenderInput!) {\n    searchBoxContent(input: $input) {\n      previousSearches {\n        childrenAges\n      }\n      prefillData {\n        nbRooms\n        nbAdults\n        nbChildren\n        childrenAges\n        location {\n          destType\n          destId\n          destName\n        }\n        dates {\n          checkin\n          checkout\n        }\n      }\n      options {\n        entireHomesSearchEnabled\n        travellingForWorkSearchEnabled\n        dateFlexibilityOptions {\n          enabled\n        }\n      }\n      guessedLocation {\n        destId\n        destType\n        destName\n      }\n      maxLengthOfStayInDays\n      landingPageThemeId\n    }\n  }\n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };

            function Ye(e) {
                const n = { ...Ve,
                    ...e
                };
                return a.useQuery(Ge, n)
            }

            function We(e) {
                const n = { ...Ve,
                    ...e
                };
                return a.useSuspenseQuery(Ge, n)
            }
            const Ke = {},
                $e = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "searchBoxContentPropertyPage"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "sbInput"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "SearchBoxRenderInput"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "searchBoxContent"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "sbInput"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "options"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "entireHomesSearchEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "travellingForWorkSearchEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "maxLengthOfStayInDays"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "previousSearches"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "childrenAges"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 301,
                        source: {
                            body: "\n  query searchBoxContentPropertyPage($sbInput: SearchBoxRenderInput!) {\n    searchBoxContent(input: $sbInput) {\n      options {\n        entireHomesSearchEnabled\n        travellingForWorkSearchEnabled\n      }\n      maxLengthOfStayInDays\n      previousSearches {\n        childrenAges\n      }\n    }\n  }\n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };

            function qe(e) {
                const n = { ...Ke,
                    ...e
                };
                return a.useQuery($e, n)
            }

            function Ze(e) {
                const n = { ...Ke,
                    ...e
                };
                return a.useSuspenseQuery($e, n)
            }
            const je = {},
                ze = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "SearchboxDealsCampaign"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "DealsCampaignInput"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "campaign"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "input"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "checkInDate"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "checkOutDate"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "searchFilter"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 168,
                        source: {
                            body: "\n  query SearchboxDealsCampaign($input: DealsCampaignInput!) {\n    campaign(input: $input) {\n      id\n      checkInDate\n      checkOutDate\n      searchFilter\n    }\n  }\n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };

            function Qe(e) {
                const n = { ...je,
                    ...e
                };
                return a.useQuery(ze, n)
            }

            function Xe(e) {
                const n = { ...je,
                    ...e
                };
                return a.useSuspenseQuery(ze, n)
            }
            const Je = new class {
                    constructor() {
                        this.entities = []
                    }
                    saveEntities(e) {
                        this.entities = [...e || []]
                    }
                    getEntities() {
                        let {
                            type: e
                        } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                        return e ? this.entities.filter((n => n.type === e)) : this.entities
                    }
                    saveUid(e) {
                        this.uid = e || void 0
                    }
                    getUid() {
                        return this.uid
                    }
                },
                en = "filter",
                nn = "sorter",
                tn = {
                    [nn]: Te.YK.STRUCTURED_SORTER,
                    [en]: Te.YK.STRUCTURED_FILTER
                };
            const an = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "FilterOption"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Option"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "optionId"
                            },
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "count"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "selected"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "urlId"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "source"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "field"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "additionalLabel"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "text"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "translationTag"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "translation"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "value"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "text"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "translationTag"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "translation"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "starRating"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "value"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "symbol"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "caption"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "translation"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "showAdditionalInfoIcon"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                rn = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "FullSearchFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchQueryOutput"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "banners"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "Banner"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "breadcrumbs"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "SearchResultsBreadcrumb"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "SearchResultsBreadcrumb"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "LandingPageBreadcrumb"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "LandingPageBreadcrumb"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "carousels"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "Carousel"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "destinationLocation"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "DestinationLocation"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "entireHomesSearchEnabled"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "dateFlexibilityOptions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "enabled"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "flexibleDatesConfig"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "broadDatesCalendar"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkinMonths"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "los"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "startWeekdays"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "losType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "dateFlexUseCase"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "dateRangeCalendar"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "flexWindow"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkin"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkout"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "filters"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "FilterData"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "filtersTrackOnView"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "experimentHash"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "value"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "appliedFilterOptions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "FilterOption"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "recommendedFilterOptions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "FilterOption"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "pagination"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nbResultsPerPage"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nbResultsTotal"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tripTypes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "TripTypesData"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "results"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ReviewSummary"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "BasicPropertyData"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "PropertyUspBadges"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "MatchingUnitConfigurations"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "PropertyBlocks"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "BookerExperienceData"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "TopPhotos"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "CardLabels"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "PersonalizedPhotos"
                                        },
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "generatedPropertyTitle"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "descriptionSummary"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "priceDisplayInfoIrene"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "PriceDisplayInfoIrene"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "licenseDetails"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nextToHotelName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isTpiExclusiveProperty"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "propertyCribsAvailabilityLabel"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mlBookingHomeTags"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "trackOnView"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "type"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "experimentHash"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "value"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "searchMeta"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "SearchMetadata"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "sorters"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "option"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "SorterFields"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "zeroResultsSection"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ZeroResultsSection"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "rocketmilesSearchUuid"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "previousSearches"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "PreviousSearches"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "merchComponents"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "MerchRegionIrene"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "wishlistData"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "numProperties"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "seoThemes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "caption"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "gridViewPreference"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "advancedSearchWidget"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "legalDisclaimer"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "description"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "placeholder"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ctaText"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "helperText"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "visualFiltersGroups"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "VisualFiltersGroup"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }].concat([{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "ReviewSummary"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchResultProperty"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "personalizedSummary"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "summary"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "reviewsCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "segment"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "languageCode"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "BasicPropertyData"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchResultProperty"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "acceptsWalletCredit"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "basicPropertyData"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "accommodationTypeId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isTestProperty"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "location"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "address"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "city"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "countryCode"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "pageName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ufi"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photos"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "main"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "highResUrl"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "relativeUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "lowResUrl"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "relativeUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "highResJpegUrl"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "relativeUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "lowResJpegUrl"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "relativeUrl"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "tags"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: {
                                            kind: "Name",
                                            value: "reviewScore"
                                        },
                                        name: {
                                            kind: "Name",
                                            value: "reviews"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "totalScore"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "reviewCount"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "reviewsCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "totalScoreTextTag"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translation"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "showScore"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "secondaryScore"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "secondaryTextTag"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translation"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "showSecondaryScore"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: {
                                            kind: "Name",
                                            value: "externalReviewScore"
                                        },
                                        name: {
                                            kind: "Name",
                                            value: "externalReviews"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "totalScore"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "reviewCount"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "reviewsCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "showScore"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "totalScoreTextTag"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translation"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "starRating"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "value"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "symbol"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "caption"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translation"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "tocLink"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translation"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "showAdditionalInfoIcon"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isClosed"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "paymentConfig"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "installments"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "minPriceFormatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "maxAcceptCount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "badges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "caption"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "translation"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "closedFacilities"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "startDate"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "endDate"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "customBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "showSkiToDoor"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "showBhTravelCreditBadge"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "showOnlineCheckinBadge"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "description"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "translationTag"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "translation"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "geniusInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "benefitsCommunication"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "header"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "items"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "geniusBenefits"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "geniusBenefitsData"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hotelCardHasFreeBreakfast"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hotelCardHasFreeRoomUpgrade"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sortedBenefits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "showGeniusRateBadge"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "location"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayLocation"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mainDistance"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mainDistanceDescription"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "publicTransportDistanceDescription"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "skiLiftDistance"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "beachDistance"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nearbyBeachNames"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "beachWalkingTime"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "geoDistanceMeters"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isCentrallyLocated"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isWithinBestLocationScoreArea"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "popularFreeDistrictName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nearbyUsNaturalParkText"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "mealPlanIncluded"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "mealPlanType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "persuasion"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "autoextended"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "geniusRateAvailable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "highlighted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "preferred"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "preferredPlus"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "showNativeAdLabel"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nativeAdId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nativeAdsCpc"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nativeAdsTracking"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sponsoredAdsData"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isDsaCompliant"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "legalEntityName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "designType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "policies"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "showFreeCancellation"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "showNoPrepayment"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "showPetsAllowedForFree"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "enableJapaneseUsersSpecialCase"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ribbon"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ribbonType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "recommendedDate"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "checkin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "checkout"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lengthOfStay"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "showGeniusLoginMessage"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hostTraderLabel"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "soldOutInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSoldOut"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "messages"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "alternativeDatesMessages"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "nbWishlists"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "nonMatchingFlexibleFilterOptions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "label"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "visibilityBoosterEnabled"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "showAdLabel"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isNewlyOpened"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "propertySustainability"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSustainable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "certifications"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "seoThemes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "caption"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "relocationMode"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "distanceToCityCenterKm"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "distanceToCityCenterMiles"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "distanceToOriginalHotelKm"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "distanceToOriginalHotelMiles"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "phoneNumber"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bundleRatesAvailable"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "Banner"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Banner"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isDismissible"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "showAfterDismissedDuration"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "position"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "requestAlternativeDates"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "merchId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "imageUrl"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "paragraphs"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "metadata"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "key"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "value"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "pendingReviewInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "propertyPhoto"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "lowResUrl"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "relativeUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "lowResJpegUrl"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "relativeUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "propertyName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "urlAccessCode"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "nbDeals"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "primaryAction"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "action"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "context"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "key"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "value"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "secondaryAction"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "action"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "context"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "key"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "value"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "iconName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "flexibleFilterOptions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "optionId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "filterName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "trackOnView"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "experimentHash"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "value"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "dateFlexQueryOptions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "action"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "context"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "key"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "value"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isApplied"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "Carousel"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Carousel"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "aggregatedCountsByFilterId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "carouselId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "position"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "contentType"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hotelId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "soldoutProperties"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "priority"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "themeId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "slides"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "captionText"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photoUrl"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subtitle"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "action"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "context"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "key"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "value"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "DestinationLocation"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DestinationLocation"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "inName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ufi"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], {
                        kind: "Document",
                        definitions: (e => {
                            const n = {};
                            return e.filter((e => {
                                if ("FragmentDefinition" !== e.kind) return !0;
                                const t = e.name.value;
                                return !n[t] && (n[t] = !0, !0)
                            }))
                        })([{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "FilterData"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Filter"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "trackOnView"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "type"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "experimentHash"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "value"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "trackOnClick"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "type"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "experimentHash"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "value"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "field"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "category"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "filterStyle"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "text"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "translationTag"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "translation"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subtitle"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "options"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "parentId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "genericId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnView"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnClick"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnSelect"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnDeSelect"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnViewPopular"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnClickPopular"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnSelectPopular"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnDeSelectPopular"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "FilterOption"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "filterLayout"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isCollapsable"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "collapsedCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stepperOptions"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "min"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "max"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "default"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "selected"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "title"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "text"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "translationTag"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "translation"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "field"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "labels"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "text"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "translationTag"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "translation"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnView"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnClick"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnSelect"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnDeSelect"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnClickDecrease"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnClickIncrease"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnDecrease"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "trackOnIncrease"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "experimentHash"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "sliderOptions"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "min"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "max"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "minSelected"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "maxSelected"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "minPriceStep"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "minSelectedFormatted"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "currency"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "histogram"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "selectedRange"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "translation"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "distanceToPoiData"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "options"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "text"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isDefault"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "poiNotFound"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "poiPlaceholder"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "poiHelper"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isSelected"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "selectedOptionValue"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "selectedPlaceId"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "numValue"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "stringValue"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "selectedPoiType"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "destType"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "source"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "selectedPoiText"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "selectedPoiLatitude"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "selectedPoiLongitude"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }].concat(an)),
                        loc: {
                            start: 0,
                            end: 2708,
                            source: {
                                body: "\n  fragment FilterData on Filter {\n    trackOnView {\n      type\n      experimentHash\n      value\n    }\n    trackOnClick {\n      type\n      experimentHash\n      value\n    }\n    name\n    field\n    category\n    filterStyle\n    title {\n      text\n      translationTag {\n        translation\n      }\n    }\n    subtitle\n    options {\n      parentId\n      genericId\n      trackOnView {\n        type\n        experimentHash\n        value\n      }\n      trackOnClick {\n        type\n        experimentHash\n        value\n      }\n      trackOnSelect {\n        type\n        experimentHash\n        value\n      }\n      trackOnDeSelect {\n        type\n        experimentHash\n        value\n      }\n      trackOnViewPopular {\n        type\n        experimentHash\n        value\n      }\n      trackOnClickPopular {\n        type\n        experimentHash\n        value\n      }\n      trackOnSelectPopular {\n        type\n        experimentHash\n        value\n      }\n      trackOnDeSelectPopular {\n        type\n        experimentHash\n        value\n      }\n      ...FilterOption\n    }\n    filterLayout {\n      isCollapsable\n      collapsedCount\n    }\n    stepperOptions {\n      min\n      max\n      default\n      selected\n      title {\n        text\n        translationTag {\n          translation\n        }\n      }\n      field\n      labels {\n        text\n        translationTag {\n          translation\n        }\n      }\n      trackOnView {\n        type\n        experimentHash\n        value\n      }\n      trackOnClick {\n        type\n        experimentHash\n        value\n      }\n      trackOnSelect {\n        type\n        experimentHash\n        value\n      }\n      trackOnDeSelect {\n        type\n        experimentHash\n        value\n      }\n      trackOnClickDecrease {\n        type\n        experimentHash\n        value\n      }\n      trackOnClickIncrease {\n        type\n        experimentHash\n        value\n      }\n      trackOnDecrease {\n        type\n        experimentHash\n        value\n      }\n      trackOnIncrease {\n        type\n        experimentHash\n        value\n      }\n    }\n    sliderOptions {\n      min\n      max\n      minSelected\n      maxSelected\n      minPriceStep\n      minSelectedFormatted\n      currency\n      histogram\n      selectedRange {\n        translation\n      }\n    }\n    # mpswe_www_distance_to_poi_filter\n    distanceToPoiData {\n      options {\n        text\n        value\n        isDefault\n      }\n      poiNotFound\n      poiPlaceholder\n      poiHelper\n      isSelected\n      selectedOptionValue\n      selectedPlaceId {\n        numValue\n        stringValue\n      }\n      selectedPoiType {\n        destType\n        source\n      }\n      selectedPoiText\n      selectedPoiLatitude\n      selectedPoiLongitude\n    }\n  }\n  \n",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    }.definitions, an, [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "LandingPageBreadcrumb"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "LandingPageBreadcrumb"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "destType"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "urlParts"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "MatchingUnitConfigurations"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchResultProperty"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "matchingUnitConfigurations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "commonConfiguration"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unitId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "bedConfigurations"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "beds"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "count"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "type"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "nbAllBeds"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbAllBeds"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbBathrooms"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbBedrooms"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbKitchens"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbLivingrooms"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbUnits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unitTypeNames"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translation"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "localizedArea"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "localizedArea"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "unit"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unitConfigurations"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unitId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "bedConfigurations"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "beds"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "count"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "type"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "nbAllBeds"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "apartmentRooms"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "config"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: {
                                                                    kind: "Name",
                                                                    value: "roomId"
                                                                },
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "roomType"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "bedTypeId"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                alias: {
                                                                    kind: "Name",
                                                                    value: "bedCount"
                                                                },
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "count"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "roomName"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "tag"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "tag"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "translation"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbAllBeds"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbBathrooms"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbBedrooms"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbKitchens"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbLivingrooms"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbUnits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unitTypeNames"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translation"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "localizedArea"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "localizedArea"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "unit"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unitTypeId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyBlocks"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchResultProperty"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "blocks"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "blockId"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "roomId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "occupancy"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "policyGroupId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "packageId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "mealPlanId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "bundleId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "finalPrice"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "currency"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "originalPrice"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "currency"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "onlyXLeftMessage"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "tag"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "variables"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "key"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "value"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "translation"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "freeCancellationUntil"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasCrib"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "blockMatchTags"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "childStaysForFree"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "freeStayChildrenAges"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "thirdPartyInventoryContext"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isTpiBlock"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bundle"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "includeBundle"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "highlightedText"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "generatedName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PriceDisplayInfoIrene"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "PriceDisplayInfoIrene"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "badges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "translation"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "tooltip"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "translation"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "style"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "identifier"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chargesInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "translation"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayPrice"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "copy"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "translation"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "amountPerStay"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountRounded"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountUnformatted"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "currency"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "amountPerStayHotelCurr"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountRounded"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountUnformatted"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "currency"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "averagePricePerNight"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "amount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "amountRounded"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "amountUnformatted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "currency"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "priceBeforeDiscount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "copy"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "translation"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "amountPerStay"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountRounded"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountUnformatted"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "currency"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "rewards"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "rewardsList"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "termsAndConditions"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountPerStay"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amountRounded"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amountUnformatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "currency"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "breakdown"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "productType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amountPerStay"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "amount"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "amountRounded"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "amountUnformatted"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "currency"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "rewardsAggregated"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountPerStay"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amountRounded"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amountUnformatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "currency"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "copy"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translation"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "useRoundedAmount"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "discounts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "amount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountRounded"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountUnformatted"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "currency"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "translation"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "description"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "translation"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "itemType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "productId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "excludedCharges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "excludeChargesAggregated"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "copy"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "translation"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountPerStay"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amountRounded"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amountUnformatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "currency"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "excludeChargesList"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "chargeMode"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "chargeInclusion"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "chargeType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "amountPerStay"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amountRounded"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amountUnformatted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "currency"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "taxExceptions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "shortDescription"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "translation"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "longDescription"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "translation"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayConfig"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "key"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "value"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "serverTranslations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "key"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "value"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "BookerExperienceData"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchResultProperty"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bookerExperienceContentUIComponentProps"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "BookerExperienceContentLoyaltyBadgeListProps"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "badges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "amount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "variant"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "key"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hidePopover"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "popover"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "tncMessage"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "tncUrl"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "logoSrc"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "logoAlt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "BookerExperienceContentFinancialBadgeProps"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "paymentMethod"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "backgroundColor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hideAccepted"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "TopPhotos"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchResultProperty"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topPhotos"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "highResUrl"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "relativeUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lowResUrl"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "relativeUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "highResJpegUrl"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "relativeUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lowResJpegUrl"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "relativeUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "CardLabels"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchResultProperty"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cardLabels"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "label"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "style"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PersonalizedPhotos"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchResultProperty"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "personalizedPhotos"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "highResUrl"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "relativeUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lowResUrl"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "relativeUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "highResJpegUrl"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "relativeUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lowResJpegUrl"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "relativeUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "SearchMetadata"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchMeta"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "availabilityInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasLowAvailability"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unavailabilityPercent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "totalAvailableNotAutoextended"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "totalAutoextendedAvailable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "boundingBoxes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "swLat"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "swLon"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "neLat"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "neLon"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "childrenAges"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "dates"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "checkin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "checkout"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lengthOfStayInDays"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "destId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "destType"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "guessedLocation"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "destId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "destType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "destName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "maxLengthOfStayInDays"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "nbRooms"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "nbAdults"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "nbChildren"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userHasSelectedFilters"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "customerValueStatus"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isAffiliateBookingOwned"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "affiliatePartnerChannelId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "affiliateVerticalType"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "geniusLevel"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "SearchResultsBreadcrumb"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchResultsBreadcrumb"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "destId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "destType"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "SorterFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SorterOption"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "type"
                                },
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "captionTranslationTag"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "translation"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tooltipTranslationTag"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "translation"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "isSelected"
                                },
                                name: {
                                    kind: "Name",
                                    value: "selected"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "TripTypesData"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "TripTypes"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "beach"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isBeachUfi"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isEnabledBeachUfi"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ski"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSkiExperience"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSkiScaleUfi"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "ZeroResultsSection"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ZeroResultsSection"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "primaryAction"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "action"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "paragraphs"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PreviousSearches"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "PreviousSearch"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "childrenAges"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "MerchRegionIrene"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "MerchComponentsResultIrene"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "regions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "components"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "PromotionalBannerIrene"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "promotionalBannerCampaignId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "contentArea"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "PromotionalBannerSimpleTitleIrene"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "value"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "subTitle"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "PromotionalBannerSimpleSubTitleIrene"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "value"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "caption"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "PromotionalBannerSimpleCaptionIrene"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "value"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "PromotionalBannerCountdownCaptionIrene"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "campaignEnd"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "buttons"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "variant"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "cta"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "ariaLabel"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "text"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "targetLanding"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "InlineFragment",
                                                                                        typeCondition: {
                                                                                            kind: "NamedType",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "OpenContextSheet"
                                                                                            }
                                                                                        },
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "sheet"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: {
                                                                                                    kind: "SelectionSet",
                                                                                                    selections: [{
                                                                                                        kind: "InlineFragment",
                                                                                                        typeCondition: {
                                                                                                            kind: "NamedType",
                                                                                                            name: {
                                                                                                                kind: "Name",
                                                                                                                value: "WebContextSheet"
                                                                                                            }
                                                                                                        },
                                                                                                        directives: [],
                                                                                                        selectionSet: {
                                                                                                            kind: "SelectionSet",
                                                                                                            selections: [{
                                                                                                                kind: "Field",
                                                                                                                name: {
                                                                                                                    kind: "Name",
                                                                                                                    value: "title"
                                                                                                                },
                                                                                                                arguments: [],
                                                                                                                directives: []
                                                                                                            }, {
                                                                                                                kind: "Field",
                                                                                                                name: {
                                                                                                                    kind: "Name",
                                                                                                                    value: "body"
                                                                                                                },
                                                                                                                arguments: [],
                                                                                                                directives: [],
                                                                                                                selectionSet: {
                                                                                                                    kind: "SelectionSet",
                                                                                                                    selections: [{
                                                                                                                        kind: "Field",
                                                                                                                        name: {
                                                                                                                            kind: "Name",
                                                                                                                            value: "items"
                                                                                                                        },
                                                                                                                        arguments: [],
                                                                                                                        directives: [],
                                                                                                                        selectionSet: {
                                                                                                                            kind: "SelectionSet",
                                                                                                                            selections: [{
                                                                                                                                kind: "InlineFragment",
                                                                                                                                typeCondition: {
                                                                                                                                    kind: "NamedType",
                                                                                                                                    name: {
                                                                                                                                        kind: "Name",
                                                                                                                                        value: "ContextSheetTextItem"
                                                                                                                                    }
                                                                                                                                },
                                                                                                                                directives: [],
                                                                                                                                selectionSet: {
                                                                                                                                    kind: "SelectionSet",
                                                                                                                                    selections: [{
                                                                                                                                        kind: "Field",
                                                                                                                                        name: {
                                                                                                                                            kind: "Name",
                                                                                                                                            value: "text"
                                                                                                                                        },
                                                                                                                                        arguments: [],
                                                                                                                                        directives: []
                                                                                                                                    }]
                                                                                                                                }
                                                                                                                            }, {
                                                                                                                                kind: "InlineFragment",
                                                                                                                                typeCondition: {
                                                                                                                                    kind: "NamedType",
                                                                                                                                    name: {
                                                                                                                                        kind: "Name",
                                                                                                                                        value: "ContextSheetList"
                                                                                                                                    }
                                                                                                                                },
                                                                                                                                directives: [],
                                                                                                                                selectionSet: {
                                                                                                                                    kind: "SelectionSet",
                                                                                                                                    selections: [{
                                                                                                                                        kind: "Field",
                                                                                                                                        name: {
                                                                                                                                            kind: "Name",
                                                                                                                                            value: "items"
                                                                                                                                        },
                                                                                                                                        arguments: [],
                                                                                                                                        directives: [],
                                                                                                                                        selectionSet: {
                                                                                                                                            kind: "SelectionSet",
                                                                                                                                            selections: [{
                                                                                                                                                kind: "Field",
                                                                                                                                                name: {
                                                                                                                                                    kind: "Name",
                                                                                                                                                    value: "text"
                                                                                                                                                },
                                                                                                                                                arguments: [],
                                                                                                                                                directives: []
                                                                                                                                            }]
                                                                                                                                        }
                                                                                                                                    }]
                                                                                                                                }
                                                                                                                            }]
                                                                                                                        }
                                                                                                                    }]
                                                                                                                }
                                                                                                            }, {
                                                                                                                kind: "Field",
                                                                                                                name: {
                                                                                                                    kind: "Name",
                                                                                                                    value: "buttons"
                                                                                                                },
                                                                                                                arguments: [],
                                                                                                                directives: [],
                                                                                                                selectionSet: {
                                                                                                                    kind: "SelectionSet",
                                                                                                                    selections: [{
                                                                                                                        kind: "Field",
                                                                                                                        name: {
                                                                                                                            kind: "Name",
                                                                                                                            value: "variant"
                                                                                                                        },
                                                                                                                        arguments: [],
                                                                                                                        directives: []
                                                                                                                    }, {
                                                                                                                        kind: "Field",
                                                                                                                        name: {
                                                                                                                            kind: "Name",
                                                                                                                            value: "cta"
                                                                                                                        },
                                                                                                                        arguments: [],
                                                                                                                        directives: [],
                                                                                                                        selectionSet: {
                                                                                                                            kind: "SelectionSet",
                                                                                                                            selections: [{
                                                                                                                                kind: "Field",
                                                                                                                                name: {
                                                                                                                                    kind: "Name",
                                                                                                                                    value: "text"
                                                                                                                                },
                                                                                                                                arguments: [],
                                                                                                                                directives: []
                                                                                                                            }, {
                                                                                                                                kind: "Field",
                                                                                                                                name: {
                                                                                                                                    kind: "Name",
                                                                                                                                    value: "ariaLabel"
                                                                                                                                },
                                                                                                                                arguments: [],
                                                                                                                                directives: []
                                                                                                                            }, {
                                                                                                                                kind: "Field",
                                                                                                                                name: {
                                                                                                                                    kind: "Name",
                                                                                                                                    value: "targetLanding"
                                                                                                                                },
                                                                                                                                arguments: [],
                                                                                                                                directives: [],
                                                                                                                                selectionSet: {
                                                                                                                                    kind: "SelectionSet",
                                                                                                                                    selections: [{
                                                                                                                                        kind: "InlineFragment",
                                                                                                                                        typeCondition: {
                                                                                                                                            kind: "NamedType",
                                                                                                                                            name: {
                                                                                                                                                kind: "Name",
                                                                                                                                                value: "DirectLinkLanding"
                                                                                                                                            }
                                                                                                                                        },
                                                                                                                                        directives: [],
                                                                                                                                        selectionSet: {
                                                                                                                                            kind: "SelectionSet",
                                                                                                                                            selections: [{
                                                                                                                                                kind: "Field",
                                                                                                                                                name: {
                                                                                                                                                    kind: "Name",
                                                                                                                                                    value: "urlPath"
                                                                                                                                                },
                                                                                                                                                arguments: [],
                                                                                                                                                directives: []
                                                                                                                                            }, {
                                                                                                                                                kind: "Field",
                                                                                                                                                name: {
                                                                                                                                                    kind: "Name",
                                                                                                                                                    value: "queryParams"
                                                                                                                                                },
                                                                                                                                                arguments: [],
                                                                                                                                                directives: [],
                                                                                                                                                selectionSet: {
                                                                                                                                                    kind: "SelectionSet",
                                                                                                                                                    selections: [{
                                                                                                                                                        kind: "Field",
                                                                                                                                                        name: {
                                                                                                                                                            kind: "Name",
                                                                                                                                                            value: "name"
                                                                                                                                                        },
                                                                                                                                                        arguments: [],
                                                                                                                                                        directives: []
                                                                                                                                                    }, {
                                                                                                                                                        kind: "Field",
                                                                                                                                                        name: {
                                                                                                                                                            kind: "Name",
                                                                                                                                                            value: "value"
                                                                                                                                                        },
                                                                                                                                                        arguments: [],
                                                                                                                                                        directives: []
                                                                                                                                                    }]
                                                                                                                                                }
                                                                                                                                            }]
                                                                                                                                        }
                                                                                                                                    }, {
                                                                                                                                        kind: "InlineFragment",
                                                                                                                                        typeCondition: {
                                                                                                                                            kind: "NamedType",
                                                                                                                                            name: {
                                                                                                                                                kind: "Name",
                                                                                                                                                value: "LoginLanding"
                                                                                                                                            }
                                                                                                                                        },
                                                                                                                                        directives: [],
                                                                                                                                        selectionSet: {
                                                                                                                                            kind: "SelectionSet",
                                                                                                                                            selections: [{
                                                                                                                                                kind: "Field",
                                                                                                                                                name: {
                                                                                                                                                    kind: "Name",
                                                                                                                                                    value: "stub"
                                                                                                                                                },
                                                                                                                                                arguments: [],
                                                                                                                                                directives: []
                                                                                                                                            }]
                                                                                                                                        }
                                                                                                                                    }, {
                                                                                                                                        kind: "InlineFragment",
                                                                                                                                        typeCondition: {
                                                                                                                                            kind: "NamedType",
                                                                                                                                            name: {
                                                                                                                                                kind: "Name",
                                                                                                                                                value: "DeeplinkLanding"
                                                                                                                                            }
                                                                                                                                        },
                                                                                                                                        directives: [],
                                                                                                                                        selectionSet: {
                                                                                                                                            kind: "SelectionSet",
                                                                                                                                            selections: [{
                                                                                                                                                kind: "Field",
                                                                                                                                                name: {
                                                                                                                                                    kind: "Name",
                                                                                                                                                    value: "urlPath"
                                                                                                                                                },
                                                                                                                                                arguments: [],
                                                                                                                                                directives: []
                                                                                                                                            }, {
                                                                                                                                                kind: "Field",
                                                                                                                                                name: {
                                                                                                                                                    kind: "Name",
                                                                                                                                                    value: "queryParams"
                                                                                                                                                },
                                                                                                                                                arguments: [],
                                                                                                                                                directives: [],
                                                                                                                                                selectionSet: {
                                                                                                                                                    kind: "SelectionSet",
                                                                                                                                                    selections: [{
                                                                                                                                                        kind: "Field",
                                                                                                                                                        name: {
                                                                                                                                                            kind: "Name",
                                                                                                                                                            value: "name"
                                                                                                                                                        },
                                                                                                                                                        arguments: [],
                                                                                                                                                        directives: []
                                                                                                                                                    }, {
                                                                                                                                                        kind: "Field",
                                                                                                                                                        name: {
                                                                                                                                                            kind: "Name",
                                                                                                                                                            value: "value"
                                                                                                                                                        },
                                                                                                                                                        arguments: [],
                                                                                                                                                        directives: []
                                                                                                                                                    }]
                                                                                                                                                }
                                                                                                                                            }]
                                                                                                                                        }
                                                                                                                                    }, {
                                                                                                                                        kind: "InlineFragment",
                                                                                                                                        typeCondition: {
                                                                                                                                            kind: "NamedType",
                                                                                                                                            name: {
                                                                                                                                                kind: "Name",
                                                                                                                                                value: "ResolvedLinkLanding"
                                                                                                                                            }
                                                                                                                                        },
                                                                                                                                        directives: [],
                                                                                                                                        selectionSet: {
                                                                                                                                            kind: "SelectionSet",
                                                                                                                                            selections: [{
                                                                                                                                                kind: "Field",
                                                                                                                                                name: {
                                                                                                                                                    kind: "Name",
                                                                                                                                                    value: "url"
                                                                                                                                                },
                                                                                                                                                arguments: [],
                                                                                                                                                directives: []
                                                                                                                                            }]
                                                                                                                                        }
                                                                                                                                    }]
                                                                                                                                }
                                                                                                                            }]
                                                                                                                        }
                                                                                                                    }]
                                                                                                                }
                                                                                                            }]
                                                                                                        }
                                                                                                    }]
                                                                                                }
                                                                                            }]
                                                                                        }
                                                                                    }, {
                                                                                        kind: "InlineFragment",
                                                                                        typeCondition: {
                                                                                            kind: "NamedType",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "SearchResultsLandingIrene"
                                                                                            }
                                                                                        },
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "destType"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "destId"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "checkin"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "checkout"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "nrAdults"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "nrChildren"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "childrenAges"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "nrRooms"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "filters"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: {
                                                                                                    kind: "SelectionSet",
                                                                                                    selections: [{
                                                                                                        kind: "Field",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "name"
                                                                                                        },
                                                                                                        arguments: [],
                                                                                                        directives: []
                                                                                                    }, {
                                                                                                        kind: "Field",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "value"
                                                                                                        },
                                                                                                        arguments: [],
                                                                                                        directives: []
                                                                                                    }]
                                                                                                }
                                                                                            }]
                                                                                        }
                                                                                    }, {
                                                                                        kind: "InlineFragment",
                                                                                        typeCondition: {
                                                                                            kind: "NamedType",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "DirectLinkLandingIrene"
                                                                                            }
                                                                                        },
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "urlPath"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "queryParams"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: {
                                                                                                    kind: "SelectionSet",
                                                                                                    selections: [{
                                                                                                        kind: "Field",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "name"
                                                                                                        },
                                                                                                        arguments: [],
                                                                                                        directives: []
                                                                                                    }, {
                                                                                                        kind: "Field",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "value"
                                                                                                        },
                                                                                                        arguments: [],
                                                                                                        directives: []
                                                                                                    }]
                                                                                                }
                                                                                            }]
                                                                                        }
                                                                                    }, {
                                                                                        kind: "InlineFragment",
                                                                                        typeCondition: {
                                                                                            kind: "NamedType",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "LoginLandingIrene"
                                                                                            }
                                                                                        },
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "stub"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }]
                                                                                        }
                                                                                    }, {
                                                                                        kind: "InlineFragment",
                                                                                        typeCondition: {
                                                                                            kind: "NamedType",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "DeeplinkLandingIrene"
                                                                                            }
                                                                                        },
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "urlPath"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "queryParams"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: {
                                                                                                    kind: "SelectionSet",
                                                                                                    selections: [{
                                                                                                        kind: "Field",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "name"
                                                                                                        },
                                                                                                        arguments: [],
                                                                                                        directives: []
                                                                                                    }, {
                                                                                                        kind: "Field",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "value"
                                                                                                        },
                                                                                                        arguments: [],
                                                                                                        directives: []
                                                                                                    }]
                                                                                                }
                                                                                            }]
                                                                                        }
                                                                                    }, {
                                                                                        kind: "InlineFragment",
                                                                                        typeCondition: {
                                                                                            kind: "NamedType",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "SorterLandingIrene"
                                                                                            }
                                                                                        },
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "sorterName"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }]
                                                                                        }
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "designVariant"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "DesktopPromotionalFullBleedImageIrene"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: {
                                                                            kind: "Name",
                                                                            value: "image"
                                                                        },
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "image"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "url"
                                                                                },
                                                                                arguments: [{
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "width"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "814"
                                                                                    }
                                                                                }, {
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "height"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "138"
                                                                                    }
                                                                                }],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "alt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "overlayGradient"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "primaryColorHex"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "colorScheme"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "signature"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "DesktopPromotionalImageLeftIrene"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: {
                                                                            kind: "Name",
                                                                            value: "imageOpt"
                                                                        },
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "image"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "url"
                                                                                },
                                                                                arguments: [{
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "width"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "248"
                                                                                    }
                                                                                }, {
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "height"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "248"
                                                                                    }
                                                                                }],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "alt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "overlayGradient"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "primaryColorHex"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "colorScheme"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "signature"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "DesktopPromotionalImageRightIrene"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: {
                                                                            kind: "Name",
                                                                            value: "imageOpt"
                                                                        },
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "image"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "url"
                                                                                },
                                                                                arguments: [{
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "width"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "248"
                                                                                    }
                                                                                }, {
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "height"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "248"
                                                                                    }
                                                                                }],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "alt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "overlayGradient"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "primaryColorHex"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "colorScheme"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "signature"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "MdotPromotionalFullBleedImageIrene"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: {
                                                                            kind: "Name",
                                                                            value: "image"
                                                                        },
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "image"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "url"
                                                                                },
                                                                                arguments: [{
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "width"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "358"
                                                                                    }
                                                                                }, {
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "height"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "136"
                                                                                    }
                                                                                }],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "alt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "overlayGradient"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "primaryColorHex"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "colorScheme"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "signature"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "MdotPromotionalImageLeftIrene"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: {
                                                                            kind: "Name",
                                                                            value: "imageOpt"
                                                                        },
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "image"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "url"
                                                                                },
                                                                                arguments: [{
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "width"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "128"
                                                                                    }
                                                                                }, {
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "height"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "128"
                                                                                    }
                                                                                }],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "alt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "overlayGradient"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "primaryColorHex"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "colorScheme"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "signature"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "MdotPromotionalImageRightIrene"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: {
                                                                            kind: "Name",
                                                                            value: "imageOpt"
                                                                        },
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "image"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "url"
                                                                                },
                                                                                arguments: [{
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "width"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "128"
                                                                                    }
                                                                                }, {
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "height"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "128"
                                                                                    }
                                                                                }],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "alt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "overlayGradient"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "primaryColorHex"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "colorScheme"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "signature"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "MdotPromotionalIllustrationLeftIrene"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: {
                                                                            kind: "Name",
                                                                            value: "imageOpt"
                                                                        },
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "image"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "url"
                                                                                },
                                                                                arguments: [{
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "width"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "200"
                                                                                    }
                                                                                }, {
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "height"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "200"
                                                                                    }
                                                                                }],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "alt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "overlayGradient"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "primaryColorHex"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "colorScheme"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "signature"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "MdotPromotionalIllustrationRightIrene"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: {
                                                                            kind: "Name",
                                                                            value: "imageOpt"
                                                                        },
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "image"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "url"
                                                                                },
                                                                                arguments: [{
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "width"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "200"
                                                                                    }
                                                                                }, {
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "height"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "200"
                                                                                    }
                                                                                }],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "alt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "overlayGradient"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "primaryColorHex"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "colorScheme"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "signature"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "MdotPromotionalImageTopIrene"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "colorScheme"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "signature"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "MerchCarouselIrene"
                                                    }
                                                },
                                                directives: [{
                                                    kind: "Directive",
                                                    name: {
                                                        kind: "Name",
                                                        value: "include"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "if"
                                                        },
                                                        value: {
                                                            kind: "Variable",
                                                            name: {
                                                                kind: "Name",
                                                                value: "carouselLowCodeExp"
                                                            }
                                                        }
                                                    }]
                                                }],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "carouselCampaignId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "VisualFiltersGroup"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "VisualFiltersGroup"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "groupId"
                                },
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "position"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "visualFilters"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "description"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "text"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photoUrl"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "action"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "context"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "key"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "value"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PropertyUspBadges"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SearchResultProperty"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "propertyUspBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "translatedName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "facilityId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }])),
                    loc: {
                        start: 0,
                        end: 2742,
                        source: {
                            body: "\n  fragment FullSearchFragment on SearchQueryOutput {\n    banners {\n      ...Banner\n    }\n    breadcrumbs {\n      ... on SearchResultsBreadcrumb {\n        ...SearchResultsBreadcrumb\n      }\n      ... on LandingPageBreadcrumb {\n        ...LandingPageBreadcrumb\n      }\n    }\n    carousels {\n      ...Carousel\n    }\n    destinationLocation {\n      ...DestinationLocation\n    }\n    entireHomesSearchEnabled\n    dateFlexibilityOptions {\n      enabled\n    }\n    # flexsearch_flexible_dates_config_migration\n    flexibleDatesConfig {\n      broadDatesCalendar {\n        checkinMonths\n        los\n        startWeekdays\n        losType\n      }\n      dateFlexUseCase\n      dateRangeCalendar {\n        flexWindow\n        checkin\n        checkout\n      }\n    }\n    filters {\n      ...FilterData\n    }\n    filtersTrackOnView {\n      type\n      experimentHash\n      value\n    }\n    appliedFilterOptions {\n      ...FilterOption\n    }\n    recommendedFilterOptions {\n      ...FilterOption\n    }\n    pagination {\n      nbResultsPerPage\n      nbResultsTotal\n    }\n    tripTypes {\n      ...TripTypesData\n    }\n    results {\n      ...ReviewSummary\n      ...BasicPropertyData\n      ...PropertyUspBadges\n      ...MatchingUnitConfigurations\n      ...PropertyBlocks\n      ...BookerExperienceData\n      ...TopPhotos ##mpswe_sr_photo_carousel_grid_www\n      ...CardLabels ##srx_web_managed_by_trader\n      ...PersonalizedPhotos ##sr_www_personalized_carousel\n      generatedPropertyTitle ##bh_age_web_genai_title_enhancer\n      descriptionSummary ##srx_www_sr_snippets\n      priceDisplayInfoIrene {\n        ...PriceDisplayInfoIrene\n      }\n      licenseDetails {\n        nextToHotelName\n      }\n      isTpiExclusiveProperty\n      propertyCribsAvailabilityLabel\n      mlBookingHomeTags\n      trackOnView {\n        type\n        experimentHash\n        value\n      }\n    }\n    searchMeta {\n      ...SearchMetadata\n    }\n    sorters {\n      option {\n        ...SorterFields\n      }\n    }\n    zeroResultsSection {\n      ...ZeroResultsSection\n    }\n    rocketmilesSearchUuid\n    previousSearches {\n      ...PreviousSearches\n    }\n    merchComponents {\n      ...MerchRegionIrene\n    }\n    wishlistData {\n      numProperties ##mpswe_www_sr_saved_properties_carousel, mpswe_mdot_sr_saved_properties_carousel\n    }\n    seoThemes {\n      ##mpswe_www_sr_theme_landing_experience, mpswe_mdot_sr_theme_landing_experience\n      id\n      caption\n    }\n    gridViewPreference ##mpswe_www_sr_grid_view_save_in_session\n    advancedSearchWidget {\n      title\n      legalDisclaimer\n      description\n      placeholder\n      ctaText\n      helperText\n    }\n    visualFiltersGroups {\n      ...VisualFiltersGroup\n    }\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                },
                dn = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "FullSearch"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "SearchQueryInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "carouselLowCodeExp"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "includeBundle"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "searchQueries"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "search"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "input"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "input"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "FullSearchFragment"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }].concat(rn.definitions)),
                    loc: {
                        start: 0,
                        end: 228,
                        source: {
                            body: "\n  query FullSearch(\n    $input: SearchQueryInput!\n    $carouselLowCodeExp: Boolean!\n    $includeBundle: Boolean = false\n  ) {\n    searchQueries {\n      search(input: $input) {\n        ...FullSearchFragment\n      }\n    }\n  }\n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                },
                sn = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "FullSearchWithDebug"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "SearchQueryInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "carouselLowCodeExp"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "includeBundle"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "searchQueries"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "search"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "input"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "input"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "FullSearchFragment"
                                                },
                                                directives: []
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "SearchQueryOutput"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "bookingBasicConfiguration"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "tpiAvailabilityInfo"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "isTimeout"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "debug"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "request"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "response"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "requestContext"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }].concat(rn.definitions)),
                    loc: {
                        start: 0,
                        end: 482,
                        source: {
                            body: "\n  query FullSearchWithDebug(\n    $input: SearchQueryInput!\n    $carouselLowCodeExp: Boolean!\n    $includeBundle: Boolean = false\n  ) {\n    searchQueries {\n      search(input: $input) {\n        ...FullSearchFragment\n        ... on SearchQueryOutput {\n          bookingBasicConfiguration {\n            tpiAvailabilityInfo {\n              isTimeout\n            }\n          }\n        }\n      }\n      debug {\n        request\n        response\n        requestContext\n      }\n    }\n  }\n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                },
                ln = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "PriceXRayIrene"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "PriceDisplayInfoIrene"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "priceXRay"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "parsedBlockId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "priceMode"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roomId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channelInfo"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "priceTotals"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedSubTotalPriceUserCurrency"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedSubTotalPricePropertyCurrency"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedTotalPriceUserCurrency"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedTotalPricePropertyCurrency"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedInitialPriceUserCurrency"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "charges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedInclusion"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "chargeName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedUserCurrencyAmount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedPropertyCurrencyAmount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedMode"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedBase"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "pricingProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "ruleId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "productFamilyId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "productId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedUserCurrencyAmount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "formattedPropertyCurrencyAmount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "userToEuroConversionRate"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "currency"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "conversionRate"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "propertyToEuroConversionRate"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "currency"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "conversionRate"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "userToPropertyConversionRate"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "currency"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "conversionRate"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                on = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "TpiDebugInfo"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Block"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "thirdPartyInventoryContext"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isTpiMappedRoom"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "tpiBlockId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "wholesalerCode"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cwsPriceAdjustmentId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cwsCampaignId"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                un = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "XRayDebug"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "SearchResultProperty"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "xRayDebugInfo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "rankingInfo"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sortersInfo"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isMainSorter"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "breakdown"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "name"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "value"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "breakdown"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "name"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "value"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                cn = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "FullSearchWithDebugAndXRay"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "SearchQueryInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "carouselLowCodeExp"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "includeBundle"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "searchQueries"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "search"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "input"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "input"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "FullSearchFragment"
                                                },
                                                directives: []
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "SearchQueryOutput"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "results"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "XRayDebug"
                                                                },
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "priceDisplayInfoIrene"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "FragmentSpread",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "PriceXRayIrene"
                                                                        },
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "blocks"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "FragmentSpread",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "TpiDebugInfo"
                                                                        },
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "debug"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "request"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "response"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "requestContext"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }].concat(rn.definitions, un, ln, on)),
                    loc: {
                        start: 0,
                        end: 580,
                        source: {
                            body: "\n  query FullSearchWithDebugAndXRay(\n    $input: SearchQueryInput!\n    $carouselLowCodeExp: Boolean!\n    $includeBundle: Boolean = false\n  ) {\n    searchQueries {\n      search(input: $input) {\n        ...FullSearchFragment\n        ... on SearchQueryOutput {\n          results {\n            ...XRayDebug\n            priceDisplayInfoIrene {\n              ...PriceXRayIrene\n            }\n            blocks {\n              ...TpiDebugInfo\n            }\n          }\n        }\n      }\n      debug {\n        request\n        response\n        requestContext\n      }\n    }\n  }\n  \n  \n  \n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                },
                mn = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "FullSearchWithXRay"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "SearchQueryInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "carouselLowCodeExp"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "includeBundle"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "searchQueries"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "search"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "input"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "input"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "FullSearchFragment"
                                                },
                                                directives: []
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "SearchQueryOutput"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "results"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "XRayDebug"
                                                                },
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "priceDisplayInfoIrene"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "FragmentSpread",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "PriceXRayIrene"
                                                                        },
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "blocks"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "FragmentSpread",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "TpiDebugInfo"
                                                                        },
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }].concat(rn.definitions, un, ln, on)),
                    loc: {
                        start: 0,
                        end: 494,
                        source: {
                            body: "\n  query FullSearchWithXRay(\n    $input: SearchQueryInput!\n    $carouselLowCodeExp: Boolean!\n    $includeBundle: Boolean = false\n  ) {\n    searchQueries {\n      search(input: $input) {\n        ...FullSearchFragment\n        ... on SearchQueryOutput {\n          results {\n            ...XRayDebug\n            priceDisplayInfoIrene {\n              ...PriceXRayIrene\n            }\n            blocks {\n              ...TpiDebugInfo\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  \n  \n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };
            let vn;
            const kn = "undefined" !== typeof window;
            var gn = t("0321416a");
            const pn = e => {
                const n = d.exp `cCHObKdPHMXCeZVWQIORe`,
                    t = d.exp `cCHObKdPHMXCeZVWQIOLBBVYYT`;
                return e === gn.N.MDOT ? t : n
            };
            var fn = t("d1e54a96");
            const hn = e => e <= 2147483647 && e >= -2147483648;

            function Nn(e) {
                const n = Math.floor(parseInt(e.get("ucfac") || "", 10) / 10);
                if (hn(n)) {
                    const t = parseInt(e.get("cs_seed") || "", 10);
                    return {
                        acidCarouselId: n,
                        seedHotelId: hn(t) ? t : void 0
                    }
                }
                return null
            }
            const Sn = e => e <= 2147483647 && e >= -2147483648;

            function _n(e) {
                const n = parseInt(e.get("highlighted_hotels") || "", 10),
                    t = e.get("sr_show_room") || e.get("show_room");
                return Sn(n) && t ? [{
                    blockId: t,
                    hotelId: n
                }] : null
            }
            var yn = t("836cf400"),
                bn = t("86c19f61");
            const Fn = "b_merch_test_campaign_id";

            function En(e) {
                return {
                    testCampaignIds: e.getAll(Fn)
                }
            }
            var Tn = t("a32aa025");
            const Cn = "efpc",
                In = "edgtid",
                An = "hca",
                On = new RegExp("^[.A-Za-z0-9_-]+$");

            function Dn(e, n) {
                var t;
                const i = null === (t = (0, r.getRequestContext)().getAffiliate()) || void 0 === t ? void 0 : t.label;
                return i ? {
                    metaCampaignId: wn(i),
                    externalTotalPrice: Rn(e, i, n),
                    feedPrice: xn(e),
                    hotelCenterAccountId: Pn(e),
                    rateRuleId: Bn(i),
                    dragongateTraceId: Ln(e),
                    pricingProductsTag: Un(i)
                } : null
            }

            function Rn(e, n, t) {
                const i = function(e) {
                        const n = e.match(/_curr-([a-zA-Z]+)/);
                        if (!n || n.length < 1) return null;
                        return n[1]
                    }(n) || t,
                    a = function(e) {
                        const n = e.get("ext_price_total");
                        if (null == n) return null;
                        return parseInt(n, 10)
                    }(e);
                return a && i ? {
                    amount: a,
                    currency: i
                } : null
            }

            function xn(e) {
                const n = e.get(Cn);
                if (!n) return null;
                const t = Tn.lW.from(n, "base64").toString("hex").replace(/b/g, ".").match(/^(?<asIsAmount>\d+(?:\.\d+)?)a(?<totalAmount>\d+(?:\.\d+)?)a(?<currencyId>\d+)f?$/);
                return t && t.groups ? {
                    totalAmount: t.groups.totalAmount,
                    asIsAmount: t.groups.asIsAmount,
                    currencyId: Number(t.groups.currencyId)
                } : null
            }

            function Pn(e) {
                const n = e.get(An);
                return !(n && n.match(On)) || n.length > 64 ? null : n
            }

            function Ln(e) {
                const n = e.get(In);
                let t;
                if (n) {
                    t = function(e) {
                        if (32 !== e.length) return null;
                        return [e.slice(0, 8), e.slice(8, 12), e.slice(12, 16), e.slice(16, 20), e.slice(20, 32)].join("-")
                    }(Tn.lW.from(n, "base64").toString("hex"))
                }
                return t || null
            }

            function wn(e) {
                const n = e.match(/_mcid-([0-9]+)/);
                return !n || n.length < 1 ? 0 : parseInt(n[1], 10) || 0
            }

            function Bn(e) {
                const n = e.match(/_rateid-([a-zA-Z0-9]+)/);
                return !n || n.length < 1 ? null : n[1]
            }

            function Un(e) {
                const n = e.match(/_ppt-([a-zA-Z0-9]+)/);
                return !n || n.length < 1 ? null : n[1]
            }
            const Mn = 30,
                Hn = 25,
                Vn = 1e3;

            function Gn(e) {
                return e === ee.SiteType.WWW ? Hn : Mn
            }

            function Yn(e) {
                let {
                    offsetParam: n,
                    itemsPerPage: t,
                    numberOfItems: i
                } = e, a = parseInt(n || "", 10) || 0;
                if (a <= 0) return 0;
                const r = !t || t <= 0 ? Gn() : t;
                if (a % r !== 0 && (a -= a % r), i && i > 0) {
                    if (i <= r) return 0;
                    a >= i && (a = i - (i % r || r))
                }
                return a
            }
            const Wn = {
                    lavc: "low_av_destinations",
                    lmc: "nearby_destinations",
                    postcard: "destination_competitor_set",
                    from_history: "search_history",
                    ilp: "destination_recommendations",
                    ucfac: "acid_carousel",
                    hp_avform: "hp_av_form",
                    hp_sbox: "hp_search_box"
                },
                Kn = {
                    1: "date_compset",
                    2: "date_recommendation",
                    3: "date_similar_but"
                },
                $n = {
                    sb: "lpsrc_search_box",
                    deals_finder: "lpsrc_deals_finder"
                };

            function qn(e) {
                let n;
                if (Object.keys(Wn).forEach((t => {
                        !n && e.get(t) && (n = Wn[t])
                    })), n) return {
                    blockName: n
                };
                const t = Kn[Number(e.get("dcsc"))];
                if (t) return {
                    blockName: t
                };
                const i = $n[String(e.get("lpsrc"))];
                if (i) return {
                    blockName: i
                };
                const a = Number(e.get("ac_position")),
                    r = e.get("ac_click_type"),
                    d = "1" === e.get(Ne.XY);
                return !isNaN(a) && r ? {
                    clickPosition: a,
                    clickType: r,
                    blockName: d ? "searchbox" : "autocomplete"
                } : d ? {
                    blockName: "searchbox"
                } : null
            }

            function Zn(e) {
                const n = Number(e.get("relocation_mode"));
                if (n) return {
                    originalPropertyId: n,
                    useLessFilters: e.has("relocation_less_filters")
                }
            }
            const jn = "shw_aparth";

            function zn(e) {
                let n = e.get("order");
                "1" === e.get("genius_rate") && "popularity" !== n && (n = "genius");
                const t = e.get("dst_geo");
                let i = null;
                if (null !== t) {
                    const e = Number(t);
                    isNaN(e) || (i = e)
                }
                const a = e.get("trip_type_intent_id");
                let r = null;
                if (null !== a) {
                    const e = Number(a);
                    isNaN(e) || (r = e)
                }
                return {
                    selectedSorter: n,
                    referenceGeoId: i,
                    tripTypeIntentId: r
                }
            }
            const Qn = d.exp `UOTELTbfUfXWXZWSccYPAMIcCcCcCC`;

            function Xn() {
                return (0, d.trackExperiment)(Qn) > 0
            }
            var Jn = t("ba394a5d"),
                et = t("e91eda94");
            const nt = ["activeTab"];

            function tt(e) {
                let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                const t = e.searchParams,
                    i = (0, r.getRequestContext)(),
                    a = (0, yn.G)(t),
                    s = n.isRawDates ? (0, ae.Xk)(t) : (0, ae.mA)(t);
                let l;
                if (null !== s && void 0 !== s && s.checkout && n.extendCheckoutByValue && Xn()) {
                    l = J().utc(null === s || void 0 === s ? void 0 : s.checkout).add(n.extendCheckoutByValue, "day").toDate()
                }
                let o = null === s ? {} : {
                    dates: {
                        checkin: (0, ae.Gr)(s.checkin),
                        checkout: (0, ae.Gr)(l ? ? s.checkout)
                    }
                };
                const {
                    nbRooms: u,
                    nbAdults: c,
                    nbChildren: m,
                    childrenAges: v
                } = ge(t);
                let k = !0;
                e.searchParams.get("idf") && (k = !1, o = {});
                const g = Boolean(e.searchParams.get("do_availability_check")),
                    p = function(e) {
                        let {
                            basePageUrl: n,
                            pagination: t,
                            siteType: i
                        } = e;
                        const a = n.searchParams.get("offset");
                        if (t) {
                            const e = t.nbResultsTotal > Vn ? Vn : t.nbResultsTotal,
                                n = Yn({
                                    offsetParam: a,
                                    itemsPerPage: t.nbResultsPerPage,
                                    numberOfItems: e
                                }),
                                i = Math.ceil(e / t.nbResultsPerPage),
                                r = Math.round(n / t.nbResultsPerPage) + 1;
                            return {
                                nbResultsPerPage: t.nbResultsPerPage,
                                nbResultsTotal: e,
                                nbAvailablePages: i,
                                currentPageNumber: r,
                                offset: n
                            }
                        }
                        const r = Gn(i),
                            d = Yn({
                                offsetParam: a,
                                itemsPerPage: r
                            });
                        return {
                            nbResultsTotal: 0,
                            nbResultsPerPage: r,
                            nbAvailablePages: 0,
                            currentPageNumber: Math.round(d / r) + 1,
                            offset: d
                        }
                    }({
                        basePageUrl: e,
                        siteType: i.getSiteType()
                    }),
                    f = i.getCurrency(),
                    h = t.getAll("theme_id").map((e => parseInt(e || "", 10))).filter((e => !isNaN(e))),
                    N = (0, fn.constructUrl)({
                        pathname: e.pathname,
                        searchParams: e.searchParams
                    }),
                    S = [...nt];
                (0, et.Z)() && !(0, d.trackExperiment)(d.exp `HVQeYFRURURYTfUOeOAJZbVPLDFFMPCC`) && S.push(Jn.oB), S.forEach((e => N.searchParams.delete(e)));
                const _ = (0, bn.zC)(e) || void 0;
                let y;
                _ && "los" in _ || (y = (0, le.Up)(t));
                const E = (0, d.trackExperiment)(d.exp `TZUfONebEWAUFccRMVIZdRRT`) > 0;
                (0, d.trackExperimentStage)(d.exp `TZUfONebEWAUFccRMVIZdRRT`, 1);
                const T = (0, F.S6)({
                        urlSearchParams: e.searchParams
                    }),
                    C = d.exp `HVQeYSCZWNTBWWfbHWQIAYKIbLUC`,
                    I = (0, F.c)({
                        filters: T
                    });
                I && ((0, d.trackExperimentStage)(C, 2), (0, d.trackExperimentStage)(C, i.getSiteType() === ee.SiteType.WWW ? 3 : 4));
                const A = (0, d.trackExperiment)(pn(i.getSiteType())) ? e.searchParams.get(b.jP) : void 0;
                let O = E ? (0, bn.v)(e) : void 0;
                var D, R, x;
                l && Xn() && (O = O ? { ...O,
                    dateRangeCalendar: { ...O.dateRangeCalendar,
                        checkout: n.extendCheckoutByValue && null !== (D = o) && void 0 !== D && null !== (D = D.dates) && void 0 !== D && D.checkout ? [o.dates.checkout] : null === (R = O.dateRangeCalendar) || void 0 === R ? void 0 : R.checkout,
                        flexWindow: n.flexWindow ? ? (null === (x = O.dateRangeCalendar) || void 0 === x ? void 0 : x.flexWindow)
                    }
                } : void 0);
                const P = {
                    acidCarouselContext: Nn(t),
                    autoExtendMode: null === n || void 0 === n ? void 0 : n.autoExtendMode,
                    childrenAges: v,
                    ...o,
                    doAvailabilityCheck: g,
                    dateFlexQuery: E ? void 0 : _,
                    encodedAutocompleteMeta: e.searchParams.get("ac_meta"),
                    enableCampaigns: !0,
                    filters: T,
                    ...I && (0, d.trackExperiment)(C) ? {
                        selectedFilterSources: I
                    } : {},
                    flexibleDatesConfig: O,
                    flexWindow: E ? void 0 : y,
                    forcedBlocks: _n(t),
                    location: a,
                    metaContext: Dn(t, f),
                    nbRooms: u,
                    nbAdults: c,
                    nbChildren: m,
                    showAparthotelAsHotel: (L = t, "0" !== L.get(jn)),
                    needsRoomsMatch: "1" === e.searchParams.get("slp_r_match_to"),
                    optionalFeatures: {
                        forceArpExperiments: !0,
                        testProperties: "1" === e.searchParams.get("test")
                    },
                    pagination: {
                        rowsPerPage: p.nbResultsPerPage,
                        offset: p.offset
                    },
                    propertyListMatchType: null === n || void 0 === n ? void 0 : n.propertyListMatchType,
                    rawQueryForSession: N.pathname + "?" + N.searchParams.toString(),
                    referrerBlock: qn(t),
                    relocationMode: Zn(t),
                    sbCalendarOpen: e.searchParams.has("efdco"),
                    sorters: zn(t),
                    travelPurpose: (0, pe.iX)(t),
                    seoThemeIds: h,
                    useSearchParamsFromSession: k,
                    merchInput: En(t),
                    previousSearchId: A,
                    webSearchContext: {
                        reason: "undefined" === typeof window ? Te.H7.NEW_SEARCH : Te.H7.CLIENT_SIDE_UPDATE,
                        source: Te.IV.SEARCH_RESULTS,
                        outcome: Te._6.SEARCH_RESULTS
                    },
                    clientSideRequestId: i.getPageviewId()
                };
                var L;
                const w = !!(0, d.trackExperiment)(d.exp `cCHObCcEIZEHbDNQGGFVIZdRJOOIBBO`) && i.getSiteType() === ee.SiteType.MDOT,
                    B = !!(0, d.trackExperiment)(d.exp `cCHObCcEIZEHaOAXSPIfIKdFHfdKNKNKWe`) && i.getSiteType() === ee.SiteType.WWW,
                    U = w || B,
                    M = Boolean(i.getSiteType() === ee.SiteType.WWW && (0, d.trackExperiment)(d.exp `GDIcdSZcOQQBFKUddVCFRURURHe`)),
                    H = Boolean(i.getSiteType() === ee.SiteType.MDOT && (0, d.trackExperiment)(d.exp `GDIcdSZcOQQBFKUddVCWPHDDWe`));
                return {
                    input: P,
                    carouselLowCodeExp: U,
                    includeBundle: M || H
                }
            }

            function it() {
                const e = (0, r.getRequestContext)().getBasePageUrl(),
                    n = (0, yn.G)(e.searchParams);
                return n.destType === Te.z5.NO_DEST_TYPE && !n.searchString
            }

            function at(e, n) {
                return (0, a.useQuery)(e, n)
            }

            function rt(e, n) {
                const t = (0, a.useSuspenseQuery)(e, n);
                return { ...t,
                    loading: !t.data && !t.error
                }
            }

            function dt(e) {
                var n, t, i, a, r, d, s, l;
                const o = e && "searchQueries" in e ? null === (n = e.searchQueries) || void 0 === n ? void 0 : n.search : null;
                return o && "results" in o ? {
                    banners: (null === (t = o.banners) || void 0 === t ? void 0 : t.filter(he.Dw)) || null,
                    breadcrumbs: o.breadcrumbs || null,
                    carousels: (null === (i = o.carousels) || void 0 === i ? void 0 : i.filter(he.Dw)) || null,
                    destinationLocation: o.destinationLocation || null,
                    entireHomesSearchEnabled: o.entireHomesSearchEnabled,
                    flexibleSearchEnabled: Boolean(null === o || void 0 === o || null === (a = o.dateFlexibilityOptions) || void 0 === a ? void 0 : a.enabled),
                    flexibleDatesConfig: o.flexibleDatesConfig,
                    filters: (null === (r = o.filters) || void 0 === r ? void 0 : r.filter(he.Dw)) || null,
                    filtersTrackOnView: o.filtersTrackOnView || null,
                    appliedFilters: o.appliedFilterOptions || null,
                    recommendedFilterOptions: o.recommendedFilterOptions || null,
                    tripTypes: o.tripTypes || void 0,
                    results: (null === (d = o.results) || void 0 === d ? void 0 : d.filter(he.Dw)) || null,
                    rawResults: o.results,
                    pagination: o.pagination || null,
                    searchMeta: o.searchMeta || null,
                    sorters: (null === (s = o.sorters) || void 0 === s ? void 0 : s.filter(he.Dw)) || null,
                    wishlistData: o.wishlistData,
                    gridViewPreference: o.gridViewPreference,
                    zeroResultsSection: o.zeroResultsSection || null,
                    rocketmilesSearchUuid: o.rocketmilesSearchUuid || null,
                    previousSearches: o.previousSearches || null,
                    merchComponents: o.merchComponents || null,
                    seoThemes: (null === (l = o.seoThemes) || void 0 === l ? void 0 : l.filter(he.Dw)) || null,
                    advancedSearchWidget: o.advancedSearchWidget,
                    visualFiltersGroups: o.visualFiltersGroups
                } : {
                    banners: null,
                    breadcrumbs: null,
                    carousels: null,
                    destinationLocation: null,
                    filters: null,
                    filtersTrackOnView: null,
                    flexibleDatesConfig: null,
                    appliedFilters: null,
                    recommendedFilterOptions: null,
                    results: null,
                    rawResults: null,
                    pagination: null,
                    previousSearches: null,
                    searchMeta: null,
                    sorters: null,
                    wishlistData: null,
                    gridViewPreference: null,
                    isRedirect: "Redirect" === (null === o || void 0 === o ? void 0 : o.__typename),
                    zeroResultsSection: null,
                    rocketmilesSearchUuid: null,
                    merchComponents: null,
                    seoThemes: null,
                    advancedSearchWidget: null,
                    visualFiltersGroups: null
                }
            }

            function st(e) {
                let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                const t = (0, r.getRequestContext)(),
                    a = t.isInternalUser(),
                    s = a && function(e) {
                        return (0, r.getRequestContext)().isInternalUser() && ("1" === e.searchParams.get("exp_pdi_enable_price_xray") || "1" === e.searchParams.get("exp_enable_ranking_xray"))
                    }(e),
                    l = a && ("1" === e.searchParams.get("debug") || "1" === e.searchParams.get("exp_mfe_irene_debug"));
                let o = dn;
                s && l ? o = cn : s ? o = mn : l && (o = sn);
                const u = tt(e, {
                    isRawDates: !0
                });
                u.input.pagination = { ...u.input.pagination,
                    offset: 0
                }, u.input.advancedSearchInput = function(e) {
                    var n;
                    let {
                        filters: t,
                        sorters: i
                    } = e;
                    const a = Je.getEntities(),
                        r = Je.getUid();
                    if (!a.length) return;
                    const d = null === t || void 0 === t || null === (n = t.selectedFilters) || void 0 === n ? void 0 : n.split(b.ge),
                        s = null === i || void 0 === i ? void 0 : i.selectedSorter,
                        l = a.filter((e => e.type === en && (null === d || void 0 === d ? void 0 : d.includes(e.id)) || e.type === nn && e.id === s)).map((e => ({
                            id: e.id,
                            type: tn[e.type]
                        })));
                    return l.length ? {
                        extractedEntities: l,
                        uid: r
                    } : void 0
                }(u.input);
                const c = n.useSuspense ? rt : at,
                    m = (0, i.useRef)(!1),
                    v = (0, i.useRef)(e.toString()),
                    k = (0, d.trackExperiment)(pn(t.getSiteType())) > 0;
                v.current !== e.toString() && (m.current = !0);
                const {
                    error: g,
                    data: p,
                    loading: f,
                    client: h,
                    fetchMore: N
                } = c(o, {
                    variables: u,
                    skip: n.skipQuery || it(),
                    fetchPolicy: m.current && k ? "cache-and-network" : "cache-first"
                }), S = k ? f && !h.readQuery({
                    query: o,
                    variables: u
                }) : f;
                l && p && function(e) {
                    kn && null !== e && void 0 !== e && e.searchQueries && e.searchQueries.debug && e.searchQueries.debug !== vn && (window.__IRENE_DEBUG__ = e.debug, console.groupCollapsed("Irene debug info"), console.log("Data:", e), console.log("Irene request JSON:", JSON.parse(e.searchQueries.debug.request || "{}")), console.log("Irene request string:", JSON.stringify(JSON.parse(e.searchQueries.debug.request || "{}"))), console.log("Irene response: ", JSON.parse(e.searchQueries.debug.response || "{}")), console.log("Irene requestContext: ", JSON.parse(e.searchQueries.debug.requestContext || "{}")), console.groupEnd(), vn = null === e || void 0 === e ? void 0 : e.searchQueries.debug)
                }(p);
                return {
                    data: dt(p),
                    loading: S,
                    error: g,
                    fetchMore: async n => {
                        let {
                            pagination: t
                        } = n;
                        const i = tt(e, {
                            isRawDates: !0
                        });
                        i.input.pagination = { ...i.input.pagination,
                            ...t
                        };
                        const a = await N({
                            variables: i
                        });
                        return dt(null === a || void 0 === a ? void 0 : a.data)
                    },
                    rawLoadedData: p
                }
            }
            var lt = t("616dc218"),
                ot = t("9b9371c1");
            var ut = t("2c8dcc4b");
            const ct = 1,
                mt = 2,
                vt = 1,
                kt = 2,
                gt = 4;

            function pt() {
                const {
                    isWWW: e
                } = (0, _.Z6)();
                return e ? d.exp `HVLDTLUedKNKNKHcVaAFZKXe` : d.exp `HVLDTLUeCDWOOWLaRbdFIKe`
            }

            function ft() {
                return (0, d.trackExperiment)(pt()) > 0
            }

            function ht(e) {
                (0, d.trackCustomGoal)(pt(), e && e.length > 0 ? vt : kt)
            }
            var Nt = t("5d6304f4");

            function St(e, n) {
                let t = "";
                return "hotel" === e ? t = "hotel" : "landmark" === e ? (t = "landmark", n.isSkiItem && (t = "ski")) : "airport" === e && (t = "airport"), t
            }
            const _t = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "AutoComplete"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "AutoCompleteRequestInput"
                                }
                            }
                        },
                        directives: []
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "autoCompleteSuggestions"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "results"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "destination"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "countryCode"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "destId"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "destType"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "latitude"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "longitude"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayInfo"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "imageUrl"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "label"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "labelComponents"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "name"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "type"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "showEntireHomesCheckbox"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "title"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "subTitle"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "metaData"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isSkiItem"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "langCode"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "maxLosData"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "extendedLoS"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "metaMatches"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "text"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "type"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "roundTrip"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "webFilters"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "autocompleteResultId"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "autocompleteResultSource"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 796,
                    source: {
                        body: "\n  query AutoComplete($input: AutoCompleteRequestInput!) {\n    autoCompleteSuggestions(input: $input) {\n      results {\n        destination {\n          countryCode\n          destId\n          destType\n          latitude\n          longitude\n        }\n        displayInfo {\n          imageUrl\n          label\n          labelComponents {\n            name\n            type\n          }\n          showEntireHomesCheckbox\n          title\n          subTitle\n        }\n        metaData {\n          isSkiItem\n          langCode\n          maxLosData {\n            extendedLoS\n          }\n          metaMatches {\n            id\n            text\n            type\n          }\n          roundTrip\n          webFilters\n          autocompleteResultId\n          autocompleteResultSource\n        }\n      }\n    }\n  }\n",
                        name: "GraphQL request",
                        locationOffset: {
                            line: 1,
                            column: 1
                        }
                    }
                }
            };
            const yt = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ResolveSuggestions"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ResolveSuggestionInput"
                                }
                            }
                        },
                        directives: []
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "resolveSuggestion"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "latitude"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "longitude"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 143,
                    source: {
                        body: "\n  query ResolveSuggestions($input: ResolveSuggestionInput!) {\n    resolveSuggestion(input: $input) {\n      latitude\n      longitude\n    }\n  }\n",
                        name: "GraphQL request",
                        locationOffset: {
                            line: 1,
                            column: 1
                        }
                    }
                }
            };
            const bt = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "SearchPlaceDetails"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "PlaceDetailsInput"
                                }
                            }
                        },
                        directives: []
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "searchPlaceDetails"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "results"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "place"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "address"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "location"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "latitude"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "longitude"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 267,
                    source: {
                        body: "\n  query SearchPlaceDetails($input: PlaceDetailsInput!) {\n    searchPlaceDetails(input: $input) {\n      results {\n        place {\n          name\n          address\n          location {\n            latitude\n            longitude\n          }\n        }\n      }\n    }\n  }\n",
                        name: "GraphQL request",
                        locationOffset: {
                            line: 1,
                            column: 1
                        }
                    }
                }
            };
            const Ft = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "SearchPlaces"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SearchPlacesInput"
                                }
                            }
                        },
                        directives: []
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "fetchOnlyFirst"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        },
                        directives: []
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "searchPlaces"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "results"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "label"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "mainText"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "secondaryText"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "types"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "position"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "placeId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "destType"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "placeType"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "languageCode"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "maxLengthOfStayInDays"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "place"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "fetchOnlyFirst"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "fetchOnlyFirst"
                                                    }
                                                }
                                            }],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "location"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "latitude"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "longitude"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "source"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "encodedAutocompleteMeta"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 514,
                    source: {
                        body: "\n  query SearchPlaces($input: SearchPlacesInput!, $fetchOnlyFirst: Boolean) {\n    searchPlaces(input: $input) {\n      results {\n        label\n        mainText\n        secondaryText\n        types\n        position\n        placeId\n        destType\n        placeType\n        languageCode\n        maxLengthOfStayInDays\n        place(fetchOnlyFirst: $fetchOnlyFirst) {\n          location {\n            latitude\n            longitude\n          }\n        }\n        source\n        encodedAutocompleteMeta\n      }\n    }\n  }\n",
                        name: "GraphQL request",
                        locationOffset: {
                            line: 1,
                            column: 1
                        }
                    }
                }
            };
            const Et = ["route", "postal_code", "street_address"];
            class Tt {
                constructor(e) {
                    var n;
                    let {
                        i18n: t
                    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    const i = (0, r.getRequestContext)(),
                        a = i.getSiteType();
                    this.isEnabled = !0, this.autocompleteURL = (e => "prod" === e.getBPlatformEnvironment() ? "https://accommodations.booking.com/autocomplete.json" : "https://accommodations.dqs.booking.com/autocomplete.json")(i), this.language = i.getLanguage(), this.siteType = a, this.isImages = !1, this.pageviewId = i.getPageviewId(), this.CDNOrigin = i.getCDNOrigin(), this.aid = (null === (n = i.getAffiliate()) || void 0 === n ? void 0 : n.id) || -9999, this.apolloClient = e, this.i18n = t, this.isMobileIndex = "index" === (0, se.ZP)() && a === ee.SiteType.MDOT, this.isMobileIndex && (this.autocompleteTimeout = 6e4), this.location = this.getAutocompleteLocation(i), (0, d.trackExperimentStage)(pt(), ct)
                }
                setEnabled(e) {
                    this.isEnabled = e
                }
                async getDestinations(e, n) {
                    if (!this.isEnabled) return null;
                    const t = ft();
                    if ((0, d.trackExperimentStage)(pt(), mt), this.lastQuery = e, e.match(/[0-9]/) && !t && (null === n || void 0 === n || !n.skipFallback)) {
                        const n = await this.getMergedResults(e);
                        return ht(n), n
                    }
                    const i = Date.now();
                    this.siteType === ee.SiteType.WWW && (0, d.trackExperimentStage)(d.exp `HVLDTLUedKNKNKPHcBaTfLXT`, 1), this.siteType === ee.SiteType.MDOT && (0, d.trackExperimentStage)(d.exp `HVLDTLUeCDWOODPJRPBCNAPcdXUC`, 1);
                    const a = t || null !== n && void 0 !== n && n.filters ? await this.getRegularAggregator(e, {
                        filters: null === n || void 0 === n ? void 0 : n.filters,
                        skipFallback: null === n || void 0 === n ? void 0 : n.skipFallback
                    }) : await this.getRegular(e);
                    if ((0, d.trackGoalWithValue)("js_autocomplete_request_latency", Date.now() - i), !this.shouldStillProcessThisQuery(e)) return null;
                    if ((!a || !a.length) && !t && (null === n || void 0 === n || !n.skipFallback)) {
                        const n = await this.getSearchPlaces(e);
                        return ht(n), n
                    }
                    return ht(a), a
                }
                async getRegular(e) {
                    const n = await (0, ut.XN)(this.autocompleteURL, {
                        timeoutMs: this.autocompleteTimeout,
                        method: "POST",
                        credentials: "include",
                        body: JSON.stringify({
                            query: e,
                            pageview_id: this.pageviewId,
                            aid: this.aid,
                            language: this.language,
                            size: 5,
                            search_params: {
                                enable_request_context_boost: !0
                            },
                            ...this.location ? {
                                request_context: {
                                    dest_type: this.location.destType,
                                    dest_id: this.location.destId
                                }
                            } : {}
                        })
                    }).then((e => {
                        if (e.ok) return e.json()
                    })).catch((e => {
                        this.isMobileIndex ? (0, q.reportError)(e) : function(e) {
                            "AbortError" !== e.name && (e.extraInfo = {
                                errorGroup: "Autocomplete Fetch Error"
                            }, (0, q.reportError)(e))
                        }(e)
                    }));
                    if (!this.shouldStillProcessThisQuery(e)) return null;
                    if (!n || !n.results || !n.results.length) return null;
                    return n.results.map(((e, n) => function(e, n) {
                        var t, i, a;
                        let r = e.labels.map((e => e.text)).join(", ");
                        return null !== (t = e.meta_matches) && void 0 !== t && t.length && (r = e.labels[0].text + " \u2022 " + e.meta_matches.map((e => e.text)).join(" \u2022 ")), {
                            cc1: e.cc1,
                            encodedAutocompleteMeta: e.roundtrip,
                            webFilters: e.web_filters,
                            destId: Number(e.dest_id),
                            destType: e.dest_type,
                            image: n.isImages && e.photo_uri ? {
                                url: n.CDNOrigin + e.photo_uri
                            } : void 0,
                            index: n.index,
                            isHomesSearchEnabled: e.b_show_entire_homes_checkbox,
                            iconType: St(e.dest_type, {
                                isSkiItem: e.is_ski_item,
                                isImages: n.isImages
                            }),
                            langCode: e.lc,
                            maxLOS: null === (i = e.b_max_los_data) || void 0 === i ? void 0 : i.extendedLos,
                            metaMatchPropertyTypeId: null === (a = e.meta_matches) || void 0 === a || null === (a = a[0]) || void 0 === a ? void 0 : a.id,
                            subtitle: e.label2,
                            title: e.label1,
                            latitude: e.latitude,
                            longitude: e.longitude,
                            valueForInput: r
                        }
                    }(e, {
                        i18n: this.i18n,
                        index: n,
                        isImages: Boolean(this.isImages),
                        CDNOrigin: this.CDNOrigin
                    })))
                }
                async getRegularAggregator(e, n) {
                    var t, i;
                    const a = null !== n && void 0 !== n && n.filters ? this.getAutocompleteFilters(null === n || void 0 === n ? void 0 : n.filters) : void 0,
                        r = null !== n && void 0 !== n && n.skipFallback ? void 0 : {
                            mergeResults: !0,
                            nbMaxMergedResults: 6,
                            nbMaxThirdPartyResults: 3,
                            sources: [Te.zn.GOOGLE, Te.zn.HERE]
                        },
                        d = await (null === (t = this.apolloClient) || void 0 === t ? void 0 : t.query({
                            query: _t,
                            variables: {
                                input: {
                                    prefixQuery: e,
                                    nbSuggestions: 5,
                                    filters: a,
                                    fallbackConfig: r,
                                    requestConfig: {
                                        enableRequestContextBoost: !0
                                    },
                                    requestContext: {
                                        pageviewId: this.pageviewId || "",
                                        location: this.location
                                    }
                                }
                            }
                        }));
                    if (!this.shouldStillProcessThisQuery(e) || null === d || void 0 === d || null === (i = d.data) || void 0 === i || null === (i = i.autoCompleteSuggestions) || void 0 === i || null === (i = i.results) || void 0 === i || !i.length) return null;
                    return d.data.autoCompleteSuggestions.results.map(((e, n) => function(e, n) {
                        var t, i, a, r, d;
                        let s = (null === (t = e.displayInfo.labelComponents) || void 0 === t ? void 0 : t.map((e => e.name)).join(", ")) || e.displayInfo.title;
                        const l = e.metaData.autocompleteResultSource,
                            o = l === Te.zn.GOOGLE,
                            u = l === Te.zn.GOOGLE || l === Te.zn.HERE;
                        null !== (i = e.displayInfo.labelComponents) && void 0 !== i && i.length && null !== (a = e.metaData.metaMatches) && void 0 !== a && a.length && (s = e.displayInfo.labelComponents[0].name + " \u2022 " + e.metaData.metaMatches.map((e => e.text)).join(" \u2022 "));
                        let c = u ? e.displayInfo.label : e.displayInfo.title;
                        null !== (r = e.metaData.metaMatches) && void 0 !== r && r.length && !u && (c += " \u2022 " + e.metaData.metaMatches.map((e => e.text)).join(" \u2022 "));
                        let m = o;
                        o && e.metaData.autocompleteResultId && e.destination.latitude && e.destination.longitude && (m = !1, Nt.Z.set(e.metaData.autocompleteResultId, {
                            latitude: e.destination.latitude,
                            longitude: e.destination.longitude
                        }));
                        const v = u ? {
                                [Te.zn.GOOGLE]: Te.Fd.GOOGLE,
                                [Te.zn.HERE]: Te.Fd.HERE
                            }[l] : void 0,
                            k = u ? "google-place" : St(e.destination.destType.toLowerCase(), {
                                isSkiItem: e.metaData.isSkiItem,
                                isImages: n.isImages
                            });
                        return {
                            cc1: e.destination.countryCode || "",
                            encodedAutocompleteMeta: e.metaData.roundTrip || void 0,
                            webFilters: e.metaData.webFilters || void 0,
                            destId: e.destination.destId,
                            destType: e.destination.destType.toLowerCase(),
                            image: n.isImages && e.displayInfo.imageUrl ? {
                                url: n.CDNOrigin + e.displayInfo.imageUrl
                            } : void 0,
                            index: n.index,
                            isHomesSearchEnabled: Boolean(e.displayInfo.showEntireHomesCheckbox),
                            iconType: k,
                            langCode: e.metaData.langCode,
                            maxLOS: e.metaData.maxLosData.extendedLoS,
                            metaMatchPropertyTypeId: null === (d = e.metaData.metaMatches) || void 0 === d || null === (d = d[0]) || void 0 === d ? void 0 : d.id,
                            subtitle: u ? void 0 : e.displayInfo.subTitle || "",
                            title: c,
                            latitude: e.destination.latitude,
                            longitude: e.destination.longitude,
                            valueForInput: s,
                            isGoogleResult: o,
                            isGoogleResultNotResolved: m,
                            placeId: o ? e.metaData.autocompleteResultId : void 0,
                            source: v
                        }
                    }(e, {
                        i18n: this.i18n,
                        index: n,
                        isImages: Boolean(this.isImages),
                        CDNOrigin: this.CDNOrigin
                    })))
                }
                async getSearchPlaces(e) {
                    var n, t;
                    let i = null;
                    const a = await (null === (n = this.apolloClient) || void 0 === n ? void 0 : n.query({
                        query: Ft,
                        variables: {
                            input: {
                                searchString: e,
                                sessionToken: this.pageviewId
                            },
                            fetchOnlyFirst: !0
                        }
                    }));
                    return this.shouldStillProcessThisQuery(e) ? (null !== a && void 0 !== a && null !== (t = a.data.searchPlaces) && void 0 !== t && null !== (t = t.results) && void 0 !== t && t.length && (i = a.data.searchPlaces.results.map(((e, n) => {
                        var t, i, a;
                        let r = !0;
                        return e.placeId && null !== (t = e.place) && void 0 !== t && null !== (t = t.location) && void 0 !== t && t.latitude && e.place.location.longitude && (r = !1, Nt.Z.set(e.placeId, {
                            latitude: e.place.location.latitude,
                            longitude: e.place.location.longitude
                        })), {
                            destId: e.placeId,
                            destType: e.destType.toLowerCase(),
                            placeId: e.placeId,
                            placeType: e.placeType || void 0,
                            latitude: null === (i = e.place) || void 0 === i || null === (i = i.location) || void 0 === i ? void 0 : i.latitude,
                            longitude: null === (a = e.place) || void 0 === a || null === (a = a.location) || void 0 === a ? void 0 : a.longitude,
                            title: e.label,
                            valueForInput: e.label,
                            source: e.source,
                            iconType: this.siteType === ee.SiteType.WWW && (0, d.trackExperiment)(d.exp `HVLDTLUedKNKNKPHcBaTfLXT`) || this.siteType === ee.SiteType.MDOT && (0, d.trackExperiment)(d.exp `HVLDTLUeCDWOODPJRPBCNAPcdXUC`) ? "google-place" : "",
                            index: n,
                            isGoogleResult: e.source === Te.Fd.GOOGLE,
                            isGoogleResultNotResolved: r,
                            isTitleFontNormal: this.isMobileIndex,
                            langCode: e.languageCode,
                            maxLOS: e.maxLengthOfStayInDays || void 0,
                            encodedAutocompleteMeta: e.encodedAutocompleteMeta || void 0
                        }
                    }))), i) : null
                }
                async getMergedResults(e) {
                    const [n, t] = await Promise.all([this.getRegular(e), this.getSearchPlaces(e)]);
                    if (!this.shouldStillProcessThisQuery(e)) return null;
                    if (!n || !n.length) return t;
                    const i = n,
                        a = null === t || void 0 === t ? void 0 : t.filter((e => e.placeType && -1 !== Et.indexOf(e.placeType)));
                    return a && a.length && (i.unshift(...a.slice(0, Math.min(3, 6))), i.length = Math.min(i.length, 6)), i.forEach(((e, n) => {
                        e.index = n
                    })), i.length ? i : null
                }
                shouldStillProcessThisQuery(e) {
                    return this.lastQuery === e && this.isEnabled
                }
                async fetchSearchPlaceLatLog(e, n) {
                    var t, i;
                    if (ft()) {
                        var a, r;
                        const t = await (null === (a = this.apolloClient) || void 0 === a ? void 0 : a.query({
                            query: yt,
                            variables: {
                                input: {
                                    autocompleteResultId: e,
                                    autocompleteResultSource: {
                                        [Te.Fd.GOOGLE]: Te.zn.GOOGLE,
                                        [Te.Fd.HERE]: Te.zn.HERE
                                    }[n]
                                }
                            }
                        }));
                        return null === t || void 0 === t || null === (r = t.data) || void 0 === r ? void 0 : r.resolveSuggestion
                    }
                    const d = await (null === (t = this.apolloClient) || void 0 === t ? void 0 : t.query({
                        query: bt,
                        variables: {
                            input: {
                                placeId: e,
                                placeSource: n
                            }
                        }
                    }));
                    return null === d || void 0 === d || null === (i = d.data) || void 0 === i || null === (i = i.searchPlaceDetails) || void 0 === i || null === (i = i.results) || void 0 === i || null === (i = i[0]) || void 0 === i || null === (i = i.place) || void 0 === i ? void 0 : i.location
                }
                async resolveSearchPlaceIdToLatLon(e, n) {
                    const t = Nt.Z.get(e);
                    if (t) return t;
                    if (!n) return (0, q.reportWarning)("Tried to resolve search place without place source"), null;
                    (0, d.trackCustomGoal)(pt(), gt);
                    const i = await this.fetchSearchPlaceLatLog(e, n);
                    if (!i || !i.latitude || !i.longitude) return null;
                    const a = {
                        latitude: i.latitude,
                        longitude: i.longitude
                    };
                    return Nt.Z.set(e, a), a
                }
                getAutocompleteFilters(e) {
                    const n = [];
                    return e.destId && e.destType && e.destType === Te.z5.CITY && n.push({
                        filterType: Te.Qz.CITY,
                        filterValues: [e.destId + ""]
                    }), e.resultTypes && n.push({
                        filterType: Te.Qz.TYPE,
                        filterValues: e.resultTypes.map((e => e.valueOf()))
                    }), n.length ? {
                        apiFilters: n
                    } : null
                }
                getAutocompleteLocation(e) {
                    if ("searchresults" !== (0, se.ZP)() && "propertypage" !== (0, se.ZP)()) return null;
                    const n = e.getBasePageUrl(),
                        t = (0, yn.G)(n.searchParams);
                    return "destId" in t && t.destId ? {
                        destId: t.destId,
                        destType: t.destType
                    } : null
                }
            }
            const Ct = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "RecPlatformRecElementCards"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "recommendationElementCardsInput"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "RecommendationElementCardsInput"
                                }
                            }
                        },
                        directives: []
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "recommendationPlatform"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "recommendationElementCards"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "input"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "recommendationElementCardsInput"
                                            }
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "recommendations"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "header"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "title"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cards"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "filterGroup"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "filterGroupName"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "filterGroupType"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "roundTripVariable"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 482,
                    source: {
                        body: "\n  query RecPlatformRecElementCards(\n    $recommendationElementCardsInput: RecommendationElementCardsInput!\n  ) {\n    recommendationPlatform {\n      recommendationElementCards(input: $recommendationElementCardsInput) {\n        recommendations {\n          header {\n            title\n          }\n          cards {\n            filterGroup {\n              filterGroupName\n              filterGroupType\n            }\n            roundTripVariable\n          }\n        }\n      }\n    }\n  }\n",
                        name: "GraphQL request",
                        locationOffset: {
                            line: 1,
                            column: 1
                        }
                    }
                }
            };
            const It = ["600"];
            class At {
                constructor(e) {
                    this.apolloClient = e, this.requestContext = (0, r.getRequestContext)()
                }
                shouldStillProcessThisQuery(e) {
                    return this.lastQuery === e
                }
                getPayload(e) {
                    return {
                        recommendationElementCardsInput: {
                            useCase: "mp_search_intent_www_filter_groups",
                            strategyIds: It,
                            tracking: {
                                source: "search-intent",
                                medium: "desktop",
                                campaign: "searchbox"
                            },
                            trip: e,
                            pagination: {
                                limit: 5
                            }
                        }
                    }
                }
                async getItems(e, n) {
                    var t, i, a, r, s, l;
                    const o = JSON.stringify(e);
                    this.lastQuery = o;
                    const u = null === (t = e.query) || void 0 === t || null === (t = t.location) || void 0 === t ? void 0 : t.locationId,
                        c = null === (i = e.query) || void 0 === i || null === (i = i.location) || void 0 === i ? void 0 : i.locationType,
                        {
                            destName: m
                        } = n;
                    if (!u || !c) return null;
                    const v = await (null === (a = this.apolloClient) || void 0 === a ? void 0 : a.query({
                        query: Ct,
                        variables: this.getPayload(e.query)
                    }));
                    if (!this.shouldStillProcessThisQuery(o)) return null;
                    const k = null === v || void 0 === v || null === (r = v.data) || void 0 === r || null === (r = r.recommendationPlatform) || void 0 === r || null === (r = r.recommendationElementCards) || void 0 === r || null === (r = r.recommendations) || void 0 === r ? void 0 : r[0];
                    if (null === k || void 0 === k || null === (s = k.cards) || void 0 === s || !s.length) return null;
                    const g = null === (l = k.header) || void 0 === l ? void 0 : l.title,
                        p = this.requestContext.getLanguage(),
                        f = k.cards.filter((e => {
                            var n;
                            return (null === (n = e.filterGroup) || void 0 === n ? void 0 : n.filterGroupName) && e.filterGroup.filterGroupType
                        }));
                    return f.length && (0, d.trackCustomGoal)(d.exp `HVLDTLUedKNKNKHcVdaWMaBQOHT`, 2), f.map(((e, n) => {
                        var t, i;
                        const a = ((null === (t = e.filterGroup) || void 0 === t ? void 0 : t.filterGroupName) || "").toLocaleLowerCase(),
                            r = ((null === (i = e.filterGroup) || void 0 === i ? void 0 : i.filterGroupType) || "").split("~").join("="),
                            d = {
                                destId: u,
                                destType: c,
                                index: n,
                                langCode: p,
                                webFilters: r,
                                filterId: r,
                                encodedAutocompleteMeta: e.roundTripVariable ? ? void 0,
                                presentation: {
                                    noIcon: !0,
                                    titleFontNormal: !0
                                },
                                title: `${m} <b>${a}</b>`,
                                valueForInput: `${m} ${a}`
                            };
                        return 0 === n && g && (d.titleAbove = {
                            text: g,
                            variant: "small_1",
                            color: "neutral_alt",
                            spacing: "small"
                        }), d
                    }))
                }
            }
            var Ot = t("0835130d");
            let Dt = function(e) {
                return e.CABINCLASS_BUSINESS = "CABINCLASS_BUSINESS", e.CABINCLASS_CLASS_TYPE_UNKNOWN = "CABINCLASS_CLASS_TYPE_UNKNOWN", e.CABINCLASS_ECONOMY = "CABINCLASS_ECONOMY", e.CABINCLASS_FIRST = "CABINCLASS_FIRST", e.CABINCLASS_PREMIUM_BUSINESS = "CABINCLASS_PREMIUM_BUSINESS", e.CABINCLASS_PREMIUM_ECONOMY = "CABINCLASS_PREMIUM_ECONOMY", e.CABINCLASS_PREMIUM_FIRST = "CABINCLASS_PREMIUM_FIRST", e.ECONOMY = "ECONOMY", e
            }({});
            Dt.ECONOMY;
            var Rt = t("dd6086f7");
            const xt = () => d.exp `OABBaJXCeZVGFTSJXZUKe`,
                Pt = () => 1 === (0, d.trackExperiment)(xt());
            const Lt = d.exp `cCHObKdPHMXCeZVWQIORe`,
                wt = d.exp `cCHObKdPHMXCeZVWQIOLBBVYYT`,
                Bt = () => (0, _.sv)() === _.NM.MDOT ? wt : Lt;
            (0, d.trackExperiment)(Bt());
            const Ut = {},
                Mt = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "RecentSearchesCarousel"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "staysRecommendationInput"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "RecommendationElementCardsInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "flightsRecommendationInput"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "RecommendationElementCardsInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "includeRecommendations"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "includeFlights"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "recommendationPlatform"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "includeRecommendations"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: {
                                            kind: "Name",
                                            value: "staysRecommendations"
                                        },
                                        name: {
                                            kind: "Name",
                                            value: "recommendationElementCards"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "input"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "staysRecommendationInput"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recommendations"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "uxLabels"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "value"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cards"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "searchHistoryItem"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "originalId"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "vertical"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "destinations"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "type"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "countryCode"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "countryName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "highlightedProducts"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "searchParams"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "order"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "bookingWindow"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkinDate"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkoutDate"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "guests"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "adults"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "children"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "mainImage"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "genericUrl"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "rooms"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "total"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "createdAt"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "uxLabels"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "value"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: {
                                            kind: "Name",
                                            value: "flightsRecommendations"
                                        },
                                        name: {
                                            kind: "Name",
                                            value: "recommendationElementCards"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "input"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "flightsRecommendationInput"
                                                }
                                            }
                                        }],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "includeFlights"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recommendations"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "uxLabels"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "value"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cards"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "searchHistoryItem"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "originalId"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "vertical"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "createdAt"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "type"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "origins"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "type"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "destinations"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "type"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "bookingWindow"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkinDate"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkoutDate"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "guests"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "adults"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "children"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "searchParams"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "uxLabels"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "value"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "recentSearches"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "skip"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "includeRecommendations"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "campaignId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "carouselName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "searches"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subtitle"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subtitle2"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "numFilters"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "destType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "destId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "countryCode"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbRooms"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkin"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkout"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbAdults"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbChildren"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "childrenAges"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "imageUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "highlightedHotel"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "order"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nflt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "previousSearchId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "filters"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "value"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "createdAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 2786,
                        source: {
                            body: "\n  query RecentSearchesCarousel(\n    $staysRecommendationInput: RecommendationElementCardsInput!\n    $flightsRecommendationInput: RecommendationElementCardsInput!\n    $includeRecommendations: Boolean!\n    $includeFlights: Boolean!\n  ) {\n    recommendationPlatform @include(if: $includeRecommendations) {\n      staysRecommendations: recommendationElementCards(\n        input: $staysRecommendationInput\n      ) {\n        recommendations {\n          uxLabels {\n            name\n            value\n          }\n          cards {\n            searchHistoryItem {\n              originalId\n              vertical\n              destinations {\n                id\n                name\n                type\n              }\n              countryCode\n              countryName\n              highlightedProducts\n              searchParams\n              order\n              bookingWindow {\n                checkinDate\n                checkoutDate\n              }\n              guests {\n                adults\n                children\n              }\n              mainImage {\n                genericUrl\n                id\n              }\n              rooms {\n                total\n              }\n              createdAt\n            }\n            uxLabels {\n              name\n              value\n            }\n          }\n        }\n      }\n      flightsRecommendations: recommendationElementCards(\n        input: $flightsRecommendationInput\n      ) @include(if: $includeFlights) {\n        recommendations {\n          uxLabels {\n            name\n            value\n          }\n          cards {\n            searchHistoryItem {\n              originalId\n              vertical\n              createdAt\n              type\n              origins {\n                id\n                name\n                type\n              }\n              destinations {\n                id\n                name\n                type\n              }\n              bookingWindow {\n                checkinDate\n                checkoutDate\n              }\n              guests {\n                adults\n                children\n              }\n              searchParams\n            }\n            uxLabels {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n    recentSearches @skip(if: $includeRecommendations) {\n      campaignId\n      carouselName\n      title\n      searches {\n        title\n        subtitle\n        subtitle2\n        numFilters\n        destType\n        destId\n        countryCode\n        nbRooms\n        checkin\n        checkout\n        nbAdults\n        nbChildren\n        childrenAges\n        imageUrl\n        highlightedHotel\n        order\n        nflt\n        previousSearchId\n        filters {\n          name\n          value\n        }\n        createdAt\n      }\n    }\n  }\n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };

            function Ht(e) {
                const n = { ...Ut,
                    ...e
                };
                return a.useQuery(Mt, n)
            }

            function Vt(e) {
                const n = { ...Ut,
                    ...e
                };
                return a.useSuspenseQuery(Mt, n)
            }
            const Gt = {
                    source: "index",
                    medium: "web",
                    campaign: "recent_searches_carousel"
                },
                Yt = function() {
                    const e = !!(!(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]) && Pt(),
                        n = (0, y.isFeatureRunning)(y.feature `OABBaJePefWJaWQOcPIQDNYRMeRT`),
                        t = (0, r.getRequestContext)().getSiteType() === ee.SiteType.MDOT;
                    return {
                        staysRecommendationInput: {
                            useCase: t ? "mvsf_mdot_stays_recent_searches" : "mvsf_www_stays_recent_searches",
                            strategyIds: ["901"],
                            tracking: Gt,
                            pagination: {
                                limit: 10
                            }
                        },
                        flightsRecommendationInput: {
                            useCase: t ? "mvsf_mdot_flights_recent_searches" : "mvsf_www_flights_recent_searches",
                            strategyIds: ["902"],
                            tracking: Gt,
                            pagination: {
                                limit: 10
                            }
                        },
                        includeRecommendations: e,
                        includeFlights: n
                    }
                };

            function Wt() {
                var e, n, t;
                let s = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                const l = (0, m.useI18n)(),
                    [o, u] = (0, lt.Z)();
                (0, ot.Z)(Ne.Mv, u);
                const v = (0, a.useApolloClient)(),
                    k = (0, i.useRef)();
                k.current || (k.current = new Tt(v, {
                    i18n: l
                }));
                const g = (0, i.useRef)();
                g.current || (g.current = new At(v)), (0, i.useEffect)((() => {
                    if ("MDOT" === (0, r.getRequestContext)().getSiteType()) {
                        const e = re(v),
                            n = new Date,
                            t = new Date(n);
                        t.setDate(n.getDate() + 1);
                        const i = {
                            checkin: (0, ae.Gr)(n),
                            checkout: (0, ae.Gr)(t)
                        };
                        i.checkin === (null === e || void 0 === e ? void 0 : e.checkin) && i.checkout === (null === e || void 0 === e ? void 0 : e.checkout) || (0, d.trackCustomGoal)(d.exp `OOIBBQMALHYYfPYTfHJEeIFVSHT`, 2)
                    }
                }), [v]);
                const p = (0, i.useRef)({
                        autocomplete: k.current,
                        currencyCode: (0, r.getRequestContext)().getCurrency() || "",
                        pageUrl: o,
                        searchMeta: null,
                        setPageUrl: u,
                        state: {},
                        filtersAutocomplete: g.current,
                        previousSearches: null,
                        previousSearchChildrenAges: []
                    }),
                    f = (0, se.ZP)(),
                    h = Le(f, o);
                h && "BOOKING_HOTEL_INDEX" === h && ((0, d.trackExperiment)(d.exp `aXTfOFJZMYeKTcaWQOcTEYOVTKe`), (0, r.getRequestContext)().isRobotRequest() || (0, d.trackExperimentStage)(d.exp `aXTfOFJZMYeKTcaWQOcTEYOVTKe`, 1));
                const N = function(e, n) {
                        var t, i, a, s, l;
                        const {
                            isWWW: o
                        } = (0, _.Z6)(), u = (0, se.ZP)(), c = Le(u, e) || "", m = (0, r.getRequestContext)().getVisitorCountry() || "";
                        let v = !0;
                        we(u, e) && c && m && o && Object.values(Pe).includes(c) && (v = !1);
                        const k = (0, r.getRequestContext)().toGRORequestContext(),
                            g = null === (t = (0, r.getRequestContext)().getUserIdentity()) || void 0 === t ? void 0 : t.authLevel,
                            p = (new Re).apiVersion("2.0").affiliateId(null === (i = k.marketingAttribution) || void 0 === i ? void 0 : i.affiliateId).language(null === (a = k.localization) || void 0 === a ? void 0 : a.language).currency(null === (s = k.localization) || void 0 === s ? void 0 : s.currency).platform(Te._D.www).placements(["FLIGHT_ELIGIBILITY"]).page(c).trackIdentifier(null === (l = k.experiment) || void 0 === l ? void 0 : l.identifiers, k.sessions).authLevel(g).userLocation(m).build(),
                            f = n ? Oe : Ae,
                            h = {
                                headers: {}
                            };
                        (0, d.trackExperiment)(d.exp `PcVSTdHUNFRWEAQeaRNeaRbdFIKe`) && (h.headers["X-Booking-SOS-Service-Route-AWS"] = "true");
                        const N = f({
                            variables: {
                                input: p
                            },
                            context: h,
                            skip: v
                        });
                        var S;
                        return null !== N && void 0 !== N && N.data && (null === (S = N.data.rankedItems) || void 0 === S || null === (S = S.placements) || void 0 === S || null === (S = S[0]) || void 0 === S || null === (S = S.shelves) || void 0 === S || null === (S = S[0]) || void 0 === S || null === (S = S.components) || void 0 === S || null === (S = S[0]) || void 0 === S || null === (S = S.elements) || void 0 === S || null === (S = S[0]) || void 0 === S ? void 0 : S.is_eligible) || !1
                    }(o),
                    S = function(e) {
                        const n = e.searchParams,
                            t = (0, yn.G)(n),
                            i = (0, ae.Xk)(n),
                            a = null === i ? {} : {
                                dates: {
                                    checkin: (0, ae.Gr)(i.checkin),
                                    checkout: (0, ae.Gr)(i.checkout)
                                }
                            },
                            {
                                nbRooms: r,
                                nbAdults: d,
                                nbChildren: s,
                                childrenAges: l
                            } = ge(n),
                            o = (0, se.ZP)(),
                            u = "landingpage" === o && !e.pathname.startsWith("/hotel/index") || "holidays" === o ? (0, xe.b)(e) : null;
                        return t.hotelIds && "destId" in t && (t.destId || (t.destType = Te.z5.HOTEL, t.destId = t.hotelIds[0]), delete t.hotelIds), {
                            input: {
                                childrenAges: l,
                                ...a,
                                location: { ...t,
                                    pageNameDetails: u
                                },
                                nbRooms: r,
                                nbAdults: d,
                                nbChildren: s,
                                travelPurpose: (0, pe.iX)(n)
                            }
                        }
                    }(o),
                    y = null === (e = S.input.location) || void 0 === e || null === (e = e.pageNameDetails) || void 0 === e ? void 0 : e.pageName,
                    b = !!y && Ne.kz.has(y),
                    {
                        data: F
                    } = st(o, {
                        useSuspense: s.useSuspense,
                        skipQuery: "searchresults" !== f || "searchresults" === f && it()
                    }),
                    {
                        data: E
                    } = Q((e => {
                        var n, t;
                        return null !== e && void 0 !== e && e.propertyFullExtended ? {
                            ppHighlightedHotelId: null === (n = e.propertyFullExtended.basicPropertyData) || void 0 === n ? void 0 : n.id,
                            propertyCurrencyCode: null === (t = e.propertyDetails) || void 0 === t ? void 0 : t.hotelCurrencyCode,
                            searchBoxPrefillData: e.propertyFullExtended.searchBoxPrefillData
                        } : null
                    }), s.useSuspense),
                    T = s.useSuspense ? Ze : qe,
                    {
                        data: C
                    } = T({
                        variables: {
                            sbInput: S.input
                        },
                        skip: "propertypage" !== f
                    }),
                    I = s.useSuspense ? We : Ye,
                    {
                        data: A
                    } = I({
                        variables: S,
                        skip: "searchresults" === f || "propertypage" === f || "broad-search" === f || b
                    }),
                    O = (0, se.FY)(),
                    D = c(),
                    R = s.useSuspense ? Xe : Qe,
                    {
                        data: x
                    } = R({
                        variables: {
                            input: D
                        },
                        skip: "deals" !== O
                    }),
                    P = Boolean(null === (n = (0, r.getRequestContext)().getAffiliate()) || void 0 === n ? void 0 : n.isHybrid),
                    L = s.useSuspense ? He : Me,
                    {
                        data: w
                    } = L({
                        skip: !P
                    });
                let B, U, M, H, V, G = !1,
                    Y = o.searchParams.get("highlighted_hotels"),
                    W = null;
                if (null !== E && void 0 !== E && E.searchBoxPrefillData) {
                    var K, $, q, Z, j, z, X;
                    const e = E.searchBoxPrefillData;
                    B = null === e || void 0 === e || null === (K = e.location) || void 0 === K ? void 0 : K.destName, U = null === C || void 0 === C || null === ($ = C.searchBoxContent) || void 0 === $ ? void 0 : $.options.entireHomesSearchEnabled, M = null === C || void 0 === C || null === (q = C.searchBoxContent) || void 0 === q ? void 0 : q.options.travellingForWorkSearchEnabled;
                    const n = E.ppHighlightedHotelId;
                    n && (Y = String(n)), "hotel_currency" === p.current.currencyCode && E.propertyCurrencyCode && (p.current.currencyCode = E.propertyCurrencyCode), W = {
                        destId: null === e || void 0 === e || null === (Z = e.location) || void 0 === Z ? void 0 : Z.destId,
                        destType: null === e || void 0 === e || null === (j = e.location) || void 0 === j ? void 0 : j.destType,
                        maxLengthOfStayInDays: null === C || void 0 === C || null === (z = C.searchBoxContent) || void 0 === z ? void 0 : z.maxLengthOfStayInDays,
                        ...e
                    }, H = null === C || void 0 === C || null === (X = C.searchBoxContent) || void 0 === X ? void 0 : X.previousSearches
                } else if (F.searchMeta) {
                    var ie;
                    B = null === (ie = F.destinationLocation) || void 0 === ie || null === (ie = ie.name) || void 0 === ie ? void 0 : ie.text, U = F.entireHomesSearchEnabled, G = !Boolean(F.flexibleSearchEnabled), W = { ...F.searchMeta,
                        flexibleDatesConfig: F.flexibleDatesConfig
                    }, H = F.previousSearches, p.current.guessedLocation = F.searchMeta.guessedLocation
                } else if (null !== A && void 0 !== A && A.searchBoxContent) {
                    var oe, ue, ce, me, ke, Ce, Ie, De, Be, Ue, Ve;
                    B = null === (oe = A.searchBoxContent) || void 0 === oe || null === (oe = oe.prefillData.location) || void 0 === oe ? void 0 : oe.destName, U = null === (ue = A.searchBoxContent) || void 0 === ue ? void 0 : ue.options.entireHomesSearchEnabled, M = null === (ce = A.searchBoxContent) || void 0 === ce ? void 0 : ce.options.travellingForWorkSearchEnabled, G = !(null !== (me = A.searchBoxContent) && void 0 !== me && null !== (me = me.options.dateFlexibilityOptions) && void 0 !== me && me.enabled);
                    const e = null !== (ke = A.searchBoxContent) && void 0 !== ke && ke.landingPageThemeId ? String(null === (Ce = A.searchBoxContent) || void 0 === Ce ? void 0 : Ce.landingPageThemeId) : null;
                    if (W = {
                            destId: null === (Ie = A.searchBoxContent) || void 0 === Ie || null === (Ie = Ie.prefillData.location) || void 0 === Ie ? void 0 : Ie.destId,
                            destType: null === (De = A.searchBoxContent) || void 0 === De || null === (De = De.prefillData.location) || void 0 === De ? void 0 : De.destType,
                            maxLengthOfStayInDays: null === (Be = A.searchBoxContent) || void 0 === Be ? void 0 : Be.maxLengthOfStayInDays,
                            landingPageThemeId: e,
                            ...null === (Ue = A.searchBoxContent) || void 0 === Ue ? void 0 : Ue.prefillData
                        }, H = null === (Ve = A.searchBoxContent) || void 0 === Ve ? void 0 : Ve.previousSearches, p.current.guessedLocation = A.searchBoxContent.guessedLocation, null !== x && void 0 !== x && x.campaign) {
                        const e = null === x || void 0 === x ? void 0 : x.campaign.checkInDate,
                            n = null === x || void 0 === x ? void 0 : x.campaign.checkOutDate;
                        var Ge;
                        if (e && n && (W.dates = { ...W.dates,
                                checkin: e,
                                checkout: n
                            }), "deals-campaign" === f) V = null === x || void 0 === x || null === (Ge = x.campaign) || void 0 === Ge ? void 0 : Ge.searchFilter
                    }
                } else s.broadSearchData && (B = s.broadSearchData.destinationName, W = { ...s.broadSearchData
                });
                p.current.previousSearches = function() {
                    var e;
                    let {
                        guessedLocation: n,
                        useSuspense: t = !1
                    } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    const i = (0, m.useI18n)(),
                        a = t ? Vt : Ht,
                        d = (0, be.pr)(),
                        {
                            data: s
                        } = a({
                            variables: Yt(!1),
                            skip: !d && !(0, be.Bu)()
                        }),
                        l = d ? 3 : 5,
                        o = (0, r.getRequestContext)().getLanguage(),
                        u = [];
                    return null !== n && void 0 !== n && n.destId && n.destType && n.destName && d && u.push({
                        isAroundMe: !0,
                        iconType: "around-me",
                        langCode: o,
                        destId: n.destId,
                        destType: n.destType,
                        title: i.trans((0, m.t)("m_ss_ac_around_current_location")),
                        subtitle: n.destName,
                        valueForInput: n.destName
                    }), null === s || void 0 === s || null === (e = s.recentSearches) || void 0 === e || null === (e = e.searches) || void 0 === e || e.filter((e => d || e.previousSearchId)).slice(0, l).forEach(((e, n) => {
                        e.destId && e.destType && u.push({
                            titleAbove: 0 === n ? {
                                text: d ? i.trans((0, m.t)("android_search_recent_search_title")) : i.trans((0, m.t)("hp_your_recent_searches_heading")),
                                variant: d ? "emphasized_1" : "headline_3",
                                spacing: "small"
                            } : void 0,
                            destId: e.destId,
                            destType: e.destType,
                            valueForInput: "",
                            iconType: "search-history",
                            title: e.title,
                            subtitle: e.subtitle,
                            langCode: o,
                            previousSearchDetails: {
                                checkin: new Date(e.checkin),
                                checkout: new Date(e.checkout),
                                nbAdults: e.nbAdults,
                                nbChildren: e.nbChildren || 0,
                                nbRooms: e.nbRooms,
                                childrenAges: e.childrenAges || [],
                                previousSearchId: e.previousSearchId || void 0
                            },
                            url: (0, Rt.d)({
                                destId: e.destId,
                                destType: e.destType,
                                checkin: e.checkin,
                                checkout: e.checkout,
                                nbAdults: e.nbAdults,
                                nbChildren: e.nbChildren,
                                nbRooms: e.nbRooms,
                                childrenAges: e.childrenAges,
                                fromSearchHistorySearchbox: !0
                            })
                        })
                    })), u
                }({
                    useSuspense: s.useSuspense,
                    guessedLocation: p.current.guessedLocation
                });
                const Ke = (0, Ot.dP)(H);
                return p.current.state = function(e) {
                    var n, t, i, a;
                    let {
                        apolloClient: d,
                        destinationName: s,
                        highlightedHotelId: l,
                        i18n: o,
                        isEntireHomeSearchEnabled: u,
                        isFlexibleSearchDisabled: c,
                        isTravellingForWorkSearchEnabled: v,
                        isFlightEligible: k,
                        isDealsUpsorterCheckboxEnabled: g,
                        isShowResultsOnMapEnabled: p,
                        pageUrl: f,
                        meta: h,
                        options: N,
                        entireHomeSearchLabel: S,
                        previousSearch: _,
                        orderUpsorter: y
                    } = e;
                    const b = null === h || void 0 === h ? void 0 : h.dates,
                        F = (0, be.zn)(),
                        E = (0, be.zn)();
                    E.setMonth(E.getMonth() + 16), E.setDate(0);
                    let T, C = {
                        start: {
                            date: void 0
                        },
                        end: {
                            date: void 0
                        }
                    };
                    (N.autoOpenCalendarAlways || N.autoOpenCalendarForNoDates && (null === b || void 0 === b || !b.checkin) && h) && (T = "start");
                    let I, A = b;
                    if ((null === (n = A) || void 0 === n || !n.checkin) && (null === (t = A) || void 0 === t || !t.checkout) && (N.useTodayTomorrowByDefault || !h)) {
                        const e = re(d);
                        null !== e && void 0 !== e && e.checkin && null !== e && void 0 !== e && e.checkout ? A = { ...e
                        } : C = {}
                    }
                    null !== (i = A) && void 0 !== i && i.checkin && A.checkout && (C = {
                        start: {
                            date: J()(A.checkin).toDate()
                        },
                        end: {
                            date: J()(A.checkout).toDate()
                        }
                    });
                    const O = (0, be.en)(),
                        D = (0, be.lj)(),
                        R = ("index" === (0, se.ZP)() || "booking-home" === (0, se.ZP)()) && (0, be.qU)(),
                        x = (0, be.BR)();
                    if (!c && (O || D || R || x)) {
                        var P;
                        const e = [...le.xd];
                        I = {
                            selected: (null === h || void 0 === h || null === (P = h.flexibleDatesConfig) || void 0 === P || null === (P = P.dateRangeCalendar) || void 0 === P ? void 0 : P.flexWindow) || (0, le.Up)(f.searchParams) || "exact",
                            windows: e
                        }
                    }
                    const L = {
                            init: {
                                ssne: s || void 0,
                                ssne_untouched: s || void 0,
                                highlighted_hotels: l || void 0,
                                theme_id: (null === h || void 0 === h ? void 0 : h.landingPageThemeId) || void 0,
                                order: y || void 0
                            }
                        },
                        w = (0, r.getRequestContext)().getSiteType() === ee.SiteType.MDOT && ("searchresults" === (0, se.ZP)() || "propertypage" === (0, se.ZP)()) && !(0, Se.fI)(),
                        B = c || !(0, be.lj)() && !x ? void 0 : (0, de.n)(o, f, {
                            maxLOS: (null === h || void 0 === h ? void 0 : h.maxLengthOfStayInDays) || void 0,
                            flexibleDatesConfig: null === h || void 0 === h ? void 0 : h.flexibleDatesConfig
                        }),
                        U = w ? 0 : -1,
                        M = null !== _ && void 0 !== _ && _.childrenAges ? [...null === _ || void 0 === _ ? void 0 : _.childrenAges, U] : [U],
                        H = (0, ye.av)(f);
                    var V;
                    return {
                        destination: {
                            option: {
                                title: s || "",
                                destId: (null === h || void 0 === h ? void 0 : h.destId) || void 0,
                                destType: (null === h || void 0 === h ? void 0 : h.destType) || void 0
                            },
                            name: "ss",
                            value: s || ""
                        },
                        date: { ...C,
                            activeTabId: null !== B && void 0 !== B && B.isEnabled ? "flexible" : "calendar",
                            open: T,
                            maxLOS: (null === h || void 0 === h ? void 0 : h.maxLengthOfStayInDays) || Ne.Kt,
                            flexibleDates: I,
                            longTermFlexibleDates: B
                        },
                        calendar: {
                            monthNames: (0, te.l)(o, {
                                form: ne.Z
                            }),
                            dayNames: Fe(o),
                            minDate: F,
                            maxDate: E,
                            firstWeekDay: (V = (0, r.getRequestContext)().getVisitorCountry(), V && fe.test(V) ? 7 : 1)
                        },
                        occupancy: {
                            adults: {
                                value: (null === h || void 0 === h ? void 0 : h.nbAdults) || ve.nbAdults,
                                name: "group_adults"
                            },
                            kids: {
                                value: (null === h || void 0 === h ? void 0 : h.nbChildren) || ve.nbChildren,
                                name: "group_children"
                            },
                            rooms: {
                                value: (null === h || void 0 === h ? void 0 : h.nbRooms) || ve.nbRooms,
                                name: "no_rooms"
                            },
                            holidayRental: {
                                value: (0, _e.fW)(f) ? 1 : 0,
                                name: "holidayRental"
                            },
                            pets: {
                                value: H ? 1 : 0,
                                name: "pets"
                            },
                            kidsAges: {
                                values: (null === h || void 0 === h || null === (a = h.childrenAges) || void 0 === a ? void 0 : a.filter(he.Dw)) || [],
                                name: "age",
                                defaultValues: M
                            }
                        },
                        homesAndApartmentsFirst: Ee({
                            pageUrl: f,
                            isEntireHomeSearchEnabled: u,
                            entireHomeSearchLabel: S,
                            i18n: o
                        }),
                        travelPurpose: {
                            checked: "business" === f.searchParams.get(pe.w3),
                            shown: v
                        },
                        dealsUpsorterCheckbox: {
                            checked: !1,
                            label: o.trans((0, m.t)("mlx_lp_searchbox_checkbox_deals")),
                            name: "order",
                            shown: g
                        },
                        flightSearch: {
                            checked: !1,
                            shown: k
                        },
                        showResultsOnTheMap: {
                            checked: !0,
                            shown: p
                        },
                        stitchRoomsWithAdults: "searchresults" === (0, se.ZP)(),
                        hiddenFields: L
                    }
                }({
                    apolloClient: v,
                    destinationName: B,
                    highlightedHotelId: Y,
                    i18n: l,
                    isEntireHomeSearchEnabled: U,
                    isFlexibleSearchDisabled: G,
                    isTravellingForWorkSearchEnabled: M,
                    isDealsUpsorterCheckboxEnabled: (0, Ot.yL)(),
                    isFlightEligible: !!we((0, se.ZP)(), o) && N,
                    pageUrl: o,
                    meta: W,
                    options: s,
                    previousSearch: Ke,
                    orderUpsorter: V
                }), W && (p.current.searchMeta = W), null !== (t = F.results) && void 0 !== t && t.length && (p.current.hasHighlightedProperty = Boolean(F.results.filter((e => null === e || void 0 === e ? void 0 : e.persuasion.highlighted)).length)), w && (p.current.affiliateOverrides = function(e) {
                    var n, t;
                    if (null === e || void 0 === e || null === (n = e.brandedPlatform) || void 0 === n || null === (n = n.components) || void 0 === n || !n.landingSearchbox) return;
                    const i = null === (t = e.brandedPlatform) || void 0 === t || null === (t = t.components) || void 0 === t ? void 0 : t.landingSearchbox,
                        a = (0, r.getRequestContext)().getSiteType(),
                        d = {
                            container: {},
                            input: {},
                            submitButton: {},
                            submitButtonHover: {}
                        };
                    return a === ee.SiteType.WWW && (i.backgroundColor && (d.container.backgroundColor = i.backgroundColor), i.borderColor && (d.container.borderColor = i.borderColor), i.fontColor && (d.container.color = i.fontColor), i.buttonBorderColor && "#07c" !== i.buttonBorderColor && (d.submitButton.borderColor = i.buttonBorderColor), i.buttonTextColor && (d.submitButton.color = i.buttonTextColor), i.buttonColor && (d.submitButton.backgroundColor = i.buttonColor), i.buttonBackgroundHoverColor && (d.submitButtonHover.backgroundColor = i.buttonBackgroundHoverColor), i.buttonTextHoverColor && (d.submitButtonHover.color = i.buttonTextHoverColor), i.inputBorderColor && (d.input.borderColor = i.inputBorderColor)), a === ee.SiteType.MDOT && (i.mobileBackgroundColor && (d.container.backgroundColor = i.mobileBackgroundColor), i.mobileFontColor && (d.container.color = i.mobileFontColor), i.mobileButtonColor && (d.submitButton.backgroundColor = i.mobileButtonColor), i.mobileButtonFontColor && (d.submitButton.color = i.mobileButtonFontColor)), d
                }(w)), p.current.previousSearchChildrenAges = null === Ke || void 0 === Ke ? void 0 : Ke.childrenAges, p.current
            }
        },
        "0835130d": (e, n, t) => {
            "use strict";
            t.d(n, {
                dP: () => $,
                BH: () => fe,
                yL: () => Q,
                Mh: () => te,
                tQ: () => ce,
                Uq: () => B,
                O5: () => w,
                V3: () => L,
                no: () => me,
                $Z: () => Ne,
                M9: () => he,
                dA: () => x,
                Ho: () => P,
                cA: () => J,
                qy: () => X,
                QK: () => z,
                ve: () => re,
                Y7: () => ie,
                s_: () => de,
                Ef: () => ae,
                JI: () => K,
                v8: () => C,
                F4: () => I,
                AZ: () => W,
                x2: () => Y,
                L7: () => G,
                dN: () => ge,
                C8: () => ke,
                tl: () => pe,
                dK: () => ve,
                iB: () => H,
                tk: () => U,
                Eb: () => ee,
                jA: () => V
            });
            var i = t("00d29d3a"),
                a = t("af1e2b38"),
                r = t("2c8dcc4b"),
                d = t("43a4d203"),
                s = t("dc6d28ff"),
                l = t("28dbd132"),
                o = t("cdfdb49e"),
                u = t("6ae86058"),
                c = t("dfbd7c7c"),
                m = t("0321416a"),
                v = t("24e040c9"),
                k = t.n(v),
                g = t("8da416e8"),
                p = t.n(g),
                f = t("67934118"),
                h = t("24bf173f");
            (0, v.extend)(p());
            let N = function(e) {
                return e.DEFAULT = "default", e.SOLO = "solo", e.COUPLE = "couple", e.GROUP = "group", e.FAMILY = "family", e.LOS5 = "los5", e.US = "us", e.BH_GUEST = "bh_guest", e.WWW = "www", e.MDOT = "mdot", e
            }({});

            function S(e, n) {
                var t, i;
                return function(e, n, t) {
                    var i;
                    const a = e.getVisitorCountry(),
                        r = e.getSiteType(),
                        d = (0, h.R)({ ...n || {},
                            isBusinessBooker: (0, f.C3)(e.getBasePageUrl().searchParams)
                        });
                    let s;
                    if (null !== n && void 0 !== n && null !== (i = n.dates) && void 0 !== i && i.checkin && n.dates.checkout) {
                        const e = k()(n.dates.checkin).utc();
                        s = k()(n.dates.checkout).utc().diff(e, "day")
                    }
                    const l = [N.DEFAULT, ...t || []];
                    switch (d) {
                        case h.Y.SOLO:
                            l.push(N.SOLO);
                            break;
                        case h.Y.COUPLE:
                            l.push(N.COUPLE);
                            break;
                        case h.Y.GROUP:
                            l.push(N.GROUP);
                            break;
                        case h.Y.FAMILY:
                            l.push(N.FAMILY)
                    }
                    s && s > 5 && l.push(N.LOS5);
                    "us" === a && l.push(N.US);
                    r === m.N.WWW && l.push(N.WWW);
                    r === m.N.MDOT && l.push(N.MDOT);
                    return [...new Set(l.concat(t || []))]
                }(e, n, "number" === typeof(null === n || void 0 === n || null === (t = n.dates) || void 0 === t ? void 0 : t.lengthOfStayInDays) && (null === n || void 0 === n || null === (i = n.dates) || void 0 === i ? void 0 : i.lengthOfStayInDays) > 5 ? [N.LOS5] : [])
            }
            var _ = t("b62ab38d"),
                y = t("524291ea"),
                b = t("faeb41f3");
            const F = ["index", "searchresults", "propertypage"];

            function E(e) {
                const n = (0, u.ZP)(),
                    t = (0, s.getRequestContext)().getBasePageUrl().searchParams,
                    i = Number(t.get("group_children")) > 0,
                    a = e && "kidsAges" === e.name || i;
                return F.includes(n) && a
            }

            function T(e) {
                (0, l.trackExperiment)(e), (0, l.trackExperimentStage)(e, 1);
                const n = function(e) {
                    switch (e) {
                        case "index":
                            return 2;
                        case "searchresults":
                            return 3;
                        case "propertypage":
                            return 4;
                        default:
                            return 0
                    }
                }((0, u.ZP)());
                n && (0, l.trackExperimentStage)(e, n)
            }

            function C(e) {
                E(e) && T(l.exp `OOIBTVaYCKBHbLGFaWJHFYNLHXT`)
            }

            function I(e) {
                E(e) && T(l.exp `cCcCcCJVBKRSEAcAbVaPEbBBcEXO`)
            }
            class A {
                constructor(e) {
                    (0, i.Z)(this, "isSendingBeacon", !1), (0, i.Z)(this, "payload", []), (0, i.Z)(this, "currentlySending", []), (0, i.Z)(this, "failCounter", 0), (0, i.Z)(this, "SENDING_DELAY", 0), (0, i.Z)(this, "FAIL_DELAY", 100), (0, i.Z)(this, "FAIL_ATTEMPTS", 10), this.endpoint = e
                }
                send(e, n) {
                    "undefined" !== typeof window && (this.payload.push({
                        hash: e,
                        value: n
                    }), this.isSendingBeacon || this.timeout || (this.timeout = window.setTimeout(this.sendRequest.bind(this), this.SENDING_DELAY)))
                }
                onRequestSucceeded() {
                    this.isSendingBeacon = !1, this.failCounter = 0, this.timeout = null, this.payload.length && this.sendRequest()
                }
                onRequestFailed() {
                    this.failCounter++, this.isSendingBeacon = !1, this.timeout = null, "undefined" !== typeof window && (this.failCounter >= this.FAIL_ATTEMPTS ? this.currentlySending = [] : (this.payload = this.payload.concat(this.currentlySending), this.currentlySending = [], this.timeout = window.setTimeout(this.sendRequest.bind(this), this.failCounter * this.FAIL_DELAY)))
                }
                async sendRequest() {
                    this.isSendingBeacon = !0, this.currentlySending = this.payload, this.payload = [];
                    await (0, r.XN)(this.endpoint, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            data: JSON.stringify(this.currentlySending)
                        })
                    }).then((e => {
                        e.ok ? this.onRequestSucceeded() : this.onRequestFailed()
                    }).bind(this)).catch((() => {
                        this.onRequestFailed()
                    }).bind(this))
                }
            }
            const O = new A("/mass_expose"),
                D = new A("/mass_track_goal"),
                R = (O.send.bind(O), D.send.bind(D), () => {
                    var e;
                    return (0, s.getRequestContext)().getSiteType() === d.SiteType.MDOT && "tablet" !== (null === (e = (0, s.getRequestContext)().getUserAgent()) || void 0 === e ? void 0 : e.deviceType) && "searchresults" === (0, u.ZP)()
                }),
                x = () => {
                    var e;
                    return R() && (null === (e = (0, s.getRequestContext)().getAffiliate()) || void 0 === e ? void 0 : e.isBookingOwned)
                },
                P = e => !!x() && (e ? (0, l.trackExperiment)(l.exp `OJVZAEDRYXMPCDWOOC`) === e : (0, l.trackExperiment)(l.exp `OJVZAEDRYXMPCDWOOC`) > 0),
                L = () => x() && (0, l.trackExperiment)(l.exp `OJVZAOQYINTIPOKHXdJOOIBBO`) > 0,
                w = () => {
                    var e;
                    return R() && (null === (e = (0, s.getRequestContext)().getAffiliate()) || void 0 === e ? void 0 : e.isCobrand) && (0, l.trackExperiment)(l.exp `ELSXPNTXSbHFfHBePVbSccbHWPHDDWe`) > 0
                },
                B = () => {
                    var e;
                    return R() && (null === (e = (0, s.getRequestContext)().getAffiliate()) || void 0 === e ? void 0 : e.isBookingBranded) && (0, l.trackExperiment)(l.exp `ELSXPNTXSbHFfHBYeINUFJUVBBVYYT`) > 0
                },
                U = () => x() ? (0, l.trackExperiment)(l.exp `OJVZAEDRYXMPCDWOOC`) : 0,
                M = e => {
                    x() && (0, l.trackExperimentStage)(l.exp `OJVZAEDRYXMPCDWOOC`, e)
                },
                H = e => {
                    x() && (0, l.trackCustomGoal)(l.exp `OJVZAEDRYXMPCDWOOC`, e)
                };

            function V(e, n, t) {
                const i = S(n, e);
                i.includes(N.LOS5) && M(4), i.includes(N.US) && M(5);
                const a = (0, b.gy)(e);
                a && a <= 3 && M(6), (0, _.Up)(t) && M(7), (null === e || void 0 === e ? void 0 : e.affiliateVerticalType) === c.FU.META && M(8), null !== e && void 0 !== e && e.dates || M(9)
            }

            function G(e, n, t) {
                if (!x()) return;
                const i = l.exp `OJVZAOQYINTIPOKHXdJOOIBBO`,
                    a = S(t, n);
                (0, l.trackExperimentStage)(i, 1), a.includes(N.SOLO) && M(2), a.includes(N.COUPLE) && M(3), a.includes(N.GROUP) && M(4), a.includes(N.FAMILY) && M(5), e.checkinDate && e.checkoutDate ? (M(7), (0, l.trackCustomGoal)(i, 3), e.kids && (M(8), (0, l.trackCustomGoal)(i, 4)), e.rooms && e.rooms > 1 && (M(9), (0, l.trackCustomGoal)(i, 5))) : (M(6), (0, l.trackCustomGoal)(i, 2))
            }
            const Y = () => {
                    var e;
                    R() && null !== (e = (0, s.getRequestContext)().getAffiliate()) && void 0 !== e && e.isCobrand && (0, l.trackExperimentStage)(l.exp `ELSXPNTXSbHFfHBePVbSccbHWPHDDWe`, 1)
                },
                W = () => {
                    var e;
                    R() && null !== (e = (0, s.getRequestContext)().getAffiliate()) && void 0 !== e && e.isBookingBranded && (0, l.trackExperimentStage)(l.exp `ELSXPNTXSbHFfHBYeINUFJUVBBVYYT`, 1)
                },
                K = () => {
                    const e = (0, u.ZP)();
                    if ((0, s.getRequestContext)().getSiteType() === d.SiteType.WWW) {
                        const n = l.exp `TZUfdKNKNKPRVfEeSPGOaYdYO`,
                            t = l.exp `TZUfdKNKNKPeTcZVfTLScXQOVWe`;
                        ((0, o.lj)() || (0, o.en)()) && ((0, l.trackExperimentStage)(n, 1), (0, l.trackExperimentStage)(t, 1), "landingpage" === e ? (0, l.trackExperimentStage)(n, 2) : "index" === e ? (0, l.trackExperimentStage)(n, 3) : "searchresults" === e && (0, l.trackExperimentStage)(n, 4))
                    } else if ((0, s.getRequestContext)().getSiteType() === d.SiteType.MDOT) {
                        const n = l.exp `TZUfCDWOODXaJPeTJLBWHZHT`,
                            t = l.exp `TZUfCDWOODUeQFaJefTLKGBfC`;
                        (0, o.qU)() && "index" === e && ((0, l.trackExperimentStage)(n, 1), (0, l.trackExperimentStage)(n, 3), (0, l.trackExperimentStage)(t, 1))
                    }
                },
                $ = e => null === e || void 0 === e ? void 0 : e.find((e => {
                    var n;
                    return null === e || void 0 === e || null === (n = e.childrenAges) || void 0 === n ? void 0 : n.length
                })),
                q = l.exp `OAZOXPCbDOLUPHET`;
            var Z = function(e) {
                return e[e.ALL_PAGES = 1] = "ALL_PAGES", e[e.CITY = 2] = "CITY", e[e.LANDMARK = 3] = "LANDMARK", e[e.REGION = 4] = "REGION", e[e.COUNTRY = 5] = "COUNTRY", e[e.DISTRICT = 6] = "DISTRICT", e[e.US_VISITOR = 7] = "US_VISITOR", e
            }(Z || {});
            const j = e => {
                const n = (0, y.b)(e);
                if (!n) return !1;
                const {
                    destType: t
                } = n;
                switch (t) {
                    case c.z5.CITY:
                    case c.z5.LANDMARK:
                    case c.z5.REGION:
                    case c.z5.COUNTRY:
                    case c.z5.DISTRICT:
                        return !0;
                    default:
                        return !1
                }
            };

            function z() {
                const e = (0, s.getRequestContext)().getBasePageUrl();
                if (j(e)) {
                    const n = (0, y.b)(e);
                    if (!n) return;
                    (0, l.trackExperimentStage)(q, Z.ALL_PAGES);
                    const {
                        destType: t
                    } = n;
                    switch (t) {
                        case c.z5.CITY:
                            (0, l.trackExperimentStage)(q, Z.CITY);
                            break;
                        case c.z5.LANDMARK:
                            (0, l.trackExperimentStage)(q, Z.LANDMARK);
                            break;
                        case c.z5.REGION:
                            (0, l.trackExperimentStage)(q, Z.REGION);
                            break;
                        case c.z5.COUNTRY:
                            (0, l.trackExperimentStage)(q, Z.COUNTRY);
                            break;
                        case c.z5.DISTRICT:
                            (0, l.trackExperimentStage)(q, Z.DISTRICT)
                    }
                    "us" === (0, s.getRequestContext)().getVisitorCountry() && (0, l.trackExperimentStage)(q, Z.US_VISITOR)
                }
            }

            function Q() {
                return j((0, s.getRequestContext)().getBasePageUrl()) && (0, l.trackExperiment)(q) > 0
            }

            function X() {
                (0, l.trackCustomGoal)(q, 1)
            }

            function J() {
                const e = (0, u.ZP)(),
                    n = (0, s.getRequestContext)().getSiteType() === d.SiteType.MDOT,
                    t = n ? l.exp `HVLDTLUeCDWOOWLacWIEFGJZAcXQeLT` : l.exp `HVLDTLUedKNKNKHcVdaWMbAfdJNXGecO`,
                    i = n ? l.exp `HVLDTLUeCDWOOWLacWIMebbDVLHTcO` : l.exp `HVLDTLUedKNKNKHcVdaWCTQQPJGEONC`;
                (0, l.trackExperimentStage)(t, 3), (0, l.trackExperimentStage)(i, 3), "index" === e ? ((0, l.trackExperimentStage)(t, 5), (0, l.trackExperimentStage)(i, 5)) : "searchresults" === e && ((0, l.trackExperimentStage)(t, 6), (0, l.trackExperimentStage)(i, 6))
            }

            function ee(e) {
                if ("searchresults" !== (0, u.ZP)()) return;
                const n = (0, s.getRequestContext)().getSiteType() === d.SiteType.MDOT ? l.exp `bPFEKVFZFOQHefKbAXWPHDDWe` : l.exp `bPFEKVFZFOQHefKbAXFRURURHe`;
                "adults" === e.name ? (0, l.trackCustomGoal)(n, 1) : "rooms" === e.name ? (0, l.trackCustomGoal)(n, 2) : "kids" === e.name && (0, l.trackCustomGoal)(n, 3)
            }
            const ne = () => (0, a.Z6)().isWWW ? l.exp `bLNUPMcZVSKZeQMIbAMITbaTaTaET` : l.exp `bLNUPMcZVSKZeQMIbAMITaYYfPHe`,
                te = () => (0, l.trackExperiment)(ne()) > 0,
                ie = () => {
                    (0, l.trackExperimentStage)(ne(), 1)
                },
                ae = () => {
                    (0, l.trackExperimentStage)(ne(), 2)
                },
                re = () => {
                    (0, l.trackCustomGoal)(ne(), 1)
                },
                de = () => {
                    (0, l.trackCustomGoal)(ne(), 2)
                },
                se = l.exp `OAZOXHcCVUbLYLedRDcOOIBBO`;
            var le = function(e) {
                return e[e.SB_IN_VIEW = 1] = "SB_IN_VIEW", e[e.CLICK_ANY = 2] = "CLICK_ANY", e[e.CLICK_DESTINATION = 3] = "CLICK_DESTINATION", e[e.CLICK_DATES = 4] = "CLICK_DATES", e[e.CLICK_OCCUPANCY = 5] = "CLICK_OCCUPANCY", e[e.CORE_CITY_CLICK_ANY = 6] = "CORE_CITY_CLICK_ANY", e[e.CORE_LANDMARK_CLICK_ANY = 7] = "CORE_LANDMARK_CLICK_ANY", e[e.THEME_CITY_CLICK_ANY = 8] = "THEME_CITY_CLICK_ANY", e
            }(le || {});

            function oe() {
                const e = "landingpage" === (0, u.ZP)(),
                    n = (0, y.b)((0, s.getRequestContext)().getBasePageUrl());
                return {
                    isCoreCityPage: e && n && n.destType === c.z5.CITY && !n.themeName,
                    isCoreLandmarkPage: e && n && n.destType === c.z5.LANDMARK && !n.themeName,
                    isThemeCityPage: e && n && n.destType === c.z5.CITY && n.themeName
                }
            }

            function ue() {
                (0, l.trackExperimentStage)(se, le.CLICK_ANY);
                const {
                    isCoreCityPage: e,
                    isCoreLandmarkPage: n,
                    isThemeCityPage: t
                } = oe();
                e ? (0, l.trackExperimentStage)(se, le.CORE_CITY_CLICK_ANY) : n ? (0, l.trackExperimentStage)(se, le.CORE_LANDMARK_CLICK_ANY) : t && (0, l.trackExperimentStage)(se, le.THEME_CITY_CLICK_ANY)
            }

            function ce() {
                const {
                    isCoreCityPage: e,
                    isCoreLandmarkPage: n,
                    isThemeCityPage: t
                } = oe();
                return e || n || t
            }

            function me() {
                return ce() && 1 === (0, l.trackExperiment)(se)
            }

            function ve() {
                (0, l.trackExperimentStage)(se, le.SB_IN_VIEW)
            }

            function ke() {
                ue(), (0, l.trackExperimentStage)(se, le.CLICK_DESTINATION)
            }

            function ge() {
                ue(), (0, l.trackExperimentStage)(se, le.CLICK_DATES)
            }

            function pe() {
                ue(), (0, l.trackExperimentStage)(se, le.CLICK_OCCUPANCY)
            }

            function fe() {
                const {
                    isMDOT: e
                } = (0, a.Z6)();
                return e ? l.exp `HVLDTLUeCDWOORXeUPIQC` : l.exp `HVLDTLUedKNKNKHXTeEWGWe`
            }

            function he() {
                return (0, l.trackExperiment)(fe()) > 0
            }

            function Ne() {
                const e = "index" === (0, u.ZP)(),
                    {
                        isWWW: n
                    } = (0, a.Z6)(),
                    t = 0 === (0, l.trackExperiment)(l.exp `HVLDTLUedRNYYdTUHSYBJNCFHe`);
                return !e || !n || ((0, l.trackExperimentStage)(l.exp `HVLDTLUedRNYYdTUHSYBJNCFHe`, 1), t)
            }
        },
        "2be56023": (e, n, t) => {
            "use strict";
            t.d(n, {
                $p: () => k,
                Ac: () => m,
                CJ: () => c,
                Ho: () => v,
                fI: () => u
            });
            var i = t("af1e2b38"),
                a = t("28dbd132"),
                r = t("6ae86058");
            const d = {
                    onRender: 1,
                    onView: 2,
                    onOpenOccupancy: 3
                },
                s = {
                    onOpenOccupancy: 1,
                    onChangeOccupancy: 2,
                    onAddKids: 3,
                    onSetKidsAge: 4,
                    onLandWithChildAgeZero: 5
                },
                l = a.exp `HVLDTLUeCDWOOWNAcBHSCQHbFPNbAEO`;

            function o() {
                return "searchresults" === (0, r.ZP)() && (0, i.Z6)().isMDOT
            }

            function u() {
                return o() && (0, a.trackExperiment)(l) > 0
            }

            function c(e, n) {
                var t;
                o() && ((0, a.trackExperimentStage)(l, d.onRender), "searchresults" === (null === n || void 0 === n ? void 0 : n.searchParams.get("src")) && null !== e && void 0 !== e && null !== (t = e.childrenAges) && void 0 !== t && t.some((e => 0 === e)) && (0, a.trackCustomGoal)(l, s.onLandWithChildAgeZero))
            }

            function m() {
                o() && (0, a.trackExperimentStage)(l, d.onView)
            }

            function v() {
                o() && ((0, a.trackCustomGoal)(l, s.onOpenOccupancy), (0, a.trackExperimentStage)(l, d.onOpenOccupancy))
            }

            function k(e) {
                o() && ((0, a.trackCustomGoal)(l, s.onChangeOccupancy), "kids" === (null === e || void 0 === e ? void 0 : e.name) && e.value && (0, a.trackCustomGoal)(l, s.onAddKids), "kidsAges" === (null === e || void 0 === e ? void 0 : e.name) && e.value && (0, a.trackCustomGoal)(l, s.onSetKidsAge))
            }
        },
        "284975bf": (e, n, t) => {
            "use strict";
            t.d(n, {
                X1: () => u,
                bW: () => c,
                eD: () => o,
                fW: () => l,
                kf: () => s
            });
            var i = t("af1e2b38"),
                a = t("28dbd132"),
                r = t("6ae86058"),
                d = t("b1f34e95");

            function s() {
                if ((0, i.Z6)().isMDOT) return "index" === (0, r.ZP)() && 1 === (0, a.trackExperiment)(a.exp `EJQKEBdQGPQWTCUZZOeGDPYDEZRETbUTHO`);
                switch ((0, r.ZP)()) {
                    case "index":
                    case "searchresults":
                    case "propertypage":
                        return 1 === (0, a.trackExperiment)(a.exp `EJQKdLOLOLOdGFdEbHeFUPecLUTVZMYCCceDUKe`);
                    default:
                        return !1
                }
            }

            function l(e) {
                var n;
                const t = (null === e || void 0 === e || null === (n = e.searchParams) || void 0 === n || null === (n = n.get("nflt")) || void 0 === n ? void 0 : n.split(d.ge)) || [],
                    {
                        isMDOT: r = !1
                    } = (0, i.Z6)(),
                    l = (r ? (0, a.trackExperiment)(a.exp `NAFQOPeYWPRFYZRUVbOMFcZSGMLaC`) > 0 : (0, a.trackExperiment)(a.exp `NAFQOPeYWbKdPSKYaFBddQSBLdaRO`) > 0) ? `${d.Oq.FILTER_HOTEL_TYPE}=1200` : `${d.Oq.FILTER_PRIVACY_TYPE}=3`;
                return s() && (t.includes(l) || t.includes(`${d.Oq.FILTER_PRIVACY_TYPE_NO_DATE}=3`))
            }

            function o(e) {
                const n = e.occupancy;
                if ("searchresults" === (0, r.ZP)() && n) {
                    var t, d, s;
                    const e = (0, i.Z6)().isMDOT ? a.exp `EJQKEBdQGPQWTCUZZOeGDPYDEZRETbUTHO` : a.exp `EJQKdLOLOLOdGFdEbHeFUPecLUTVZMYCCceDUKe`;
                    1 === (null === (t = n.rooms) || void 0 === t ? void 0 : t.value) ? (0, a.trackExperimentStage)(e, 2) : 2 === (null === (d = n.rooms) || void 0 === d ? void 0 : d.value) ? (0, a.trackExperimentStage)(e, 4) : null !== (s = n.rooms) && void 0 !== s && s.value && n.rooms.value > 2 && (0, a.trackExperimentStage)(e, 5), n.holidayRental && (0, a.trackCustomGoal)(e, 1 === n.holidayRental.value ? 1 : 2)
                }
            }

            function u(e) {
                "holidayRental" === e.name && (0, a.trackCustomGoal)((0, i.Z6)().isMDOT ? a.exp `EJQKEBdQGPQWTCUZZOeGDPYDEZRETbUTHO` : a.exp `EJQKdLOLOLOdGFdEbHeFUPecLUTVZMYCCceDUKe`, 3)
            }

            function c(e, n) {
                var t;
                if ("open" === e && null !== n && void 0 !== n && null !== (t = n.occupancy) && void 0 !== t && null !== (t = t.holidayRental) && void 0 !== t && t.shown) {
                    const {
                        isMDOT: e
                    } = (0, i.Z6)();
                    switch ((0, r.ZP)()) {
                        case "index":
                            (0, a.trackExperimentStage)(e ? a.exp `EJQKEBdQGPQWTCUZZOeGDPYDEZRETbUTHO` : a.exp `EJQKdLOLOLOdGFdEbHeFUPecLUTVZMYCCceDUKe`, 1), !e && (0, a.trackExperimentStage)(a.exp `EJQKdLOLOLOdGFdEbHeFUPecLUTVZMYCCceDUKe`, 6);
                            break;
                        case "searchresults":
                            !e && (0, a.trackExperimentStage)(a.exp `EJQKdLOLOLOdGFdEbHeFUPecLUTVZMYCCceDUKe`, 7);
                            break;
                        case "propertypage":
                            !e && (0, a.trackExperimentStage)(a.exp `EJQKdLOLOLOdGFdEbHeFUPecLUTVZMYCCceDUKe`, 8)
                    }
                }
            }
        },
        "0bf1d6ed": (e, n, t) => {
            "use strict";
            t.d(n, {
                i: () => v
            });
            var i = t("dc6d28ff"),
                a = t("c44dcb0c"),
                r = t("cdfdb49e");
            const d = e => {
                let {
                    autoCompleteSuggestions: n,
                    titleAboveFirstOption: t
                } = e;
                return ((null === n || void 0 === n ? void 0 : n.results) || []).map(((e, n) => ({
                    titleAbove: 0 === n ? t : void 0,
                    isPopularDest: !0,
                    iconType: "",
                    langCode: (0, i.getRequestContext)().getLanguage(),
                    maxLOS: e.metaData.maxLosData.extendedLoS || void 0,
                    destId: e.destination.destId,
                    destType: e.destination.destType,
                    title: e.displayInfo.title,
                    subtitle: e.displayInfo.subTitle || "",
                    valueForInput: `${e.displayInfo.title}, ${e.displayInfo.subTitle}`,
                    isHomesSearchEnabled: (0, r.pi)() && (e.displayInfo.showEntireHomesCheckbox ? ? !1)
                })))
            };
            var s = t("dfbd7c7c"),
                l = t("cedcabf9");
            const o = {},
                u = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "SearchBoxPopularDestinations"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "AutoCompleteRequestInput"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "autoCompleteSuggestions"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "input"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "results"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "destination"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "destId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "destType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayInfo"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "showEntireHomesCheckbox"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "subTitle"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "metaData"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "maxLosData"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "extendedLoS"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 411,
                        source: {
                            body: "\n  query SearchBoxPopularDestinations($input: AutoCompleteRequestInput!) {\n    autoCompleteSuggestions(input: $input) {\n      results {\n        destination {\n          destId\n          destType\n        }\n        displayInfo {\n          showEntireHomesCheckbox\n          title\n          subTitle\n        }\n        metaData {\n          maxLosData {\n            extendedLoS\n          }\n        }\n      }\n    }\n  }\n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };
            var c = t("0835130d");
            const m = 5;

            function v() {
                var e;
                let {
                    skip: n,
                    addAroundMe: t
                } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                const v = (0, a.useI18n)();
                n || (0, c.Y7)();
                const {
                    data: k
                } = function(e) {
                    const n = { ...o,
                        ...e
                    };
                    return l.useQuery(u, n)
                }({
                    variables: {
                        input: {
                            prefixQuery: "",
                            nbSuggestions: m
                        }
                    },
                    skip: n,
                    ssr: (0, c.$Z)()
                }), g = null === k || void 0 === k || null === (e = k.autoCompleteSuggestions) || void 0 === e ? void 0 : e.results, p = (0, i.getRequestContext)().getLanguage(), f = [];
                if (t && f.push({
                        isAroundMe: !0,
                        iconType: "around-me",
                        langCode: p,
                        destId: 0,
                        destType: s.z5.LATLONG,
                        title: v.trans((0, a.t)("m_ss_ac_around_current_location")),
                        valueForInput: ""
                    }), null !== g && void 0 !== g && g.length) {
                    const e = {
                        text: (0, c.Mh)() ? v.trans((0, a.t)("mvse_sbox_ac_header_trending_destinations")) : v.trans((0, a.t)("ss_ac_popular_nearby_destinations"))
                    };
                    (0, r.pr)() && (e.variant = "emphasized_1", e.spacing = "small"), (0, r.Yf)() && (e.variant = "small_1", e.color = "neutral_alt", e.spacing = "small"), (0, c.ve)(), f.push(...d({ ...k,
                        titleAboveFirstOption: e
                    }))
                }
                return f.length ? f : null
            }
        },
        db87586a: (e, n, t) => {
            "use strict";
            t.d(n, {
                P: () => s
            });
            var i = t("15199e50"),
                a = t("35bd00ce"),
                r = t("171cecd0"),
                d = t("c1a68871");

            function s(e) {
                return {
                    dayNames: Object.values((0, d.o)(e, {
                        form: r.Z
                    })),
                    monthNames: Object.values((0, a.l)(e, {
                        form: i.Z
                    }))
                }
            }
        },
        "768370ae": (e, n, t) => {
            "use strict";
            t.d(n, {
                Il: () => F,
                O3: () => T,
                av: () => E,
                dA: () => C,
                ep: () => b,
                mJ: () => l
            });
            var i = t("43a4d203"),
                a = t("dc6d28ff"),
                r = t("28dbd132"),
                d = t("6ae86058"),
                s = t("9c64ac31");
            const l = `${t("b1f34e95").Oq.FILTER_FACILITIES}=4`,
                o = 1,
                u = 2,
                c = 3,
                m = 4,
                v = 5,
                k = 6,
                g = 7,
                p = 8,
                f = 9,
                h = {
                    propertyPage: 1,
                    onView: 2,
                    onViewUSVisitor: 3
                };

            function N() {
                return S() && "searchresults" === (0, d.ZP)()
            }

            function S() {
                var e;
                const n = (0, a.getRequestContext)();
                return n.getSiteType() === i.SiteType.MDOT && "tablet" !== (null === (e = n.getUserAgent()) || void 0 === e ? void 0 : e.deviceType)
            }
            const _ = e => {
                const n = (0, a.getRequestContext)(),
                    t = n.getUserAgent(),
                    i = "Safari" === (null === t || void 0 === t ? void 0 : t.browserFamily),
                    d = "Chrome" === (null === t || void 0 === t ? void 0 : t.browserFamily),
                    s = "Android" === (null === t || void 0 === t ? void 0 : t.osName),
                    l = "us" === n.getVisitorCountry();
                if ((0, r.trackExperimentStage)(e, o), l && (0, r.trackExperimentStage)(e, u), i) {
                    parseFloat(t.browserVersion) < 18 ? (0, r.trackExperimentStage)(e, c) : (0, r.trackExperimentStage)(e, m)
                } else if (d) {
                    parseFloat(t.browserVersion) < 133 ? (0, r.trackExperimentStage)(e, v) : (0, r.trackExperimentStage)(e, k)
                } else(0, r.trackExperimentStage)(e, g);
                s ? (0, r.trackExperimentStage)(e, p) : (0, r.trackExperimentStage)(e, f)
            };

            function y() {
                if (S() && !(0, d.KF)("searchresults", "propertypage")) return !0;
                const e = r.exp `GDIcdSZcHCSCGVfOEJOOIBTCHT`;
                if (N()) {
                    const n = Boolean((0, r.trackExperiment)(e));
                    return _(e), n
                }
                return !1
            }

            function b() {
                if ((0, a.getRequestContext)().getSiteType() === i.SiteType.WWW) {
                    if ("propertypage" === (0, d.ZP)()) {
                        const e = Boolean((0, r.trackExperiment)(r.exp `GDIcdSZcHCSCGVfOMTXEUDdeOYC`));
                        return (0, r.trackExperimentStage)(r.exp `GDIcdSZcHCSCGVfOMTXEUDdeOYC`, h.propertyPage), e
                    }
                    return "broad-search" !== (0, d.ZP)()
                }
                return y()
            }

            function F() {
                return (0, a.getRequestContext)().getSiteType() === i.SiteType.WWW ? Boolean((0, r.trackExperiment)(r.exp `GDIcdSZcHCSIURSBVSGfZVFRURURHe`)) : !(0, d.KF)("propertypage", "searchresults") && y()
            }

            function E(e) {
                const n = e && (0, s.IM)(e.searchParams);
                return b() && Boolean(null === n || void 0 === n ? void 0 : n.includes(l))
            }

            function T() {
                if ((0, a.getRequestContext)().getSiteType() !== i.SiteType.WWW || "propertypage" !== (0, d.ZP)()) return;
                const e = "us" === (0, a.getRequestContext)().getVisitorCountry();
                (0, r.trackExperimentStage)(r.exp `GDIcdSZcHCSCGVfOMTXEUDdeOYC`, h.onView), e && (0, r.trackExperimentStage)(r.exp `GDIcdSZcHCSCGVfOMTXEUDdeOYC`, h.onViewUSVisitor)
            }

            function C() {
                N() && (0, r.trackCustomGoal)(r.exp `GDIcdSZcHCSCGVfOEJOOIBTCHT`, 5)
            }
        },
        cdfdb49e: (e, n, t) => {
            "use strict";
            t.d(n, {
                B$: () => x,
                zn: () => $,
                z1: () => K,
                Yf: () => H,
                qU: () => B,
                en: () => L,
                pi: () => G,
                rP: () => Y,
                BR: () => U,
                lj: () => w,
                Bu: () => V,
                pr: () => M,
                K0: () => P,
                vU: () => W,
                Ue: () => q,
                Lx: () => j,
                H2: () => Z
            });
            var i = t("24e040c9"),
                a = t.n(i),
                r = t("af1e2b38"),
                d = t("43a4d203"),
                s = t("dc6d28ff"),
                l = t("28dbd132"),
                o = t("239beb17"),
                u = t("8ded1df4"),
                c = t("0835130d"),
                m = t("284975bf"),
                v = t("768370ae"),
                k = t("00d29d3a");
            const g = "tr_pp_sps",
                p = "pp_sps_nd",
                f = "pp_sps_lm",
                h = "pp_sps_st";
            (0, k.Z)(class {
                static track() {
                    return (0, l.trackExperiment)(this.experiment)
                }
            }, "experiment", l.exp `OOIBBQMALHYYfPNeOYRKUceDUaDFaO`);
            var N = t("dfbd7c7c"),
                S = t("fcc2bc83"),
                _ = t("6ae86058"),
                y = t("4f475142"),
                b = t("b62ab38d"),
                F = t("524291ea"),
                E = t("836cf400"),
                T = t("86c19f61"),
                C = t("67934118"),
                I = t("5d6304f4"),
                A = t("b1f34e95"),
                O = t("ba394a5d"),
                D = t("05c5dc4d");
            const R = "sre";

            function x(e) {
                var n, t;
                const i = {},
                    a = (0, s.getRequestContext)(),
                    r = a.isInternalUser(),
                    d = (0, _.ZP)(),
                    o = null === (n = a.getAffiliate()) || void 0 === n ? void 0 : n.label,
                    c = e.searchParams.get("sid"),
                    m = null === (t = a.getAffiliate()) || void 0 === t ? void 0 : t.id,
                    v = e.searchParams.get("relocation_mode");
                if (o && (i.label = o), c && (i.sid = c), m && (i.aid = String(m)), v && (i.relocation_mode = v), e.searchParams.forEach(((e, n) => {
                        (0 === n.indexOf("b_feature_running_") || 0 === n.indexOf("exp_") || r && 0 === n.indexOf("dev_")) && (i[n] = e)
                    })), r && "1" === e.searchParams.get("debug") && (i.debug = "1"), i.lang = a.getLanguage(), i[u.XY] = "1", i.src_elem = "sb", "index" === d) i.src = "index";
                else if ("propertypage" === d) {
                    if (i.src = "hotel", !(0, l.trackExperiment)(l.exp `HVQeYFRURURYTfUOeOAJZbVPLDFFMPCC`)) {
                        const n = (0, D.Z)(e);
                        n && (i[O.oB] = n)
                    }
                } else if ("searchresults" === d) {
                    i.src = "searchresults";
                    const e = (0, D.Z)("undefined" !== typeof window ? new URL(window.location.href) : void 0);
                    e && (i[O.oB] = e)
                } else if ("landingpage" === d) {
                    const n = (0, F.b)(e);
                    n && (i.src = n.destType.toLowerCase())
                } else "booking-home" === d ? (i.src = "index", i.theme_id = "74") : "broad-search" === d && (i.src = "broad-search");
                return i
            }

            function P(e, n) {
                var t, i, d, c, k, F, O, D, P, U;
                const M = {
                        addGroupConfigHiddenFields: !0,
                        addChildrenAgesHiddenFields: !1,
                        addTravelPurpose: !0,
                        addThemeIdFromUrl: !1,
                        ...arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}
                    },
                    H = (0, s.getRequestContext)(),
                    V = x(e),
                    G = (0, _.ZP)();
                if (n.destination) {
                    var Y;
                    const t = n.destination.option || (null === (Y = n.destination.options) || void 0 === Y ? void 0 : Y[0]) || null;
                    if (t && "isAroundMe" in t) t.destId && t.destType && (V.dest_id = String(t.destId), V.dest_type = t.destType.toLowerCase());
                    else if (t) {
                        if (t.destId) {
                            const e = t.destType.toLowerCase();
                            if (V.dest_id = String(t.destId), V.dest_type = e, e === N.z5.LATLONG.toLowerCase() && (V.latitude = String(t.latitude), V.longitude = String(t.longitude)), t.placeId) {
                                const e = I.Z.get(t.placeId);
                                e && (V.latitude = String(e.latitude), V.longitude = String(e.longitude))
                            }
                        } else {
                            const n = (0, E.G)(e.searchParams);
                            n.destType === N.z5.LATLONG && "latitude" in n && "longitude" in n && (V.latitude = String(n.latitude), V.longitude = String(n.longitude))
                        }
                        if ("undefined" !== typeof t.index && !("isPopularDest" in t)) {
                            var W;
                            V.ac_position = String(t.index), V.ac_click_type = t.isGoogleResult ? "g" : "b", V.ac_langcode = t.langCode, null !== (W = n.destination.options) && void 0 !== W && W.length && (V.ac_suggestion_list_length = String(n.destination.options.length)), V.search_selected = "true";
                            const e = H.getPageviewId();
                            e && (V.search_pageview_id = e), t.encodedAutocompleteMeta && (V.ac_meta = t.encodedAutocompleteMeta), t.webFilters && (0, o.isFeatureRunning)(o.feature `HVLDTLUeIeWcMWBaBBYdaWNIHcUeLT`) && (V[A.mT] = [...(V[A.mT] || "").split(A.ge), ...t.webFilters.split(A.ge)].filter((e => !!e)).join(A.ge))
                        }
                    }
                }
                if (n.date && (n.date.start.date && (V.checkin = a()(n.date.start.date).format(y.zT)), n.date.end.date && (V.checkout = a()(n.date.end.date).format(y.zT))), null !== (t = n.date.longTermFlexibleDates) && void 0 !== t && t.selected) {
                    var K, $;
                    const e = null === (K = n.date.longTermFlexibleDates) || void 0 === K ? void 0 : K.selected,
                        t = new Array(5);
                    t[0] = e.startDay, t[1] = e.duration, null !== ($ = e.months) && void 0 !== $ && $.size && (t[2] = [...e.months].join("_")), t[3] = "flexible" === n.date.activeTabId ? 1 : void 0, t[4] = e.isDayCustom ? "1" : void 0, V[T.q1] = t.join(":")
                }
                if (M.addGroupConfigHiddenFields && (V.group_adults = String(n.occupancy.adults.value), V.no_rooms = String(n.occupancy.rooms.value), V.group_children = String(n.occupancy.kids.value), n.occupancy.kidsAges.values.length && (V.age = n.occupancy.kidsAges.values.map((e => String(e))))), !0 === (null === (i = n.occupancy.bedrooms) || void 0 === i ? void 0 : i.shown) && (V.nflt = `${A.Oq.FILTER_EPU_BEDROOM_COUNT}=${n.occupancy.bedrooms.value};${V.nflt||""}`), M.addChildrenAgesHiddenFields && !M.addGroupConfigHiddenFields && n.occupancy.kidsAges.values.length && (V.age = n.occupancy.kidsAges.values.map((e => String(e)))), M.addTravelPurpose && n.travelPurpose && "checked" in n.travelPurpose && (null === (d = n.travelPurpose) || void 0 === d || !d.checked) && (V[C.w3] = "leisure"), "homesAndApartmentsFirst" in n && null !== (c = n.homesAndApartmentsFirst) && void 0 !== c && c.checked && n.homesAndApartmentsFirst.shown || 1 === (null === (k = n.occupancy.holidayRental) || void 0 === k ? void 0 : k.value) && null !== (F = n.occupancy.holidayRental) && void 0 !== F && F.shown && (0, m.kf)()) {
                    const {
                        isMDOT: e = !1
                    } = (0, r.Z6)(), n = (e ? (0, l.trackExperiment)(l.exp `NAFQOPeYWPRFYZRUVbOMFcZSGMLaC`) > 0 : (0, l.trackExperiment)(l.exp `NAFQOPeYWbKdPSKYaFBddQSBLdaRO`) > 0) ? `${A.Oq.FILTER_HOTEL_TYPE}=1200` : `${A.Oq.FILTER_PRIVACY_TYPE}=3`;
                    V.nflt = (V.nflt || "") + `${n};${A.Oq.FILTER_PRIVACY_TYPE_NO_DATE}=3`
                }
                if ((L() || B() || w()) && "flexibleDates" in n.date && null !== (O = n.date.flexibleDates) && void 0 !== O && O.selected && "exact" !== n.date.flexibleDates.selected && (V[b.zS] = String(n.date.flexibleDates.selected)), "index" === G && Number(null === (D = H.getUserIdentity()) || void 0 === D ? void 0 : D.authLevel) > 0 && e.searchParams.has("wallet") && (V.nflt = (V.nflt || "") + ";pmt=100;"), "index" === G && e.searchParams.has("rew_campaign") && "homes" === e.searchParams.get("rew_campaign") && (V.order = "upsort_bh"), (0, v.ep)() && n.occupancy && "pets" in n.occupancy && Boolean(null === (P = n.occupancy) || void 0 === P || null === (P = P.pets) || void 0 === P ? void 0 : P.value) && (V.nflt = (V.nflt || "") + `;${v.mJ};`, (0, l.trackCustomGoal)(l.exp `GDIcdSZcHCSCGVfOEJOOIBTCHT`, 4), (0, l.trackCustomGoal)(l.exp `GDIcdSZcHCSIURSBVSGfZVFRURURHe`, 3)), "deals-campaign" === G && (V.lpsrc = "sb"), !(0, _.zE)("deals") || null !== n && void 0 !== n && null !== (U = n.hiddenFields) && void 0 !== U && null !== (U = U.init) && void 0 !== U && U.order || (V.order = "deals_upsorter"), M.addThemeIdFromUrl) {
                    const n = e.searchParams.get("theme_id");
                    n && (V.theme_id = n)
                }
                if ("propertypage" === G && M.trackPPSPS) {
                    const {
                        lastMinuteBooker: n,
                        shortTermBooker: t
                    } = (0, S.cY)(), {
                        checkin: i,
                        checkout: a
                    } = (0, y.Xk)(e.searchParams) || {};
                    V[g] = "1", i && a || (V[p] = "1"), n && (V[f] = "1"), t && (V[h] = "1")
                }
                if ("broad-search" === G) {
                    const n = e.searchParams.get("selected_currency");
                    n && (V.selected_currency = n)
                }
                return {
                    submit: M.isSearchEntitiesEnabledForFormAction ? function(e) {
                        const n = { ...e
                            },
                            t = [];
                        Object.entries(u.mO).forEach((e => {
                            let [i, a] = e;
                            const r = n[i];
                            r && (Array.isArray(r) ? r.forEach((e => {
                                a && t.push(`${a},${e}`)
                            })) : a && t.push(`${a},${r}`), delete n[i])
                        })), t.length && (n[R] = t);
                        return n
                    }(V) : V
                }
            }
            const L = () => {
                    var e;
                    return (0, s.getRequestContext)().getSiteType() === d.SiteType.WWW && ((0, _.KF)("searchresults", "index", "landingpage", "booking-home") || (0, _.zE)("deals")) && !(null !== (e = (0, s.getRequestContext)().getAffiliate()) && void 0 !== e && e.isHybrid)
                },
                w = () => {
                    var e;
                    return (0, s.getRequestContext)().getSiteType() === d.SiteType.WWW && ((0, _.KF)("searchresults", "index", "booking-home", "landingpage") || (0, _.zE)("deals")) && !(null !== (e = (0, s.getRequestContext)().getAffiliate()) && void 0 !== e && e.isHybrid)
                },
                B = () => {
                    var e;
                    return (0, s.getRequestContext)().getSiteType() === d.SiteType.MDOT && ((0, _.KF)("searchresults", "index", "landingpage", "booking-home") || (0, c.no)()) && !(null !== (e = (0, s.getRequestContext)().getAffiliate()) && void 0 !== e && e.isHybrid)
                },
                U = () => {
                    var e;
                    return (0, s.getRequestContext)().getSiteType() === d.SiteType.MDOT && ((0, _.KF)("index", "booking-home") || (0, c.no)()) && !(null !== (e = (0, s.getRequestContext)().getAffiliate()) && void 0 !== e && e.isHybrid)
                },
                M = () => (0, s.getRequestContext)().getSiteType() === d.SiteType.WWW && "propertypage" !== (0, _.ZP)() && (0, l.trackExperiment)(l.exp `TZUfdKNKNKHNYKSccEHAANfNEJGKTJVRT`) > 0,
                H = () => (0, s.getRequestContext)().getSiteType() === d.SiteType.WWW && (0, l.trackExperiment)(l.exp `HVLDTLUedKNKNKHcVdaWMaBQOHT`) > 0,
                V = () => (0, s.getRequestContext)().getSiteType() === d.SiteType.MDOT && "index" === (0, _.ZP)(),
                G = () => (0, s.getRequestContext)().getSiteType() === d.SiteType.WWW && "index" === (0, _.ZP)() || (0, m.kf)(),
                Y = () => {
                    var e, n, t, i;
                    const a = Boolean(null === (e = (0, s.getRequestContext)().getAffiliate()) || void 0 === e ? void 0 : e.isCobrand) && (0, l.trackExperiment)(l.exp `OJVZAIFZGKTVaVUXFSdEDRNPUePVbSccbHC`) > 0,
                        r = Boolean(null === (n = (0, s.getRequestContext)().getAffiliate()) || void 0 === n ? void 0 : n.isBookingBranded) && (0, l.trackExperiment)(l.exp `OJVZAIFZGKTVaVUXFSdEDRNPUAZNdAYKe`) > 0,
                        o = u.F4.includes((null === (t = (0, s.getRequestContext)().getAffiliate()) || void 0 === t ? void 0 : t.id) || 0);
                    return (0, s.getRequestContext)().getSiteType() === d.SiteType.WWW && ("searchresults" === (0, _.ZP)() || "propertypage" === (0, _.ZP)()) && (!(null === (i = (0, s.getRequestContext)().getAffiliate()) || void 0 === i || !i.isBookingOwned) || a || r || o)
                };

            function W(e) {
                const n = (0, s.getRequestContext)().getSiteType();
                if ((0, l.trackGoal)("autocomplete_option_selected"), "hotel" === e.destType ? (0, l.trackGoal)("autocomplete_option_selected_hotel") : (0, l.trackGoal)("autocomplete_option_selected_destination"), e.isGoogleResult || e.source === N.Fd.HERE ? e.isGoogleResult && (0, l.trackGoal)("autocomplete_option_selected_google_places") : (0, l.trackGoal)("autocomplete_option_selected_brick"), M()) {
                    const n = l.exp `TZUfdKNKNKHNYKSccEHAANfNEJGKTJVRT`;
                    e.isAroundMe && (0, l.trackCustomGoal)(n, 1), "isPopularDest" in e && e.isPopularDest && (0, l.trackCustomGoal)(n, 4)
                }
                "index" !== (0, _.ZP)() || n !== d.SiteType.WWW || "latlong" !== e.destType || e.metaMatchPropertyTypeId || (0, l.trackExperimentStage)(l.exp `HVQeYFRURURYDEZREWQUQeFIYbFVZYFaO`, 2);
                const t = e.source === N.Fd.HERE || e.isGoogleResult;
                if (n === d.SiteType.WWW && t) {
                    const n = l.exp `HVLDTLUedKNKNKPHcBaTfLXT`;
                    (0, l.trackCustomGoal)(n, 1), (0, l.trackCustomGoal)(n, e.isGoogleResult ? 2 : 3)
                }
                if (n === d.SiteType.MDOT) {
                    const n = l.exp `HVLDTLUeCDWOODPJRPBCNAPcdXUC`;
                    (0, l.trackCustomGoal)(n, 1), t && ((0, l.trackCustomGoal)(n, 2), (0, l.trackCustomGoal)(n, e.isGoogleResult ? 3 : 4))
                }
                n === d.SiteType.WWW && "filterId" in e && e.filterId && (0, l.trackCustomGoal)(l.exp `HVLDTLUedKNKNKHcVdaWMaBQOHT`, 4), (0, l.trackCustomGoal)(n === d.SiteType.WWW ? l.exp `HVLDTLUedKNKNKHcVaAFZKXe` : l.exp `HVLDTLUeCDWOOWLaRbdFIKe`, 3)
            }

            function K() {
                return {
                    onCalendarOpen: e => {
                        "start" === e ? (0, l.trackGoal)("checkin_cal_opened") : "end" === e && (0, l.trackGoal)("checkout_cal_opened")
                    },
                    onDateChange: (e, n) => {
                        "start" === n.date.open ? (0, l.trackGoal)("checkin_date_selected") : "end" === n.date.open && (0, l.trackGoal)("checkout_date_selected"), (0, l.trackCustomGoal)(l.exp `OOIBBQMALHYYfPNeOYWLdTRALEHJeKe`, 2)
                    }
                }
            }

            function $() {
                const e = new Date,
                    n = e.getTime() - 396e5 + 1e3 * e.getTimezoneOffset() * 60;
                return new Date(n)
            }

            function q(e, n) {
                var t;
                const i = (0, s.getRequestContext)().getSiteType(),
                    a = null === n || void 0 === n ? void 0 : n.match(/[0-9]/),
                    r = null === e || void 0 === e ? void 0 : e.some((e => e.isGoogleResult || e.source === N.Fd.HERE)),
                    o = null === e || void 0 === e ? void 0 : e.some((e => e.isGoogleResult)),
                    u = null === e || void 0 === e ? void 0 : e.some((e => e.source === N.Fd.HERE));
                if (i === d.SiteType.WWW && r) {
                    const e = l.exp `HVLDTLUedKNKNKPHcBaTfLXT`;
                    (0, l.trackExperimentStage)(e, 2);
                    const n = {
                        index: 3,
                        searchresults: 4,
                        propertypage: 5
                    };
                    (0, l.trackExperimentStage)(e, n[(0, _.ZP)()] || 6), a && (0, l.trackExperimentStage)(e, 7), o && (0, l.trackExperimentStage)(e, 8), u && (0, l.trackExperimentStage)(e, 9)
                }
                if (i === d.SiteType.MDOT) {
                    const e = l.exp `HVLDTLUeCDWOODPJRPBCNAPcdXUC`;
                    (0, l.trackExperimentStage)(e, 2);
                    const n = {
                        index: 3,
                        searchresults: 4
                    };
                    (0, l.trackExperimentStage)(e, n[(0, _.ZP)()] || 5), a && (0, l.trackExperimentStage)(e, 6), o && (0, l.trackExperimentStage)(e, 7), u && (0, l.trackExperimentStage)(e, 8)
                }
                i === d.SiteType.WWW && "city" === (null === e || void 0 === e || null === (t = e[0]) || void 0 === t ? void 0 : t.destType) && (0, l.trackExperimentStage)(l.exp `HVLDTLUedKNKNKHcVdaWMaBQOHT`, 8)
            }

            function Z() {
                (0, c.Ef)()
            }

            function j() {
                (0, c.s_)()
            }
        },
        dfbd7c7c: (e, n, t) => {
            "use strict";
            t.d(n, {
                $H: () => s,
                FU: () => i,
                Fd: () => m,
                H7: () => g,
                HW: () => u,
                IV: () => p,
                Qz: () => a,
                Sz: () => c,
                YK: () => o,
                _6: () => k,
                _D: () => d,
                aJ: () => v,
                z5: () => l,
                zn: () => r
            });
            let i = function(e) {
                    return e.AFFNET = "AFFNET", e.AIRLINE = "AIRLINE", e.BIZDEV = "BIZDEV", e.CHANNEL_DEAD = "CHANNEL_DEAD", e.CHANNEL_DIRECT = "CHANNEL_DIRECT", e.CHANNEL_PAID = "CHANNEL_PAID", e.CHANNEL_PAID_BRAND = "CHANNEL_PAID_BRAND", e.CHANNEL_SEO = "CHANNEL_SEO", e.CHANNEL_SEO_BRAND = "CHANNEL_SEO_BRAND", e.CORPTRAVEL = "CORPTRAVEL", e.LONGTAIL = "LONGTAIL", e.LONGTAIL_AFFNET = "LONGTAIL_AFFNET", e.META = "META", e.OTA = "OTA", e.SILVER = "SILVER", e.TRANSPORT = "TRANSPORT", e
                }({}),
                a = function(e) {
                    return e.ACCOMMODATION_TYPE = "ACCOMMODATION_TYPE", e.AIRPORT = "AIRPORT", e.BRAND = "BRAND", e.BRAND_NEARBY = "BRAND_NEARBY", e.CHAIN = "CHAIN", e.CITY = "CITY", e.COMMERCIAL_FLIGHTS = "COMMERCIAL_FLIGHTS", e.COUNTRY = "COUNTRY", e.DISTRICT = "DISTRICT", e.EXPBIT = "EXPBIT", e.HOTEL = "HOTEL", e.LANDMARK = "LANDMARK", e.M_EXPBIT = "M_EXPBIT", e.NO_HOTELS = "NO_HOTELS", e.REGION = "REGION", e.TERM = "TERM", e.TYPE = "TYPE", e
                }({}),
                r = function(e) {
                    return e.BRICK = "BRICK", e.GOOGLE = "GOOGLE", e.HERE = "HERE", e.RECP = "RECP", e
                }({}),
                d = function(e) {
                    return e.android = "android", e.ddot = "ddot", e.email = "email", e.emk = "emk", e.ios = "ios", e.mdot = "mdot", e.www = "www", e
                }({}),
                s = function(e) {
                    return e.BROAD_DATES = "BROAD_DATES", e.DATE_RANGE = "DATE_RANGE", e
                }({}),
                l = function(e) {
                    return e.AIRPORT = "AIRPORT", e.BOUNDING_BOX = "BOUNDING_BOX", e.CHAIN = "CHAIN", e.CITY = "CITY", e.COUNTRY = "COUNTRY", e.DISTRICT = "DISTRICT", e.HOTEL = "HOTEL", e.IATA = "IATA", e.LANDMARK = "LANDMARK", e.LATLONG = "LATLONG", e.NO_DEST_TYPE = "NO_DEST_TYPE", e.REGION = "REGION", e.SUB_REGION = "SUB_REGION", e.UNRECOGNIZED = "UNRECOGNIZED", e
                }({}),
                o = function(e) {
                    return e.STRUCTURED_FILTER = "STRUCTURED_FILTER", e.STRUCTURED_SORTER = "STRUCTURED_SORTER", e.UNSTRUCTURED_FILTER = "UNSTRUCTURED_FILTER", e
                }({}),
                u = function(e) {
                    return e.POPULAR = "POPULAR", e.PREVIOUS = "PREVIOUS", e.QUICK = "QUICK", e.SELF_FILTER_GROUP = "SELF_FILTER_GROUP", e.UNKNOWN = "UNKNOWN", e
                }({}),
                c = function(e) {
                    return e.CUSTOM = "CUSTOM", e.MONTH = "MONTH", e.WEEK = "WEEK", e.WEEKEND = "WEEKEND", e
                }({}),
                m = function(e) {
                    return e.GOOGLE = "GOOGLE", e.HERE = "HERE", e
                }({}),
                v = function(e) {
                    return e.device = "device", e.email = "email", e.frontend = "frontend", e.unknown = "unknown", e
                }({}),
                k = function(e) {
                    return e.PROPERTY_PAGE_MAP = "PROPERTY_PAGE_MAP", e.SEARCH_RESULTS = "SEARCH_RESULTS", e.SEARCH_RESULTS_MAP = "SEARCH_RESULTS_MAP", e
                }({}),
                g = function(e) {
                    return e.CHANGE_FILTERS = "CHANGE_FILTERS", e.CHANGE_SORT_OPTIONS = "CHANGE_SORT_OPTIONS", e.CLIENT_SIDE_UPDATE = "CLIENT_SIDE_UPDATE", e.NEW_SEARCH = "NEW_SEARCH", e
                }({}),
                p = function(e) {
                    return e.PROPERTY_PAGE_MAP = "PROPERTY_PAGE_MAP", e.SEARCH_RESULTS = "SEARCH_RESULTS", e.SEARCH_RESULTS_MAP = "SEARCH_RESULTS_MAP", e
                }({})
        },
        "616dc218": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => r
            });
            var i = t("ead71eb0"),
                a = t("dc6d28ff");

            function r() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                const {
                    onSetPageUrl: n
                } = e, t = (0, a.getRequestContext)().getBasePageUrl(), [r, d] = (0, i.useState)((() => t));
                return [r, (e, t) => {
                    d(e), e !== r && (null === n || void 0 === n || n(e, t))
                }]
            }
        },
        "9b9371c1": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => o,
                s: () => l
            });
            var i = t("ead71eb0"),
                a = t("d0fefcf5"),
                r = t("d1e54a96");
            const d = {
                    URL_UPDATED: "CAPLA_EVENT_search-web_searchresults_SR_URL_UPDATED",
                    PATTERN_MOUNTED: "CAPLA_EVENT_search-web_searchresults_PATTERN_MOUNTED"
                },
                s = ["FILTER_VIEW_ASYNC", "TAB_NAVIGATION"],
                l = (e, n, t, i) => {
                    a.eventBus.publish(d.URL_UPDATED, {
                        url: e,
                        id: i,
                        additionalRequestData: {
                            fromMFE: n,
                            ...t
                        }
                    })
                };

            function o(e, n) {
                (0, i.useEffect)((() => {
                    const t = a.eventBus.subscribe(d.URL_UPDATED, ((t, i) => {
                        var a;
                        if (-1 !== s.indexOf(i.id) || (null === (a = i.additionalRequestData) || void 0 === a ? void 0 : a.fromMFE) === e) return;
                        const d = (-1 !== i.url.indexOf("?") ? i.url.split("?")[1] : i.url).split("#"),
                            l = (0, r.constructUrl)({
                                searchParams: new URLSearchParams(d[0]),
                                hash: d[1]
                            });
                        i.additionalRequestData ? n(l, i.additionalRequestData) : n(l)
                    }));
                    return () => {
                        a.eventBus.unsubscribe(t)
                    }
                }), [e, n])
            }
        },
        fcc2bc83: (e, n, t) => {
            "use strict";
            t.d(n, {
                ZP: () => v,
                cY: () => c,
                dB: () => u
            });
            var i = t("bc26e4f1"),
                a = t("dc6d28ff"),
                r = t("28dbd132"),
                d = t("4f475142");
            const s = ["us", "fr", "in", "it", "de", "gb", "es", "br"],
                l = "ge|gi|xk|mc|md|me|mk|ru|sm|rs|ch|tr|ua|va|at|be|bg|cy|cz|dk|de|ee|es|fi|fr|gr|hu|hr|ie|it|lv|lt|lu|nl|pl|pt|ro|se|mt|si|sk|is|no|li|al|ad|am|az|ba|by|fo".split("|"),
                o = [4, 14];
            let u = function(e) {
                return e.UserEligible = "userEligible", e.UserSignedIn = "userSignedIn", e.UserSignedOut = "userSignedOut", e.DirectTraffic = "directTraffic", e.PaidTraffic = "paidTraffic", e.UsTraffic = "UsTraffic", e.NonEuropeanTraffic = "NonEuropeanTraffic", e.KeyMarketTraffic = "keyMarketTraffic", e.LastMinuteBooker = "lastMinuteBooker", e.ShortTermBooker = "shortTermBooker", e.NewUser = "newUser", e.ReturningUser = "returningUser", e
            }({});
            u.UserEligible, u.UserSignedOut, u.PaidTraffic, u.UsTraffic, u.KeyMarketTraffic, u.LastMinuteBooker, u.ShortTermBooker, u.NewUser, u.ReturningUser;
            const c = () => {
                    var e;
                    const n = (0, a.getRequestContext)(),
                        t = Boolean(null === (e = n.getUserIdentity()) || void 0 === e ? void 0 : e.userId),
                        r = n.getVisitorCountry() || "",
                        {
                            partnerChannelId: c
                        } = n.getAffiliate() ? ? {},
                        v = c && o.includes(c),
                        {
                            searchParams: k
                        } = n.getBasePageUrl(),
                        g = (0, d.Xk)(k),
                        p = new Date,
                        f = g && (0, i.VS)(p, g.checkin),
                        h = "number" === typeof f,
                        N = h && f >= 0 && f <= 2,
                        S = h && f > 2 && f <= 14;
                    return {
                        [u.UserEligible]: !0,
                        [u.UserSignedIn]: t,
                        [u.UserSignedOut]: !t,
                        [u.UsTraffic]: "us" === r,
                        [u.NonEuropeanTraffic]: !1 === l.includes(r),
                        [u.KeyMarketTraffic]: s.includes(r),
                        [u.PaidTraffic]: v,
                        [u.DirectTraffic]: !v,
                        [u.LastMinuteBooker]: N,
                        [u.ShortTermBooker]: S,
                        [u.NewUser]: m("NEW_USER"),
                        [u.ReturningUser]: m("RETURNING_USER")
                    }
                },
                m = e => {
                    var n, t;
                    return "undefined" !== typeof window && (null === (n = window) || void 0 === n || null === (n = n.B) || void 0 === n ? void 0 : n.env) && (null === (t = window) || void 0 === t || null === (t = t.B) || void 0 === t ? void 0 : t.env[`MDOTVALUE__IS__${e}`]) > 0
                },
                v = (e, n) => {
                    if (!("MDOT" === (0, a.getRequestContext)().getSiteType())) return 0;
                    const t = c();
                    return Object.keys(n).forEach((i => {
                        const a = Number(i),
                            d = "string" === typeof n[a] ? n[a] : void 0;
                        (d ? t[d] : Boolean(n[a])) && (0, r.trackExperimentStage)(e, a)
                    })), (0, r.trackExperiment)(e)
                }
        },
        "6ae86058": (e, n, t) => {
            "use strict";
            t.d(n, {
                FY: () => d,
                KF: () => s,
                ZP: () => r,
                zE: () => l
            });
            var i = t("dc6d28ff"),
                a = t("524291ea");

            function r() {
                const e = (0, i.getRequestContext)().getBasePageUrl();
                return 0 === e.pathname.indexOf("/searchresults") ? "searchresults" : 0 === e.pathname.indexOf("/index") || "/" === e.pathname ? "index" : 0 === e.pathname.indexOf("/hotel") && -1 === e.pathname.indexOf("/hotel/index") ? "propertypage" : e.pathname.startsWith("/holidays/") ? "holidays" : null !== (0, a.b)(e) || 0 === e.pathname.indexOf("/hotel/index") ? "landingpage" : e.pathname.startsWith("/booking-home/") ? "booking-home" : e.pathname.startsWith("/dealspage.") ? "deals-campaign" : e.pathname.startsWith("/deals/index") ? "deals-index" : e.pathname.startsWith("/deals/") ? "deals-seasonal" : e.pathname.startsWith("/explore") ? "broad-search" : "other"
            }
            const d = () => {
                    switch (r()) {
                        case "deals-campaign":
                        case "deals-seasonal":
                        case "deals-index":
                            return "deals";
                        default:
                            return "other"
                    }
                },
                s = function() {
                    for (var e = arguments.length, n = new Array(e), t = 0; t < e; t++) n[t] = arguments[t];
                    return n.includes(r())
                },
                l = function() {
                    for (var e = arguments.length, n = new Array(e), t = 0; t < e; t++) n[t] = arguments[t];
                    return n.includes(d())
                }
        },
        dd6086f7: (e, n, t) => {
            "use strict";
            t.d(n, {
                d: () => s
            });
            var i = t("dc6d28ff"),
                a = t("d1e54a96"),
                r = t("67934118"),
                d = t("b1f34e95");

            function s(e) {
                let {
                    ucfac: n,
                    ucfgff: t,
                    ffsau: s,
                    highlightedPropertyId: l,
                    tripThemeId: o,
                    destType: u,
                    destId: c,
                    isAroundme: m,
                    latitude: v,
                    longitude: k,
                    travelPurpose: g,
                    sorter: p,
                    selectedFilters: f,
                    checkin: h,
                    checkout: N,
                    nbAdults: S,
                    nbChildren: _,
                    childrenAges: y,
                    nbRooms: b,
                    postcard: F,
                    sleepingRoomMatch: E,
                    showApartHotels: T,
                    loginRedirect: C,
                    fromSearchHistorySearchbox: I,
                    lpThemeId: A,
                    previousSearchId: O,
                    srView: D,
                    sourceLabel: R
                } = e;
                const x = (0, i.getRequestContext)().getLanguage(),
                    P = (0, a.constructUrl)({
                        pathname: `/searchresults${"en-us"===x?"":"."+x}.html`
                    }),
                    L = P.searchParams;
                if (h && N && (L.set("checkin", h), L.set("checkout", N)), c && u && (L.set("dest_id", String(c)), L.set("dest_type", String(u).toLowerCase())), "boolean" === typeof m && L.set("is_aroundme", m ? "1" : "0"), "undefined" !== typeof v && "undefined" !== typeof k && (L.set("latitude", String(v)), L.set("longitude", String(k))), "undefined" !== typeof g) {
                    const e = (0, r.DT)(parseInt(String(g), 10));
                    e && L.set(r.w3, e)
                }
                return f && L.set(d.mT, f), p && L.set("order", p), "undefined" !== typeof S && (L.set("group_adults", String(S)), L.set("req_adults", String(S))), "undefined" !== typeof b && L.set("no_rooms", String(b)), "undefined" !== typeof _ && (L.set("group_children", String(_)), L.set("req_children", String(_))), y && y.forEach((e => {
                    L.append("age", String(e)), L.append("req_age", String(e))
                })), l && L.set("highlighted_hotels", String(l)), o && L.set("trip_theme", String(o)), n && L.set("ucfac", n), t && L.set("ucfgff", t), s && L.set("ffsau", s), F && L.set("postcard", F), E && L.set("slp_r_match_to", E), T && L.set("shw_aparth", T), C && L.set("login_redirect", C), I && L.set("fshsb", "1"), A && L.set("theme_id", String(A)), O && L.set(d.jP, O), D && L.set("sr_view", D), R && L.set("source_label", R), P
            }
        },
        "4f475142": (e, n, t) => {
            "use strict";
            t.d(n, {
                Gr: () => h,
                Uj: () => N,
                Xk: () => p,
                mA: () => f,
                zT: () => v
            });
            var i = t("24e040c9"),
                a = t.n(i),
                r = t("e65db334"),
                d = t.n(r),
                s = t("7fd19181"),
                l = t.n(s),
                o = t("8da416e8"),
                u = t.n(o);
            (0, i.extend)(u()), (0, i.extend)(l()), (0, i.extend)(d());
            const c = 500,
                m = 11,
                v = "YYYY-MM-DD",
                k = ["checkin", "checkin_year", "checkin_year_month", "checkin_month", "checkin_monthday", "checkout", "checkout_year", "checkout_year_month", "checkout_month", "checkout_monthday"];

            function g(e, n, t) {
                const i = n.get(t ? "checkout_year_month" : "checkin_year_month");
                if (!i) return e;
                if (!Number(e.month) || !Number(e.year)) {
                    const [n, t] = i.split("-");
                    return { ...e,
                        year: n,
                        month: t
                    }
                }
                return e
            }

            function p(e) {
                if (!e) return null;
                const n = g({
                        year: e.get("checkin_year"),
                        month: e.get("checkin_month"),
                        day: e.get("checkin_monthday")
                    }, e),
                    t = g({
                        year: e.get("checkout_year"),
                        month: e.get("checkout_month"),
                        day: e.get("checkout_monthday")
                    }, e, !0);
                let i = a().utc([n.year, n.month, n.day].join("-"), "YYYY-M-D");
                i.isValid() || (i = a().utc(e.get("checkin") || "", "YYYY-M-D"));
                let r = a().utc([t.year, t.month, t.day].join("-"), "YYYY-M-D");
                if (r.isValid() || (r = a().utc(e.get("checkout") || "", "YYYY-M-D")), i.isValid()) {
                    const n = parseInt(String(e.get("interval")), 10);
                    !isNaN(n) && n > 0 && (r = i.add(n, "day"))
                }
                return i.isValid() && r.isValid() ? {
                    checkin: i.toDate(),
                    checkout: r.toDate()
                } : null
            }

            function f(e) {
                const n = a().utc(),
                    t = p(e);
                if (!e || !t) return null;
                const i = n.subtract(m, "hour"),
                    r = n.add(c, "day");
                return a().utc(t.checkin).isBefore(i, "day") || a().utc(t.checkout).isSameOrBefore(t.checkin, "day") || a().utc(t.checkin).isAfter(r, "day") ? null : t
            }

            function h(e) {
                return a().utc(e).format(v)
            }

            function N(e) {
                k.forEach((n => e.delete(n)))
            }
        },
        "9c64ac31": (e, n, t) => {
            "use strict";
            t.d(n, {
                S6: () => s,
                IM: () => d,
                c: () => l
            });
            t("239beb17");
            var i = t("b1f34e95");
            const a = new class {
                constructor() {
                    this.filtersData = {}
                }
                addFilterData(e, n) {
                    this.filtersData[e] = n
                }
                getFilterData(e) {
                    return this.filtersData[e]
                }
                removeAllFiltersData() {
                    this.filtersData = {}
                }
            };
            var r = t("dfbd7c7c");

            function d(e) {
                let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                    t = e.get(i.mT) || "";
                try {
                    t = decodeURIComponent(t)
                } catch (r) {}
                let a = t.split(i.ge);
                return a = a.filter((e => !!e)), !0 === n && (a = a.filter((e => {
                    const [, n] = e.split("=");
                    return ! function(e) {
                        const n = String(e).match(i.yn);
                        if (!n) return !1;
                        return n[1].toLocaleLowerCase() === i.G1 && n[2].toLocaleLowerCase() === i._Q
                    }(n)
                }))), a
            }

            function s(e) {
                let {
                    urlSearchParams: n
                } = e;
                const t = {},
                    a = d(n, !0);
                return a.length && (t.selectedFilters = a.sort().join(i.ge)), t
            }

            function l(e) {
                var n;
                let {
                    filters: t
                } = e;
                const d = null === t || void 0 === t || null === (n = t.selectedFilters) || void 0 === n ? void 0 : n.split(i.ge);
                let s = !1;
                const l = null === d || void 0 === d ? void 0 : d.map((e => {
                    var n;
                    const t = null === (n = a.getFilterData(e)) || void 0 === n ? void 0 : n.source;
                    return t && t !== r.HW.UNKNOWN && (s = !0), t || r.HW.UNKNOWN
                }));
                return s ? l : void 0
            }
        },
        b62ab38d: (e, n, t) => {
            "use strict";
            t.d(n, {
                Up: () => r,
                xd: () => a,
                zS: () => i
            });
            const i = "flex_window",
                a = ["exact", 1, 2, 3, 7];

            function r(e) {
                const n = Number(e.get(i));
                if (!isNaN(n) && a.includes(n)) return n
            }
        },
        "524291ea": (e, n, t) => {
            "use strict";
            t.d(n, {
                b: () => d
            });
            var i = t("dfbd7c7c");
            const a = Object.keys(i.z5).map((e => e.toLowerCase())).join("|"),
                r = new RegExp(`((?<themeName>[\\w-]+)\\/)?(?<destType>${a})\\/(?<countryCode>[\\w-]+)(\\/(?<pageName>[^\\.]+))?(\\.[\\w-]+)?\\.html`);

            function d(e) {
                const n = e.pathname.match(r);
                if (!n || !n.groups) return null;
                return {
                    destType: i.z5[n.groups.destType.toUpperCase()],
                    countryCode: n.groups.countryCode,
                    pageName: n.groups.pageName,
                    themeName: n.groups.themeName
                }
            }
        },
        "836cf400": (e, n, t) => {
            "use strict";
            t.d(n, {
                G: () => u
            });
            var i = t("dfbd7c7c");
            const a = ["city", "landmark", "district", "airport", "region", "country", "hotel"];
            var r = function(e) {
                return e[e.OVERRIDE_NONE = 0] = "OVERRIDE_NONE", e[e.OVERRIDE_CITY = 1] = "OVERRIDE_CITY", e[e.OVERRIDE_REGION = 2] = "OVERRIDE_REGION", e[e.OVERRIDE_REGION_OR_CITY = 3] = "OVERRIDE_REGION_OR_CITY", e
            }(r || {});
            const d = /^[A-Z0-9]{3}$/,
                s = e => e <= 2147483647 && e >= -2147483648;

            function l(e) {
                const n = [];
                return e.forEach((e => {
                    const t = parseInt(e, 10);
                    t && s(t) && n.push(t)
                })), n
            }

            function o(e) {
                const n = parseInt(e || "", 10);
                return s(n) ? n : null
            }

            function u(e) {
                const n = o(e.get("dest_id")),
                    t = e.get("dest_type"),
                    s = l(e.getAll("highlighted_hotels")),
                    u = Boolean(e.get("is_aroundme")),
                    c = e.get("ss"),
                    m = e.get("ss_label"),
                    v = Boolean(e.get("top_ufis")),
                    k = {};
                s.length && (k.hotelIds = s), u && (k.isAroundMe = !0), c && (k.searchString = c), m && (k.searchStringLabel = m), v && (k.topUfis = !0);
                const g = l(e.getAll("hotelids"));
                if (g.length && !c) return { ...k,
                    destId: 0,
                    destType: i.z5.HOTEL,
                    hotelIds: g
                };
                if (n && t) {
                    const e = i.z5[t.toUpperCase()];
                    if (e && e !== i.z5.LATLONG) return e === i.z5.HOTEL && delete k.hotelIds, { ...k,
                        destType: e,
                        destId: n
                    }
                }
                const p = parseFloat(e.get("latitude") || e.get("place_id_lat") || ""),
                    f = parseFloat(e.get("longitude") || e.get("place_id_lon") || "");
                if (p && f) return { ...k,
                    destType: i.z5.LATLONG,
                    latitude: p,
                    longitude: f
                };
                for (const r of a) {
                    const n = o(e.get(r)),
                        t = i.z5[r.toUpperCase()];
                    if (n && t) return { ...k,
                        destType: t,
                        destId: n
                    }
                }
                const h = (e.get("iata") || "").toUpperCase().trim();
                if (h && d.test(h)) {
                    const n = parseInt(e.get("iata_orr") || "", 10),
                        t = r[n];
                    return { ...k,
                        airportOverride: t || null,
                        destType: i.z5.IATA,
                        iata: h
                    }
                }
                return { ...k,
                    destId: 0,
                    destType: i.z5.NO_DEST_TYPE
                }
            }
        },
        "86c19f61": (e, n, t) => {
            "use strict";
            t.d(n, {
                HB: () => u,
                JI: () => o,
                q1: () => s,
                v: () => v,
                zC: () => m
            });
            var i = t("dfbd7c7c"),
                a = t("4f475142"),
                r = t("b62ab38d");
            const d = "ltfd_excl",
                s = "ltfd",
                l = 12;

            function o() {
                const e = new Date;
                e.setDate(1);
                const n = new Map;
                for (let t = 0; t < l; t++) {
                    const t = `${e.getMonth()+1}-${e.getFullYear()}`;
                    n.set(t, new Date(e)), e.setMonth(e.getMonth() + 1)
                }
                return n
            }

            function u(e, n) {
                const t = e.searchParams.get(s);
                if (t) {
                    const e = o(),
                        i = t.split(":"),
                        a = Number(i[0]);
                    let r = Number(i[1]);
                    const d = i[2] || "",
                        s = "1" === i[3],
                        l = "1" === i[4],
                        u = new Set;
                    if (d.split("_").forEach((n => {
                            e.has(n) && u.add(n)
                        })), !isNaN(a) && !isNaN(r) && a >= 1 && a <= 7 && r > 0) return null !== n && void 0 !== n && n.maxLOS && r > n.maxLOS && (r = n.maxLOS), {
                        isCustom: l,
                        isEnabled: s && Boolean(u.size),
                        startDay: a,
                        duration: r,
                        months: u
                    };
                    if (!u.size) return;
                    return {
                        isCustom: !1,
                        isEnabled: !1,
                        months: u
                    }
                }
            }

            function c(e) {
                const n = (e.searchParams.get(d) || "").split(":");
                if (n.length) {
                    const e = [];
                    return n.forEach((n => {
                        const [t, i] = n.split("_");
                        t && !isNaN(Number(i)) && Number(i) > 0 && e.push({
                            los: Number(i),
                            checkin: t
                        })
                    })), e.length ? e : null
                }
                return null
            }

            function m(e) {
                const n = u(e);
                if (!n || !n.isEnabled) {
                    const n = c(e);
                    return n ? {
                        excludeDate: n
                    } : null
                }
                return {
                    los: n.duration ? [n.duration] : [],
                    checkinMonthYear: n.months ? [...n.months] : [],
                    startWeekday: n.startDay ? [n.startDay] : [],
                    excludeDate: c(e)
                }
            }

            function v(e) {
                const n = (0, a.Xk)(e.searchParams),
                    t = function(e) {
                        const n = e.searchParams.get(s);
                        if (n) {
                            const e = n.split(":"),
                                t = new Set((e[2] || "").split("_"));
                            return {
                                startDay: Number(e[0]),
                                duration: Number(e[1]),
                                months: t,
                                isEnabled: "1" === e[3],
                                isCustom: "1" === e[4]
                            }
                        }
                    }(e),
                    d = (0, r.Up)(e.searchParams),
                    l = c(e);
                let o;
                return l && (o = {
                    excludeDatesBanner: {
                        dates: l
                    }
                }), {
                    additionalDatesConfig: o,
                    broadDatesCalendar: {
                        checkinMonths: null !== t && void 0 !== t && t.months ? [...t.months] : [],
                        los: null !== t && void 0 !== t && t.duration ? [t.duration] : [],
                        losType: (u = t, null !== u && void 0 !== u && u.isCustom ? i.Sz.CUSTOM : 1 === (null === u || void 0 === u ? void 0 : u.duration) && 5 === u.startDay ? i.Sz.WEEKEND : 28 === (null === u || void 0 === u ? void 0 : u.duration) && 6 === u.startDay ? i.Sz.MONTH : 5 === (null === u || void 0 === u ? void 0 : u.duration) && 1 === u.startDay ? i.Sz.WEEK : void 0),
                        startWeekdays: null !== t && void 0 !== t && t.startDay ? [t.startDay] : []
                    },
                    dateFlexUseCase: null !== t && void 0 !== t && t.isEnabled ? i.$H.BROAD_DATES : i.$H.DATE_RANGE,
                    dateRangeCalendar: {
                        checkin: null !== n && void 0 !== n && n.checkin ? [(0, a.Gr)(n.checkin)] : [],
                        checkout: null !== n && void 0 !== n && n.checkout ? [(0, a.Gr)(n.checkout)] : [],
                        flexWindow: d
                    }
                };
                var u
            }
        },
        67934118: (e, n, t) => {
            "use strict";
            t.d(n, {
                C3: () => l,
                DT: () => u,
                iX: () => o,
                w3: () => r
            });
            const i = "business",
                a = "leisure",
                r = "sb_travel_purpose",
                d = 1,
                s = 2;

            function l(e) {
                return e.get(r) === i
            }

            function o(e) {
                return l(e) ? d : s
            }

            function u(e) {
                return e === d ? i : e === s ? a : void 0
            }
        },
        "24bf173f": (e, n, t) => {
            "use strict";
            t.d(n, {
                R: () => a,
                Y: () => i
            });
            let i = function(e) {
                return e[e.COUPLE = 2] = "COUPLE", e[e.GROUP = 3] = "GROUP", e[e.FAMILY = 4] = "FAMILY", e[e.SOLO = 5] = "SOLO", e[e.UNKNOWN = 0] = "UNKNOWN", e[e.BUSINESS = 1] = "BUSINESS", e
            }({});

            function a(e) {
                const {
                    nbRooms: n,
                    nbAdults: t,
                    nbChildren: a,
                    isBusinessBooker: r
                } = e;
                if (r) return i.BUSINESS;
                if (Boolean(a)) return i.FAMILY;
                if (t && 2 !== t) {
                    if (1 === t) return i.SOLO;
                    if (t >= 3) return i.GROUP
                } else {
                    if (!n || 1 === n) return i.COUPLE;
                    if (n > 1) return i.GROUP
                }
                return i.UNKNOWN
            }
        },
        faeb41f3: (e, n, t) => {
            "use strict";
            t.d(n, {
                Dw: () => s,
                gy: () => l
            });
            t("41c6c66e");
            var i = t("24e040c9"),
                a = t.n(i),
                r = t("8da416e8"),
                d = t.n(r);

            function s(e) {
                return null !== e && void 0 !== e
            }

            function l(e) {
                var n;
                const t = null === e || void 0 === e || null === (n = e.dates) || void 0 === n ? void 0 : n.checkin;
                return t ? a().utc(t).diff(a().utc(new Date).startOf("day"), "day") : void 0
            }(0, i.extend)(d())
        },
        a32aa025: (e, n, t) => {
            "use strict";
            const i = t("0a555533"),
                a = t("b61503d5"),
                r = "function" === typeof Symbol && "function" === typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
            n.lW = l, n.h2 = 50;
            const d = 2147483647;

            function s(e) {
                if (e > d) throw new RangeError('The value "' + e + '" is invalid for option "size"');
                const n = new Uint8Array(e);
                return Object.setPrototypeOf(n, l.prototype), n
            }

            function l(e, n, t) {
                if ("number" === typeof e) {
                    if ("string" === typeof n) throw new TypeError('The "string" argument must be of type string. Received type number');
                    return c(e)
                }
                return o(e, n, t)
            }

            function o(e, n, t) {
                if ("string" === typeof e) return function(e, n) {
                    "string" === typeof n && "" !== n || (n = "utf8");
                    if (!l.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
                    const t = 0 | g(e, n);
                    let i = s(t);
                    const a = i.write(e, n);
                    a !== t && (i = i.slice(0, a));
                    return i
                }(e, n);
                if (ArrayBuffer.isView(e)) return function(e) {
                    if (j(e, Uint8Array)) {
                        const n = new Uint8Array(e);
                        return v(n.buffer, n.byteOffset, n.byteLength)
                    }
                    return m(e)
                }(e);
                if (null == e) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
                if (j(e, ArrayBuffer) || e && j(e.buffer, ArrayBuffer)) return v(e, n, t);
                if ("undefined" !== typeof SharedArrayBuffer && (j(e, SharedArrayBuffer) || e && j(e.buffer, SharedArrayBuffer))) return v(e, n, t);
                if ("number" === typeof e) throw new TypeError('The "value" argument must not be of type number. Received type number');
                const i = e.valueOf && e.valueOf();
                if (null != i && i !== e) return l.from(i, n, t);
                const a = function(e) {
                    if (l.isBuffer(e)) {
                        const n = 0 | k(e.length),
                            t = s(n);
                        return 0 === t.length || e.copy(t, 0, 0, n), t
                    }
                    if (void 0 !== e.length) return "number" !== typeof e.length || z(e.length) ? s(0) : m(e);
                    if ("Buffer" === e.type && Array.isArray(e.data)) return m(e.data)
                }(e);
                if (a) return a;
                if ("undefined" !== typeof Symbol && null != Symbol.toPrimitive && "function" === typeof e[Symbol.toPrimitive]) return l.from(e[Symbol.toPrimitive]("string"), n, t);
                throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e)
            }

            function u(e) {
                if ("number" !== typeof e) throw new TypeError('"size" argument must be of type number');
                if (e < 0) throw new RangeError('The value "' + e + '" is invalid for option "size"')
            }

            function c(e) {
                return u(e), s(e < 0 ? 0 : 0 | k(e))
            }

            function m(e) {
                const n = e.length < 0 ? 0 : 0 | k(e.length),
                    t = s(n);
                for (let i = 0; i < n; i += 1) t[i] = 255 & e[i];
                return t
            }

            function v(e, n, t) {
                if (n < 0 || e.byteLength < n) throw new RangeError('"offset" is outside of buffer bounds');
                if (e.byteLength < n + (t || 0)) throw new RangeError('"length" is outside of buffer bounds');
                let i;
                return i = void 0 === n && void 0 === t ? new Uint8Array(e) : void 0 === t ? new Uint8Array(e, n) : new Uint8Array(e, n, t), Object.setPrototypeOf(i, l.prototype), i
            }

            function k(e) {
                if (e >= d) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + d.toString(16) + " bytes");
                return 0 | e
            }

            function g(e, n) {
                if (l.isBuffer(e)) return e.length;
                if (ArrayBuffer.isView(e) || j(e, ArrayBuffer)) return e.byteLength;
                if ("string" !== typeof e) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e);
                const t = e.length,
                    i = arguments.length > 2 && !0 === arguments[2];
                if (!i && 0 === t) return 0;
                let a = !1;
                for (;;) switch (n) {
                    case "ascii":
                    case "latin1":
                    case "binary":
                        return t;
                    case "utf8":
                    case "utf-8":
                        return $(e).length;
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return 2 * t;
                    case "hex":
                        return t >>> 1;
                    case "base64":
                        return q(e).length;
                    default:
                        if (a) return i ? -1 : $(e).length;
                        n = ("" + n).toLowerCase(), a = !0
                }
            }

            function p(e, n, t) {
                let i = !1;
                if ((void 0 === n || n < 0) && (n = 0), n > this.length) return "";
                if ((void 0 === t || t > this.length) && (t = this.length), t <= 0) return "";
                if ((t >>>= 0) <= (n >>>= 0)) return "";
                for (e || (e = "utf8");;) switch (e) {
                    case "hex":
                        return O(this, n, t);
                    case "utf8":
                    case "utf-8":
                        return T(this, n, t);
                    case "ascii":
                        return I(this, n, t);
                    case "latin1":
                    case "binary":
                        return A(this, n, t);
                    case "base64":
                        return E(this, n, t);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return D(this, n, t);
                    default:
                        if (i) throw new TypeError("Unknown encoding: " + e);
                        e = (e + "").toLowerCase(), i = !0
                }
            }

            function f(e, n, t) {
                const i = e[n];
                e[n] = e[t], e[t] = i
            }

            function h(e, n, t, i, a) {
                if (0 === e.length) return -1;
                if ("string" === typeof t ? (i = t, t = 0) : t > 2147483647 ? t = 2147483647 : t < -2147483648 && (t = -2147483648), z(t = +t) && (t = a ? 0 : e.length - 1), t < 0 && (t = e.length + t), t >= e.length) {
                    if (a) return -1;
                    t = e.length - 1
                } else if (t < 0) {
                    if (!a) return -1;
                    t = 0
                }
                if ("string" === typeof n && (n = l.from(n, i)), l.isBuffer(n)) return 0 === n.length ? -1 : N(e, n, t, i, a);
                if ("number" === typeof n) return n &= 255, "function" === typeof Uint8Array.prototype.indexOf ? a ? Uint8Array.prototype.indexOf.call(e, n, t) : Uint8Array.prototype.lastIndexOf.call(e, n, t) : N(e, [n], t, i, a);
                throw new TypeError("val must be string, number or Buffer")
            }

            function N(e, n, t, i, a) {
                let r, d = 1,
                    s = e.length,
                    l = n.length;
                if (void 0 !== i && ("ucs2" === (i = String(i).toLowerCase()) || "ucs-2" === i || "utf16le" === i || "utf-16le" === i)) {
                    if (e.length < 2 || n.length < 2) return -1;
                    d = 2, s /= 2, l /= 2, t /= 2
                }

                function o(e, n) {
                    return 1 === d ? e[n] : e.readUInt16BE(n * d)
                }
                if (a) {
                    let i = -1;
                    for (r = t; r < s; r++)
                        if (o(e, r) === o(n, -1 === i ? 0 : r - i)) {
                            if (-1 === i && (i = r), r - i + 1 === l) return i * d
                        } else -1 !== i && (r -= r - i), i = -1
                } else
                    for (t + l > s && (t = s - l), r = t; r >= 0; r--) {
                        let t = !0;
                        for (let i = 0; i < l; i++)
                            if (o(e, r + i) !== o(n, i)) {
                                t = !1;
                                break
                            }
                        if (t) return r
                    }
                return -1
            }

            function S(e, n, t, i) {
                t = Number(t) || 0;
                const a = e.length - t;
                i ? (i = Number(i)) > a && (i = a) : i = a;
                const r = n.length;
                let d;
                for (i > r / 2 && (i = r / 2), d = 0; d < i; ++d) {
                    const i = parseInt(n.substr(2 * d, 2), 16);
                    if (z(i)) return d;
                    e[t + d] = i
                }
                return d
            }

            function _(e, n, t, i) {
                return Z($(n, e.length - t), e, t, i)
            }

            function y(e, n, t, i) {
                return Z(function(e) {
                    const n = [];
                    for (let t = 0; t < e.length; ++t) n.push(255 & e.charCodeAt(t));
                    return n
                }(n), e, t, i)
            }

            function b(e, n, t, i) {
                return Z(q(n), e, t, i)
            }

            function F(e, n, t, i) {
                return Z(function(e, n) {
                    let t, i, a;
                    const r = [];
                    for (let d = 0; d < e.length && !((n -= 2) < 0); ++d) t = e.charCodeAt(d), i = t >> 8, a = t % 256, r.push(a), r.push(i);
                    return r
                }(n, e.length - t), e, t, i)
            }

            function E(e, n, t) {
                return 0 === n && t === e.length ? i.fromByteArray(e) : i.fromByteArray(e.slice(n, t))
            }

            function T(e, n, t) {
                t = Math.min(e.length, t);
                const i = [];
                let a = n;
                for (; a < t;) {
                    const n = e[a];
                    let r = null,
                        d = n > 239 ? 4 : n > 223 ? 3 : n > 191 ? 2 : 1;
                    if (a + d <= t) {
                        let t, i, s, l;
                        switch (d) {
                            case 1:
                                n < 128 && (r = n);
                                break;
                            case 2:
                                t = e[a + 1], 128 === (192 & t) && (l = (31 & n) << 6 | 63 & t, l > 127 && (r = l));
                                break;
                            case 3:
                                t = e[a + 1], i = e[a + 2], 128 === (192 & t) && 128 === (192 & i) && (l = (15 & n) << 12 | (63 & t) << 6 | 63 & i, l > 2047 && (l < 55296 || l > 57343) && (r = l));
                                break;
                            case 4:
                                t = e[a + 1], i = e[a + 2], s = e[a + 3], 128 === (192 & t) && 128 === (192 & i) && 128 === (192 & s) && (l = (15 & n) << 18 | (63 & t) << 12 | (63 & i) << 6 | 63 & s, l > 65535 && l < 1114112 && (r = l))
                        }
                    }
                    null === r ? (r = 65533, d = 1) : r > 65535 && (r -= 65536, i.push(r >>> 10 & 1023 | 55296), r = 56320 | 1023 & r), i.push(r), a += d
                }
                return function(e) {
                    const n = e.length;
                    if (n <= C) return String.fromCharCode.apply(String, e);
                    let t = "",
                        i = 0;
                    for (; i < n;) t += String.fromCharCode.apply(String, e.slice(i, i += C));
                    return t
                }(i)
            }
            l.TYPED_ARRAY_SUPPORT = function() {
                try {
                    const e = new Uint8Array(1),
                        n = {
                            foo: function() {
                                return 42
                            }
                        };
                    return Object.setPrototypeOf(n, Uint8Array.prototype), Object.setPrototypeOf(e, n), 42 === e.foo()
                } catch (e) {
                    return !1
                }
            }(), l.TYPED_ARRAY_SUPPORT || "undefined" === typeof console || "function" !== typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(l.prototype, "parent", {
                enumerable: !0,
                get: function() {
                    if (l.isBuffer(this)) return this.buffer
                }
            }), Object.defineProperty(l.prototype, "offset", {
                enumerable: !0,
                get: function() {
                    if (l.isBuffer(this)) return this.byteOffset
                }
            }), l.poolSize = 8192, l.from = function(e, n, t) {
                return o(e, n, t)
            }, Object.setPrototypeOf(l.prototype, Uint8Array.prototype), Object.setPrototypeOf(l, Uint8Array), l.alloc = function(e, n, t) {
                return function(e, n, t) {
                    return u(e), e <= 0 ? s(e) : void 0 !== n ? "string" === typeof t ? s(e).fill(n, t) : s(e).fill(n) : s(e)
                }(e, n, t)
            }, l.allocUnsafe = function(e) {
                return c(e)
            }, l.allocUnsafeSlow = function(e) {
                return c(e)
            }, l.isBuffer = function(e) {
                return null != e && !0 === e._isBuffer && e !== l.prototype
            }, l.compare = function(e, n) {
                if (j(e, Uint8Array) && (e = l.from(e, e.offset, e.byteLength)), j(n, Uint8Array) && (n = l.from(n, n.offset, n.byteLength)), !l.isBuffer(e) || !l.isBuffer(n)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                if (e === n) return 0;
                let t = e.length,
                    i = n.length;
                for (let a = 0, r = Math.min(t, i); a < r; ++a)
                    if (e[a] !== n[a]) {
                        t = e[a], i = n[a];
                        break
                    }
                return t < i ? -1 : i < t ? 1 : 0
            }, l.isEncoding = function(e) {
                switch (String(e).toLowerCase()) {
                    case "hex":
                    case "utf8":
                    case "utf-8":
                    case "ascii":
                    case "latin1":
                    case "binary":
                    case "base64":
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return !0;
                    default:
                        return !1
                }
            }, l.concat = function(e, n) {
                if (!Array.isArray(e)) throw new TypeError('"list" argument must be an Array of Buffers');
                if (0 === e.length) return l.alloc(0);
                let t;
                if (void 0 === n)
                    for (n = 0, t = 0; t < e.length; ++t) n += e[t].length;
                const i = l.allocUnsafe(n);
                let a = 0;
                for (t = 0; t < e.length; ++t) {
                    let n = e[t];
                    if (j(n, Uint8Array)) a + n.length > i.length ? (l.isBuffer(n) || (n = l.from(n)), n.copy(i, a)) : Uint8Array.prototype.set.call(i, n, a);
                    else {
                        if (!l.isBuffer(n)) throw new TypeError('"list" argument must be an Array of Buffers');
                        n.copy(i, a)
                    }
                    a += n.length
                }
                return i
            }, l.byteLength = g, l.prototype._isBuffer = !0, l.prototype.swap16 = function() {
                const e = this.length;
                if (e % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
                for (let n = 0; n < e; n += 2) f(this, n, n + 1);
                return this
            }, l.prototype.swap32 = function() {
                const e = this.length;
                if (e % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                for (let n = 0; n < e; n += 4) f(this, n, n + 3), f(this, n + 1, n + 2);
                return this
            }, l.prototype.swap64 = function() {
                const e = this.length;
                if (e % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
                for (let n = 0; n < e; n += 8) f(this, n, n + 7), f(this, n + 1, n + 6), f(this, n + 2, n + 5), f(this, n + 3, n + 4);
                return this
            }, l.prototype.toString = function() {
                const e = this.length;
                return 0 === e ? "" : 0 === arguments.length ? T(this, 0, e) : p.apply(this, arguments)
            }, l.prototype.toLocaleString = l.prototype.toString, l.prototype.equals = function(e) {
                if (!l.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
                return this === e || 0 === l.compare(this, e)
            }, l.prototype.inspect = function() {
                let e = "";
                const t = n.h2;
                return e = this.toString("hex", 0, t).replace(/(.{2})/g, "$1 ").trim(), this.length > t && (e += " ... "), "<Buffer " + e + ">"
            }, r && (l.prototype[r] = l.prototype.inspect), l.prototype.compare = function(e, n, t, i, a) {
                if (j(e, Uint8Array) && (e = l.from(e, e.offset, e.byteLength)), !l.isBuffer(e)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);
                if (void 0 === n && (n = 0), void 0 === t && (t = e ? e.length : 0), void 0 === i && (i = 0), void 0 === a && (a = this.length), n < 0 || t > e.length || i < 0 || a > this.length) throw new RangeError("out of range index");
                if (i >= a && n >= t) return 0;
                if (i >= a) return -1;
                if (n >= t) return 1;
                if (this === e) return 0;
                let r = (a >>>= 0) - (i >>>= 0),
                    d = (t >>>= 0) - (n >>>= 0);
                const s = Math.min(r, d),
                    o = this.slice(i, a),
                    u = e.slice(n, t);
                for (let l = 0; l < s; ++l)
                    if (o[l] !== u[l]) {
                        r = o[l], d = u[l];
                        break
                    }
                return r < d ? -1 : d < r ? 1 : 0
            }, l.prototype.includes = function(e, n, t) {
                return -1 !== this.indexOf(e, n, t)
            }, l.prototype.indexOf = function(e, n, t) {
                return h(this, e, n, t, !0)
            }, l.prototype.lastIndexOf = function(e, n, t) {
                return h(this, e, n, t, !1)
            }, l.prototype.write = function(e, n, t, i) {
                if (void 0 === n) i = "utf8", t = this.length, n = 0;
                else if (void 0 === t && "string" === typeof n) i = n, t = this.length, n = 0;
                else {
                    if (!isFinite(n)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                    n >>>= 0, isFinite(t) ? (t >>>= 0, void 0 === i && (i = "utf8")) : (i = t, t = void 0)
                }
                const a = this.length - n;
                if ((void 0 === t || t > a) && (t = a), e.length > 0 && (t < 0 || n < 0) || n > this.length) throw new RangeError("Attempt to write outside buffer bounds");
                i || (i = "utf8");
                let r = !1;
                for (;;) switch (i) {
                    case "hex":
                        return S(this, e, n, t);
                    case "utf8":
                    case "utf-8":
                        return _(this, e, n, t);
                    case "ascii":
                    case "latin1":
                    case "binary":
                        return y(this, e, n, t);
                    case "base64":
                        return b(this, e, n, t);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return F(this, e, n, t);
                    default:
                        if (r) throw new TypeError("Unknown encoding: " + i);
                        i = ("" + i).toLowerCase(), r = !0
                }
            }, l.prototype.toJSON = function() {
                return {
                    type: "Buffer",
                    data: Array.prototype.slice.call(this._arr || this, 0)
                }
            };
            const C = 4096;

            function I(e, n, t) {
                let i = "";
                t = Math.min(e.length, t);
                for (let a = n; a < t; ++a) i += String.fromCharCode(127 & e[a]);
                return i
            }

            function A(e, n, t) {
                let i = "";
                t = Math.min(e.length, t);
                for (let a = n; a < t; ++a) i += String.fromCharCode(e[a]);
                return i
            }

            function O(e, n, t) {
                const i = e.length;
                (!n || n < 0) && (n = 0), (!t || t < 0 || t > i) && (t = i);
                let a = "";
                for (let r = n; r < t; ++r) a += Q[e[r]];
                return a
            }

            function D(e, n, t) {
                const i = e.slice(n, t);
                let a = "";
                for (let r = 0; r < i.length - 1; r += 2) a += String.fromCharCode(i[r] + 256 * i[r + 1]);
                return a
            }

            function R(e, n, t) {
                if (e % 1 !== 0 || e < 0) throw new RangeError("offset is not uint");
                if (e + n > t) throw new RangeError("Trying to access beyond buffer length")
            }

            function x(e, n, t, i, a, r) {
                if (!l.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
                if (n > a || n < r) throw new RangeError('"value" argument is out of bounds');
                if (t + i > e.length) throw new RangeError("Index out of range")
            }

            function P(e, n, t, i, a) {
                G(n, i, a, e, t, 7);
                let r = Number(n & BigInt(4294967295));
                e[t++] = r, r >>= 8, e[t++] = r, r >>= 8, e[t++] = r, r >>= 8, e[t++] = r;
                let d = Number(n >> BigInt(32) & BigInt(4294967295));
                return e[t++] = d, d >>= 8, e[t++] = d, d >>= 8, e[t++] = d, d >>= 8, e[t++] = d, t
            }

            function L(e, n, t, i, a) {
                G(n, i, a, e, t, 7);
                let r = Number(n & BigInt(4294967295));
                e[t + 7] = r, r >>= 8, e[t + 6] = r, r >>= 8, e[t + 5] = r, r >>= 8, e[t + 4] = r;
                let d = Number(n >> BigInt(32) & BigInt(4294967295));
                return e[t + 3] = d, d >>= 8, e[t + 2] = d, d >>= 8, e[t + 1] = d, d >>= 8, e[t] = d, t + 8
            }

            function w(e, n, t, i, a, r) {
                if (t + i > e.length) throw new RangeError("Index out of range");
                if (t < 0) throw new RangeError("Index out of range")
            }

            function B(e, n, t, i, r) {
                return n = +n, t >>>= 0, r || w(e, 0, t, 4), a.write(e, n, t, i, 23, 4), t + 4
            }

            function U(e, n, t, i, r) {
                return n = +n, t >>>= 0, r || w(e, 0, t, 8), a.write(e, n, t, i, 52, 8), t + 8
            }
            l.prototype.slice = function(e, n) {
                const t = this.length;
                (e = ~~e) < 0 ? (e += t) < 0 && (e = 0) : e > t && (e = t), (n = void 0 === n ? t : ~~n) < 0 ? (n += t) < 0 && (n = 0) : n > t && (n = t), n < e && (n = e);
                const i = this.subarray(e, n);
                return Object.setPrototypeOf(i, l.prototype), i
            }, l.prototype.readUintLE = l.prototype.readUIntLE = function(e, n, t) {
                e >>>= 0, n >>>= 0, t || R(e, n, this.length);
                let i = this[e],
                    a = 1,
                    r = 0;
                for (; ++r < n && (a *= 256);) i += this[e + r] * a;
                return i
            }, l.prototype.readUintBE = l.prototype.readUIntBE = function(e, n, t) {
                e >>>= 0, n >>>= 0, t || R(e, n, this.length);
                let i = this[e + --n],
                    a = 1;
                for (; n > 0 && (a *= 256);) i += this[e + --n] * a;
                return i
            }, l.prototype.readUint8 = l.prototype.readUInt8 = function(e, n) {
                return e >>>= 0, n || R(e, 1, this.length), this[e]
            }, l.prototype.readUint16LE = l.prototype.readUInt16LE = function(e, n) {
                return e >>>= 0, n || R(e, 2, this.length), this[e] | this[e + 1] << 8
            }, l.prototype.readUint16BE = l.prototype.readUInt16BE = function(e, n) {
                return e >>>= 0, n || R(e, 2, this.length), this[e] << 8 | this[e + 1]
            }, l.prototype.readUint32LE = l.prototype.readUInt32LE = function(e, n) {
                return e >>>= 0, n || R(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3]
            }, l.prototype.readUint32BE = l.prototype.readUInt32BE = function(e, n) {
                return e >>>= 0, n || R(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3])
            }, l.prototype.readBigUInt64LE = X((function(e) {
                Y(e >>>= 0, "offset");
                const n = this[e],
                    t = this[e + 7];
                void 0 !== n && void 0 !== t || W(e, this.length - 8);
                const i = n + 256 * this[++e] + 65536 * this[++e] + this[++e] * 2 ** 24,
                    a = this[++e] + 256 * this[++e] + 65536 * this[++e] + t * 2 ** 24;
                return BigInt(i) + (BigInt(a) << BigInt(32))
            })), l.prototype.readBigUInt64BE = X((function(e) {
                Y(e >>>= 0, "offset");
                const n = this[e],
                    t = this[e + 7];
                void 0 !== n && void 0 !== t || W(e, this.length - 8);
                const i = n * 2 ** 24 + 65536 * this[++e] + 256 * this[++e] + this[++e],
                    a = this[++e] * 2 ** 24 + 65536 * this[++e] + 256 * this[++e] + t;
                return (BigInt(i) << BigInt(32)) + BigInt(a)
            })), l.prototype.readIntLE = function(e, n, t) {
                e >>>= 0, n >>>= 0, t || R(e, n, this.length);
                let i = this[e],
                    a = 1,
                    r = 0;
                for (; ++r < n && (a *= 256);) i += this[e + r] * a;
                return a *= 128, i >= a && (i -= Math.pow(2, 8 * n)), i
            }, l.prototype.readIntBE = function(e, n, t) {
                e >>>= 0, n >>>= 0, t || R(e, n, this.length);
                let i = n,
                    a = 1,
                    r = this[e + --i];
                for (; i > 0 && (a *= 256);) r += this[e + --i] * a;
                return a *= 128, r >= a && (r -= Math.pow(2, 8 * n)), r
            }, l.prototype.readInt8 = function(e, n) {
                return e >>>= 0, n || R(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e]
            }, l.prototype.readInt16LE = function(e, n) {
                e >>>= 0, n || R(e, 2, this.length);
                const t = this[e] | this[e + 1] << 8;
                return 32768 & t ? 4294901760 | t : t
            }, l.prototype.readInt16BE = function(e, n) {
                e >>>= 0, n || R(e, 2, this.length);
                const t = this[e + 1] | this[e] << 8;
                return 32768 & t ? 4294901760 | t : t
            }, l.prototype.readInt32LE = function(e, n) {
                return e >>>= 0, n || R(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24
            }, l.prototype.readInt32BE = function(e, n) {
                return e >>>= 0, n || R(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]
            }, l.prototype.readBigInt64LE = X((function(e) {
                Y(e >>>= 0, "offset");
                const n = this[e],
                    t = this[e + 7];
                void 0 !== n && void 0 !== t || W(e, this.length - 8);
                const i = this[e + 4] + 256 * this[e + 5] + 65536 * this[e + 6] + (t << 24);
                return (BigInt(i) << BigInt(32)) + BigInt(n + 256 * this[++e] + 65536 * this[++e] + this[++e] * 2 ** 24)
            })), l.prototype.readBigInt64BE = X((function(e) {
                Y(e >>>= 0, "offset");
                const n = this[e],
                    t = this[e + 7];
                void 0 !== n && void 0 !== t || W(e, this.length - 8);
                const i = (n << 24) + 65536 * this[++e] + 256 * this[++e] + this[++e];
                return (BigInt(i) << BigInt(32)) + BigInt(this[++e] * 2 ** 24 + 65536 * this[++e] + 256 * this[++e] + t)
            })), l.prototype.readFloatLE = function(e, n) {
                return e >>>= 0, n || R(e, 4, this.length), a.read(this, e, !0, 23, 4)
            }, l.prototype.readFloatBE = function(e, n) {
                return e >>>= 0, n || R(e, 4, this.length), a.read(this, e, !1, 23, 4)
            }, l.prototype.readDoubleLE = function(e, n) {
                return e >>>= 0, n || R(e, 8, this.length), a.read(this, e, !0, 52, 8)
            }, l.prototype.readDoubleBE = function(e, n) {
                return e >>>= 0, n || R(e, 8, this.length), a.read(this, e, !1, 52, 8)
            }, l.prototype.writeUintLE = l.prototype.writeUIntLE = function(e, n, t, i) {
                if (e = +e, n >>>= 0, t >>>= 0, !i) {
                    x(this, e, n, t, Math.pow(2, 8 * t) - 1, 0)
                }
                let a = 1,
                    r = 0;
                for (this[n] = 255 & e; ++r < t && (a *= 256);) this[n + r] = e / a & 255;
                return n + t
            }, l.prototype.writeUintBE = l.prototype.writeUIntBE = function(e, n, t, i) {
                if (e = +e, n >>>= 0, t >>>= 0, !i) {
                    x(this, e, n, t, Math.pow(2, 8 * t) - 1, 0)
                }
                let a = t - 1,
                    r = 1;
                for (this[n + a] = 255 & e; --a >= 0 && (r *= 256);) this[n + a] = e / r & 255;
                return n + t
            }, l.prototype.writeUint8 = l.prototype.writeUInt8 = function(e, n, t) {
                return e = +e, n >>>= 0, t || x(this, e, n, 1, 255, 0), this[n] = 255 & e, n + 1
            }, l.prototype.writeUint16LE = l.prototype.writeUInt16LE = function(e, n, t) {
                return e = +e, n >>>= 0, t || x(this, e, n, 2, 65535, 0), this[n] = 255 & e, this[n + 1] = e >>> 8, n + 2
            }, l.prototype.writeUint16BE = l.prototype.writeUInt16BE = function(e, n, t) {
                return e = +e, n >>>= 0, t || x(this, e, n, 2, 65535, 0), this[n] = e >>> 8, this[n + 1] = 255 & e, n + 2
            }, l.prototype.writeUint32LE = l.prototype.writeUInt32LE = function(e, n, t) {
                return e = +e, n >>>= 0, t || x(this, e, n, 4, 4294967295, 0), this[n + 3] = e >>> 24, this[n + 2] = e >>> 16, this[n + 1] = e >>> 8, this[n] = 255 & e, n + 4
            }, l.prototype.writeUint32BE = l.prototype.writeUInt32BE = function(e, n, t) {
                return e = +e, n >>>= 0, t || x(this, e, n, 4, 4294967295, 0), this[n] = e >>> 24, this[n + 1] = e >>> 16, this[n + 2] = e >>> 8, this[n + 3] = 255 & e, n + 4
            }, l.prototype.writeBigUInt64LE = X((function(e) {
                return P(this, e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, BigInt(0), BigInt("0xffffffffffffffff"))
            })), l.prototype.writeBigUInt64BE = X((function(e) {
                return L(this, e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, BigInt(0), BigInt("0xffffffffffffffff"))
            })), l.prototype.writeIntLE = function(e, n, t, i) {
                if (e = +e, n >>>= 0, !i) {
                    const i = Math.pow(2, 8 * t - 1);
                    x(this, e, n, t, i - 1, -i)
                }
                let a = 0,
                    r = 1,
                    d = 0;
                for (this[n] = 255 & e; ++a < t && (r *= 256);) e < 0 && 0 === d && 0 !== this[n + a - 1] && (d = 1), this[n + a] = (e / r | 0) - d & 255;
                return n + t
            }, l.prototype.writeIntBE = function(e, n, t, i) {
                if (e = +e, n >>>= 0, !i) {
                    const i = Math.pow(2, 8 * t - 1);
                    x(this, e, n, t, i - 1, -i)
                }
                let a = t - 1,
                    r = 1,
                    d = 0;
                for (this[n + a] = 255 & e; --a >= 0 && (r *= 256);) e < 0 && 0 === d && 0 !== this[n + a + 1] && (d = 1), this[n + a] = (e / r | 0) - d & 255;
                return n + t
            }, l.prototype.writeInt8 = function(e, n, t) {
                return e = +e, n >>>= 0, t || x(this, e, n, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[n] = 255 & e, n + 1
            }, l.prototype.writeInt16LE = function(e, n, t) {
                return e = +e, n >>>= 0, t || x(this, e, n, 2, 32767, -32768), this[n] = 255 & e, this[n + 1] = e >>> 8, n + 2
            }, l.prototype.writeInt16BE = function(e, n, t) {
                return e = +e, n >>>= 0, t || x(this, e, n, 2, 32767, -32768), this[n] = e >>> 8, this[n + 1] = 255 & e, n + 2
            }, l.prototype.writeInt32LE = function(e, n, t) {
                return e = +e, n >>>= 0, t || x(this, e, n, 4, 2147483647, -2147483648), this[n] = 255 & e, this[n + 1] = e >>> 8, this[n + 2] = e >>> 16, this[n + 3] = e >>> 24, n + 4
            }, l.prototype.writeInt32BE = function(e, n, t) {
                return e = +e, n >>>= 0, t || x(this, e, n, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[n] = e >>> 24, this[n + 1] = e >>> 16, this[n + 2] = e >>> 8, this[n + 3] = 255 & e, n + 4
            }, l.prototype.writeBigInt64LE = X((function(e) {
                return P(this, e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"))
            })), l.prototype.writeBigInt64BE = X((function(e) {
                return L(this, e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"))
            })), l.prototype.writeFloatLE = function(e, n, t) {
                return B(this, e, n, !0, t)
            }, l.prototype.writeFloatBE = function(e, n, t) {
                return B(this, e, n, !1, t)
            }, l.prototype.writeDoubleLE = function(e, n, t) {
                return U(this, e, n, !0, t)
            }, l.prototype.writeDoubleBE = function(e, n, t) {
                return U(this, e, n, !1, t)
            }, l.prototype.copy = function(e, n, t, i) {
                if (!l.isBuffer(e)) throw new TypeError("argument should be a Buffer");
                if (t || (t = 0), i || 0 === i || (i = this.length), n >= e.length && (n = e.length), n || (n = 0), i > 0 && i < t && (i = t), i === t) return 0;
                if (0 === e.length || 0 === this.length) return 0;
                if (n < 0) throw new RangeError("targetStart out of bounds");
                if (t < 0 || t >= this.length) throw new RangeError("Index out of range");
                if (i < 0) throw new RangeError("sourceEnd out of bounds");
                i > this.length && (i = this.length), e.length - n < i - t && (i = e.length - n + t);
                const a = i - t;
                return this === e && "function" === typeof Uint8Array.prototype.copyWithin ? this.copyWithin(n, t, i) : Uint8Array.prototype.set.call(e, this.subarray(t, i), n), a
            }, l.prototype.fill = function(e, n, t, i) {
                if ("string" === typeof e) {
                    if ("string" === typeof n ? (i = n, n = 0, t = this.length) : "string" === typeof t && (i = t, t = this.length), void 0 !== i && "string" !== typeof i) throw new TypeError("encoding must be a string");
                    if ("string" === typeof i && !l.isEncoding(i)) throw new TypeError("Unknown encoding: " + i);
                    if (1 === e.length) {
                        const n = e.charCodeAt(0);
                        ("utf8" === i && n < 128 || "latin1" === i) && (e = n)
                    }
                } else "number" === typeof e ? e &= 255 : "boolean" === typeof e && (e = Number(e));
                if (n < 0 || this.length < n || this.length < t) throw new RangeError("Out of range index");
                if (t <= n) return this;
                let a;
                if (n >>>= 0, t = void 0 === t ? this.length : t >>> 0, e || (e = 0), "number" === typeof e)
                    for (a = n; a < t; ++a) this[a] = e;
                else {
                    const r = l.isBuffer(e) ? e : l.from(e, i),
                        d = r.length;
                    if (0 === d) throw new TypeError('The value "' + e + '" is invalid for argument "value"');
                    for (a = 0; a < t - n; ++a) this[a + n] = r[a % d]
                }
                return this
            };
            const M = {};

            function H(e, n, t) {
                M[e] = class extends t {
                    constructor() {
                        super(), Object.defineProperty(this, "message", {
                            value: n.apply(this, arguments),
                            writable: !0,
                            configurable: !0
                        }), this.name = `${this.name} [${e}]`, this.stack, delete this.name
                    }
                    get code() {
                        return e
                    }
                    set code(e) {
                        Object.defineProperty(this, "code", {
                            configurable: !0,
                            enumerable: !0,
                            value: e,
                            writable: !0
                        })
                    }
                    toString() {
                        return `${this.name} [${e}]: ${this.message}`
                    }
                }
            }

            function V(e) {
                let n = "",
                    t = e.length;
                const i = "-" === e[0] ? 1 : 0;
                for (; t >= i + 4; t -= 3) n = `_${e.slice(t-3,t)}${n}`;
                return `${e.slice(0,t)}${n}`
            }

            function G(e, n, t, i, a, r) {
                if (e > t || e < n) {
                    const i = "bigint" === typeof n ? "n" : "";
                    let a;
                    throw a = r > 3 ? 0 === n || n === BigInt(0) ? `>= 0${i} and < 2${i} ** ${8*(r+1)}${i}` : `>= -(2${i} ** ${8*(r+1)-1}${i}) and < 2 ** ${8*(r+1)-1}${i}` : `>= ${n}${i} and <= ${t}${i}`, new M.ERR_OUT_OF_RANGE("value", a, e)
                }! function(e, n, t) {
                    Y(n, "offset"), void 0 !== e[n] && void 0 !== e[n + t] || W(n, e.length - (t + 1))
                }(i, a, r)
            }

            function Y(e, n) {
                if ("number" !== typeof e) throw new M.ERR_INVALID_ARG_TYPE(n, "number", e)
            }

            function W(e, n, t) {
                if (Math.floor(e) !== e) throw Y(e, t), new M.ERR_OUT_OF_RANGE(t || "offset", "an integer", e);
                if (n < 0) throw new M.ERR_BUFFER_OUT_OF_BOUNDS;
                throw new M.ERR_OUT_OF_RANGE(t || "offset", `>= ${t?1:0} and <= ${n}`, e)
            }
            H("ERR_BUFFER_OUT_OF_BOUNDS", (function(e) {
                return e ? `${e} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds"
            }), RangeError), H("ERR_INVALID_ARG_TYPE", (function(e, n) {
                return `The "${e}" argument must be of type number. Received type ${typeof n}`
            }), TypeError), H("ERR_OUT_OF_RANGE", (function(e, n, t) {
                let i = `The value of "${e}" is out of range.`,
                    a = t;
                return Number.isInteger(t) && Math.abs(t) > 2 ** 32 ? a = V(String(t)) : "bigint" === typeof t && (a = String(t), (t > BigInt(2) ** BigInt(32) || t < -(BigInt(2) ** BigInt(32))) && (a = V(a)), a += "n"), i += ` It must be ${n}. Received ${a}`, i
            }), RangeError);
            const K = /[^+/0-9A-Za-z-_]/g;

            function $(e, n) {
                let t;
                n = n || 1 / 0;
                const i = e.length;
                let a = null;
                const r = [];
                for (let d = 0; d < i; ++d) {
                    if (t = e.charCodeAt(d), t > 55295 && t < 57344) {
                        if (!a) {
                            if (t > 56319) {
                                (n -= 3) > -1 && r.push(239, 191, 189);
                                continue
                            }
                            if (d + 1 === i) {
                                (n -= 3) > -1 && r.push(239, 191, 189);
                                continue
                            }
                            a = t;
                            continue
                        }
                        if (t < 56320) {
                            (n -= 3) > -1 && r.push(239, 191, 189), a = t;
                            continue
                        }
                        t = 65536 + (a - 55296 << 10 | t - 56320)
                    } else a && (n -= 3) > -1 && r.push(239, 191, 189);
                    if (a = null, t < 128) {
                        if ((n -= 1) < 0) break;
                        r.push(t)
                    } else if (t < 2048) {
                        if ((n -= 2) < 0) break;
                        r.push(t >> 6 | 192, 63 & t | 128)
                    } else if (t < 65536) {
                        if ((n -= 3) < 0) break;
                        r.push(t >> 12 | 224, t >> 6 & 63 | 128, 63 & t | 128)
                    } else {
                        if (!(t < 1114112)) throw new Error("Invalid code point");
                        if ((n -= 4) < 0) break;
                        r.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, 63 & t | 128)
                    }
                }
                return r
            }

            function q(e) {
                return i.toByteArray(function(e) {
                    if ((e = (e = e.split("=")[0]).trim().replace(K, "")).length < 2) return "";
                    for (; e.length % 4 !== 0;) e += "=";
                    return e
                }(e))
            }

            function Z(e, n, t, i) {
                let a;
                for (a = 0; a < i && !(a + t >= n.length || a >= e.length); ++a) n[a + t] = e[a];
                return a
            }

            function j(e, n) {
                return e instanceof n || null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === n.name
            }

            function z(e) {
                return e !== e
            }
            const Q = function() {
                const e = "0123456789abcdef",
                    n = new Array(256);
                for (let t = 0; t < 16; ++t) {
                    const i = 16 * t;
                    for (let a = 0; a < 16; ++a) n[i + a] = e[t] + e[a]
                }
                return n
            }();

            function X(e) {
                return "undefined" === typeof BigInt ? J : e
            }

            function J() {
                throw new Error("BigInt not supported")
            }
        },
        c6fca108: (e, n, t) => {
            "use strict";
            t.d(n, {
                $8: () => K,
                AJ: () => o,
                Cu: () => ve,
                Fe: () => I,
                G8: () => De,
                Gl: () => Me,
                H: () => he,
                Hs: () => se,
                Hw: () => Ce,
                IQ: () => p,
                Jm: () => fe,
                LQ: () => d,
                Lx: () => Se,
                MN: () => u,
                Mc: () => L,
                Nr: () => ae,
                OL: () => pe,
                Qe: () => Q,
                Qj: () => J,
                RA: () => $,
                RK: () => ue,
                Rd: () => D,
                Rf: () => He,
                SI: () => w,
                SW: () => z,
                TB: () => ce,
                Ti: () => re,
                U$: () => Fe,
                Uc: () => We,
                V1: () => xe,
                Vd: () => Ue,
                WN: () => y,
                WR: () => A,
                WU: () => s,
                Wg: () => Ve,
                Ys: () => x,
                Z3: () => M,
                Zq: () => Ee,
                Zt: () => C,
                _6: () => T,
                _H: () => Ne,
                _W: () => W,
                _Z: () => G,
                _i: () => oe,
                _y: () => r,
                a4: () => Be,
                aR: () => U,
                av: () => Ye,
                bT: () => ie,
                es: () => Ae,
                fL: () => ee,
                fS: () => l,
                fj: () => g,
                fw: () => ye,
                gU: () => Te,
                hF: () => _e,
                hJ: () => a,
                hN: () => S,
                iE: () => Y,
                ib: () => we,
                jC: () => V,
                jH: () => Le,
                jS: () => i,
                jT: () => h,
                kL: () => E,
                mt: () => q,
                nc: () => v,
                om: () => Ie,
                oo: () => k,
                p4: () => B,
                pW: () => m,
                pp: () => j,
                q: () => F,
                qh: () => ne,
                qv: () => N,
                qx: () => X,
                rD: () => me,
                ru: () => c,
                ry: () => R,
                s: () => b,
                sB: () => _,
                sM: () => le,
                t0: () => O,
                uD: () => Re,
                uj: () => f,
                vI: () => H,
                vR: () => te,
                ve: () => ge,
                vv: () => de,
                wd: () => Oe,
                x0: () => Ge,
                xY: () => ke,
                xx: () => Z,
                xy: () => be,
                yj: () => Pe,
                z6: () => P
            });
            var i = "X-Booking-Context-Language",
                a = "X-Booking-Context-Affiliate-Id",
                r = "X-Booking-Context-Currency",
                d = "hotel_currency",
                s = "X-Booking-Context-Visitor-Country",
                l = "X-Booking-Context-Ip-Country",
                o = "X-Booking-Context-CDN-Origin",
                u = "X-Booking-Target-Host",
                c = "X-Original-URI",
                m = "X-Booking-Original-Uri",
                v = "X-Booking-Original-Host",
                k = "X-Booking-Internal-IP",
                g = "X-Booking-Context-CSP-Nonce",
                p = "X-Booking-Context-Role",
                f = "X-Booking-Context-Action",
                h = "X-Booking-Context-Action-Name",
                N = "X-Booking-Method",
                S = "X-Booking-Request-Tree-Id",
                _ = "X-Booking-Request-Id",
                y = "X-Booking-Parent-Request-Id",
                b = "X-Booking-Topic",
                F = "X-Booking-Timeout-Ms",
                E = "X-Booking-Pageview-ID",
                T = "X-Booking-Context-AID",
                C = "X-Envoy-Upstream-Rq-Timeout-Ms",
                I = "X-Envoy-Expected-Rq-Timeout-Ms",
                A = "X-Booking-Deadline-Timestamp",
                O = "X-Booking-Context-Partner-Account-Id",
                D = "X-Booking-Context-Sessions",
                R = "X-Booking-Context-Request-Type",
                x = "X-Booking-ET-Serialized-State",
                P = "X-Booking-Experiment-State",
                L = "X-Booking-Context-User-Agent",
                w = "X-Booking-Timeout-Budget-Ms",
                B = "X-Booking-Site-Type-Id",
                U = "X-Booking-Dev-Service-Override",
                M = "x-booking-csrf-token",
                H = "X-Booking-Iam-Access-Token",
                V = "X-Booking-Bot-Score",
                G = "X-Booking-Capla-Product",
                Y = "X-Origin-User-Agent",
                W = "X-Context-Detected-User-Type",
                K = "X-Context-IP-Status",
                $ = "X-Xontext-Is-Normal-User-Reason",
                q = "X-Context-Browser-Family",
                Z = "X-Context-User-Agent-Group",
                j = "x-booking-dml-cluster",
                z = "x-booking-capla-early-head",
                Q = i.toLowerCase(),
                X = a.toLowerCase(),
                J = r.toLowerCase(),
                ee = d.toLowerCase(),
                ne = s.toLowerCase(),
                te = l.toLowerCase(),
                ie = o.toLowerCase(),
                ae = u.toLowerCase(),
                re = c.toLowerCase(),
                de = k.toLowerCase(),
                se = g.toLowerCase(),
                le = f.toLowerCase(),
                oe = h.toLowerCase(),
                ue = S.toLowerCase(),
                ce = _.toLowerCase(),
                me = y.toLowerCase(),
                ve = b.toLowerCase(),
                ke = F.toLowerCase(),
                ge = E.toLowerCase(),
                pe = T.toLowerCase(),
                fe = C.toLowerCase(),
                he = I.toLowerCase(),
                Ne = A.toLowerCase(),
                Se = O.toLowerCase(),
                _e = D.toLowerCase(),
                ye = R.toLowerCase(),
                be = x.toLowerCase(),
                Fe = P.toLowerCase(),
                Ee = L.toLowerCase(),
                Te = w.toLowerCase(),
                Ce = B.toLowerCase(),
                Ie = U.toLowerCase(),
                Ae = H.toLowerCase(),
                Oe = M.toLowerCase(),
                De = V.toLowerCase(),
                Re = m.toLowerCase(),
                xe = v.toLowerCase(),
                Pe = p.toLowerCase(),
                Le = N.toLowerCase(),
                we = G.toLowerCase(),
                Be = Y.toLowerCase(),
                Ue = W.toLowerCase(),
                Me = K.toLowerCase(),
                He = $.toLowerCase(),
                Ve = q.toLowerCase(),
                Ge = Z.toLowerCase(),
                Ye = "X-Booking-Sec-CSP-Nonce",
                We = Ye.toLowerCase()
        },
        "52d2c2cf": (e, n, t) => {
            "use strict";
            var i;
            t.d(n, {
                    Wu: () => S,
                    Ol: () => D.Ol,
                    V1: () => i,
                    qG: () => D.qG,
                    zQ: () => G,
                    xc: () => Q,
                    vu: () => L,
                    ij: () => W,
                    xm: () => P,
                    pq: () => $,
                    Bi: () => ae,
                    J8: () => re,
                    ZL: () => X,
                    us: () => K,
                    Jr: () => k,
                    A7: () => u,
                    Yf: () => o,
                    $R: () => E,
                    Wm: () => T,
                    nx: () => b,
                    Qc: () => D.Qc,
                    vj: () => D.vj,
                    Lw: () => te,
                    Ye: () => ee,
                    UP: () => J,
                    O8: () => M,
                    mk: () => A,
                    oI: () => ne,
                    RU: () => z,
                    Kn: () => Z,
                    Gm: () => q,
                    CL: () => w,
                    k3: () => U,
                    Wg: () => C,
                    z9: () => H,
                    aq: () => _,
                    El: () => y,
                    nw: () => m,
                    K5: () => c,
                    I2: () => F,
                    c2: () => ie,
                    h8: () => B,
                    Py: () => V,
                    Nb: () => O,
                    Or: () => D.Or,
                    Qo: () => D.Qo,
                    MK: () => D.MK,
                    sO: () => D.sO,
                    CK: () => D.CK,
                    KE: () => D.KE,
                    PS: () => D.PS,
                    JA: () => D.JA,
                    zY: () => j,
                    oS: () => Y,
                    bu: () => R,
                    G: () => x,
                    DV: () => I,
                    NM: () => p.N,
                    p2: () => p.p,
                    CX: () => D.CX,
                    TO: () => N,
                    hX: () => h,
                    mX: () => f,
                    jC: () => g.jC,
                    G8: () => g.G8,
                    SW: () => g.SW,
                    _Z: () => g._Z,
                    ib: () => g.ib,
                    uj: () => g.uj,
                    sM: () => g.sM,
                    jT: () => g.jT,
                    _i: () => g._i,
                    hJ: () => g.hJ,
                    qx: () => g.qx,
                    _6: () => g._6,
                    OL: () => g.OL,
                    AJ: () => g.AJ,
                    bT: () => g.bT,
                    fj: () => g.fj,
                    Hs: () => g.Hs,
                    _y: () => g._y,
                    Qj: () => g.Qj,
                    LQ: () => g.LQ,
                    fL: () => g.fL,
                    fS: () => g.fS,
                    vR: () => g.vR,
                    jS: () => g.jS,
                    Qe: () => g.Qe,
                    t0: () => g.t0,
                    Lx: () => g.Lx,
                    ry: () => g.ry,
                    fw: () => g.fw,
                    IQ: () => g.IQ,
                    yj: () => g.yj,
                    Rd: () => g.Rd,
                    hF: () => g.hF,
                    Mc: () => g.Mc,
                    Zq: () => g.Zq,
                    WU: () => g.WU,
                    qh: () => g.qh,
                    Z3: () => g.Z3,
                    wd: () => g.wd,
                    WR: () => g.WR,
                    _H: () => g._H,
                    aR: () => g.aR,
                    om: () => g.om,
                    pp: () => g.pp,
                    Ys: () => g.Ys,
                    xy: () => g.xy,
                    z6: () => g.z6,
                    U$: () => g.U$,
                    vI: () => g.vI,
                    es: () => g.es,
                    oo: () => g.oo,
                    vv: () => g.vv,
                    qv: () => g.qv,
                    jH: () => g.jH,
                    nc: () => g.nc,
                    xg: () => g.V1,
                    pW: () => g.pW,
                    uD: () => g.uD,
                    kL: () => g.kL,
                    ve: () => g.ve,
                    WN: () => g.WN,
                    rD: () => g.rD,
                    sB: () => g.sB,
                    TB: () => g.TB,
                    hN: () => g.hN,
                    RK: () => g.RK,
                    av: () => g.av,
                    Uc: () => g.Uc,
                    p4: () => g.p4,
                    Hw: () => g.Hw,
                    MN: () => g.MN,
                    Nr: () => g.Nr,
                    SI: () => g.SI,
                    gU: () => g.gU,
                    q: () => g.q,
                    xY: () => g.xY,
                    s: () => g.s,
                    Cu: () => g.Cu,
                    mt: () => g.mt,
                    mM: () => g.Wg,
                    _W: () => g._W,
                    Vd: () => g.Vd,
                    $8: () => g.$8,
                    Gl: () => g.Gl,
                    RA: () => g.RA,
                    Rf: () => g.Rf,
                    xx: () => g.xx,
                    x0: () => g.x0,
                    Fe: () => g.Fe,
                    H: () => g.H,
                    Zt: () => g.Zt,
                    Jm: () => g.Jm,
                    ru: () => g.ru,
                    Ti: () => g.Ti,
                    iE: () => g.iE,
                    a4: () => g.a4
                }),
                function(e) {
                    e[e.UNKNOWN = 0] = "UNKNOWN", e[e.ANON = 1] = "ANON", e[e.ZERO = 2] = "ZERO", e[e.AAL1 = 3] = "AAL1", e[e.AAL2 = 4] = "AAL2", e[e.AAL3 = 5] = "AAL3"
                }(i || (i = {}));
            var a, r = t("2b6c9666"),
                d = t("49c9e827"),
                s = (0, r.G)(!1),
                l = (0, d.y)(""),
                o = "_",
                u = "__",
                c = "HOReeYGMMWRTCJZeEGDJNQQdOBfHbCRVSdPYSbC",
                m = "HOReeYGMMWRTCJZeEECAUNZJCDSQdOBfHbCRVSdPYSbC",
                v = function() {
                    return s
                },
                k = ((a = {})[o] = {
                    shouldTrack: v,
                    experimentHash: c
                }, a[u] = {
                    shouldTrack: v,
                    experimentHash: m
                }, a[l] = {
                    shouldTrack: function() {
                        return Boolean(l)
                    }
                }, a),
                g = t("c6fca108"),
                p = t("0321416a"),
                f = "vue-client-manifest.json",
                h = "vue-bundle-stats.json",
                N = "vueApp",
                S = "__CAPLA_APP_ROOT__",
                _ = "federated-stats.client.json",
                y = "federated-stats.server.json",
                b = "chunkMetadataByChunkId.json",
                F = "loadable-stats.json",
                E = {
                    deviceType: "desktop",
                    deviceName: "Macintosh",
                    osName: "Mac OS",
                    osVersion: "10_15_7",
                    browserName: "Chrome",
                    browserVersion: "121.0.6167.184",
                    uaGroupId: 287,
                    userAgent: "chrome"
                },
                T = {
                    deviceType: "mobile",
                    deviceName: "iPhone12,5",
                    osName: "iOS",
                    osVersion: "15.2",
                    browserName: "iphone",
                    uaGroupId: 306,
                    userAgent: "Booking.App/31.4 iOS/15.2; Type: phone; AppStore: apple; Brand: Apple; Model: iPhone12,5;"
                },
                C = "/pages/errors",
                I = "static-error-pages.json",
                A = 500,
                O = "errorComponentMap is not provided, cannot render error pages",
                D = t("e02ebd6f"),
                R = "local",
                x = "development",
                P = "http://capla",
                L = 8,
                w = "/dev-server-proxy",
                B = "capla",
                U = "127.0.0.1",
                M = 9211,
                H = 4009,
                V = 9229,
                G = "https://q-xx.bstatic.com",
                Y = "https://istatic.booking.com",
                W = "/psb/capla/",
                K = "/internal-static/capla/",
                $ = "/page/v0",
                q = 15e3,
                Z = 5,
                j = 20,
                z = 30,
                Q = "build-version.txt",
                X = "ports.txt",
                J = 3e3,
                ee = 8181,
                ne = "/js_tracking",
                te = 3e3,
                ie = 2e3,
                ae = "metadataState.daemon",
                re = "metadataState"
        },
        e02ebd6f: (e, n, t) => {
            "use strict";
            var i, a;
            t.d(n, {
                    CK: () => s,
                    CX: () => h,
                    JA: () => r,
                    KE: () => i,
                    MK: () => _,
                    Ol: () => N,
                    Or: () => y,
                    PS: () => a,
                    Qc: () => p,
                    Qo: () => b,
                    qG: () => f,
                    sO: () => S,
                    vj: () => F
                }),
                function(e) {
                    e.CAPLA_SSR = "capla_ssr", e.REACT_RENDERER_PARALLEL = "react_renderer_parallel", e.REACT_RENDERER_BATCH = "react_renderer_batch", e.REACT_RENDERER_SINGLE = "react_renderer_single", e.REACT_EARLY_HEAD_RENDERER_FIRST_PASS = "react_early_head_renderer_first_pass", e.REACT_EARLY_HEAD_RENDERER_FINAL_PASS = "react_early_head_renderer_final_pass", e.GET_TRANSLATIONS = "get_translations", e.GET_METADATA = "get_metadata", e.QUERY = "apollo_", e.SET_REQUEST_CONTEXT = "set_request_context", e.PROCESS_ASSETS = "process_assets", e.REACT_HYDRATION = "react_hydration", e.REACT_RENDER_PASS = "react_render_pass", e.POPULATE_GRO = "populate_gro", e.GET_COPY_EXP_TRANSLATIONS = "get_copy_exp_translations", e.INIT_APOLLO_SSR = "init_apollo_ssr", e.RESOLVE_COMPONENT = "resolve_component", e.INIT_RENDER_PROMISES = "init_render_promises", e.INIT_REMOTE_COMPONENT_CONTEXT = "init_remote_component_context", e.PRE_RENDER = "pre_render", e.RENDER_COMPONENT_TO_STRING = "render_component_to_string", e.APOLLO_CACHE_WRITE = "apollo_cache_write", e.APOLLO_CACHE_READ = "apollo_cache_read", e.EXTRACT_RS_ASSETS = "extract_rs_assets", e.EXTRACT_CS_ASSETS = "extract_cs_assets", e.PREPARE_HELMET = "prepare_helmet", e.PREPARE_CHUNK_METADATA = "prepare_chunk_metadata", e.REPORT_SLO = "report_slo", e.CLOSE_ET = "close_et", e.DOM_LOADED = "dom_loaded", e.GET_ROOT_ELEMENTS = "get_root_elements", e.LOADABLE_READY = "loadable_ready", e.CONFIGURE_ET = "configure_et", e.HYDRATE_CHUNK_METADATA = "hydrate_chunk_metadata", e.GET_REQUEST_CONTEXT = "get_request_context", e.INIT_APOLLO_CSR = "init_apollo_csr", e.POPULATE_CACHE = "populate_cache", e.HYDRATE_COMPONENT = "hydrate_component", e.DISPATCH_CAPLA_EVENT = "dispatch_capla_event", e.ALL_SPANS = "all_spans"
                }(i || (i = {})),
                function(e) {
                    e.DEFAULT = "enabled", e.TRACE = "trace", e.DEBUG = "debug", e.INFO = "info", e.WARN = "warn", e.ERROR = "error", e.FATAL = "fatal", e.PREPARE_ATTRIBUTE_ERROR = "prepare.attribute.error", e.CODE_LINENO = "code.lineno", e.CODE_FUNCTION = "code.function", e.CODE_ATTRIBUTES_ERROR = "code.attributes.error", e.REQUEST_CONTEXT = "request.context", e.SSR_MODULE_FEDERATION_REMOTES = "ssr.module_federation.remotes", e.SSR_TRANSLATIONS_NUMBER = "ssr.translations.number", e.SSR_ET_COPY_EXPERIMENTS = "ssr.et.copy_experiments", e.SSR_APOLLO_URI = "ssr.apollo.uri", e.SSR_APOLLO_CACHE_STRATEGY = "ssr.apollo.cache_strategy", e.SSR_RENDERING_STRATEGY = "ssr.rendering_strategy", e.SSR_COMPONENTS_NUMBER = "ssr.components.number", e.SSR_HAS_STREAMING_RENDERER = "ssr.has_streaming_renderer", e.SSR_CHUNKS = "ssr.chunks", e.SSR_APOLLO_CACHE_WRITE_DATA = "ssr.apollo.cache.write.data", e.SSR_APOLLO_CACHE_WRITE_REFERENCE = "ssr.apollo.cache.write.reference", e.SSR_APOLLO_CACHE_READ_OPTIONS = "ssr.apollo.cache.read.options", e.SSR_APOLLO_CACHE_READ_DATA = "ssr.apollo.cache.read.data", e.SSR_MODULE_FEDERATION_RS_SCRIPTS = "ssr.module_federation.rs.scripts", e.SSR_MODULE_FEDERATION_RS_STYLES = "ssr.module_federation.rs.styles", e.SSR_MODULE_FEDERATION_CS_SCRIPTS = "ssr.module_federation.cs.scripts", e.SSR_MODULE_FEDERATION_CS_STYLES = "ssr.module_federation.cs.styles", e.SSR_ET_EXPERIMENTS = "ssr.et.experiments", e.SSR_ET_SEO_EXPERIMENTS = "ssr.et.seo_experiments", e.SSR_FEATURES = "ssr.features", e.CSR_CAPLA_ROOT_NUMBER = "csr.capla_root.number", e.CSR_COMPONENTS = "csr.components", e.CSR_COMPONENTS_DUPLICATES_NUMBER = "csr.components.duplicates.number", e.CSR_CHUNKS = "csr.chunks", e.CSR_ET_URL = "csr.et.url", e.CSR_ET_HEADERS = "csr.et.headers", e.CSR_ET_EXPERIMENTS = "csr.et.experiments", e.CSR_ET_SEO_EXPERIMENTS = "csr.et.seo_experiments", e.CSR_FEATURES = "csr.features", e.CSR_TRANSLATIONS_NUMBER = "csr.translations.number", e.CSR_REQUEST_CONTEXT = "csr.request_context", e.CSR_FETCH_CACHE = "csr.fetch.cache", e.REPORTER_PERSONA = "reporter.persona"
                }(a || (a = {}));
            var r, d, s = ["traceReporter", "clientTraceReporter", "serverTraceReporter", "startRecordingSpan"];
            ! function(e) {
                e.LOG = "log.", e.CSR_LOADABLE_RESOLVE_CHUNKS = "loadable.resolve.chunks", e.CSR_ERROR = "csr.error"
            }(r || (r = {}));
            var l, o, u, c, m, v, k, g, p = ((d = {}).all_spans = !0, d.react_hydration = !0, d.dom_loaded = !0, d.get_root_elements = !0, d.configure_et = !0, d.loadable_ready = !0, d.hydrate_chunk_metadata = !0, d.get_request_context = !0, d.init_apollo_csr = !0, d.populate_cache = !0, d.hydrate_component = !0, d.dispatch_capla_event = !0, d.apollo_ = !0, d),
                f = ((g = {}).capla_ssr = {
                    enabled: !0,
                    attributes: (l = {}, l.info = !0, l)
                }, g.get_metadata = {
                    enabled: !0,
                    attributes: (o = {}, o.info = !0, o)
                }, g.get_translations = {
                    enabled: !0,
                    attributes: (u = {}, u.info = !0, u)
                }, g.apollo_ = {
                    enabled: !0,
                    attributes: (c = {}, c.info = !0, c)
                }, g.set_request_context = {
                    enabled: !0,
                    attributes: (m = {}, m.info = !0, m)
                }, g.process_assets = {
                    enabled: !0,
                    attributes: (v = {}, v.info = !0, v)
                }, g.react_hydration = {
                    enabled: !0,
                    attributes: (k = {}, k.info = !0, k)
                }, g.populate_gro = {
                    enabled: !1,
                    attributes: {
                        enabled: !1
                    }
                }, g.get_copy_exp_translations = {
                    enabled: !1,
                    attributes: {
                        enabled: !1
                    }
                }, g.init_apollo_ssr = {
                    enabled: !1,
                    attributes: {
                        enabled: !1
                    }
                }, g.resolve_component = {
                    enabled: !1,
                    attributes: {
                        enabled: !1
                    }
                }, g.init_render_promises = {
                    enabled: !1,
                    attributes: {
                        enabled: !1
                    }
                }, g.init_remote_component_context = {
                    enabled: !1,
                    attributes: {
                        enabled: !1
                    }
                }, g),
                h = "data-capla-trace-configuration",
                N = "capla-assigned-otel-spans",
                S = "OTel is not enabled",
                _ = "0FSPj6uTx7vf5CsCxXl1hiEuOVmg69y4UrGyyVSu3GiHbYMium9B",
                y = "http://localhost:4318/v1/traces",
                b = "https://otel-gw.booking.com/v1/traces",
                F = 5
        },
        "0321416a": (e, n, t) => {
            "use strict";
            var i, a;
            t.d(n, {
                    N: () => i,
                    p: () => a
                }),
                function(e) {
                    e.UNKNOWN = "UNKNOWN", e.WWW = "WWW", e.MDOT = "MDOT", e.TDOT = "TDOT", e.ANDROID = "ANDROID", e.IOS = "IOS", e.XML = "XML", e.MG_FAMILY = "MG_FAMILY", e.AFFILIATE_BASE = "AFFILIATE_BASE", e.EMK_FAMILY = "EMK_FAMILY", e.JOINAPP = "JOINAPP", e.PULSE = "PULSE", e.EXTRANET = "EXTRANET", e.CHAT2BOOK = "CHAT2BOOK"
                }(i || (i = {})),
                function(e) {
                    e[e.UNKNOWN = 0] = "UNKNOWN", e[e.WWW = 1] = "WWW", e[e.MDOT = 2] = "MDOT", e[e.TDOT = 3] = "TDOT", e[e.ANDROID = 4] = "ANDROID", e[e.IOS = 5] = "IOS", e[e.XML = 13] = "XML", e[e.MG_FAMILY = 15] = "MG_FAMILY", e[e.AFFILIATE_BASE = 22] = "AFFILIATE_BASE", e[e.EMK_FAMILY = 23] = "EMK_FAMILY", e[e.JOINAPP = 24] = "JOINAPP", e[e.PULSE = 27] = "PULSE", e[e.EXTRANET = 31] = "EXTRANET", e[e.CHAT2BOOK = 87] = "CHAT2BOOK"
                }(a || (a = {}))
        },
        "057bed5a": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => L
            });
            var i = t("52d2c2cf"),
                a = t("49c9e827"),
                r = t("2b6c9666"),
                d = (0, r.G)("true"),
                s = (0, a.y)("b-search-web-searchbox-component-serviceNVWKZZDf"),
                l = (0, a.y)(void 0, i.oI),
                o = (0, a.y)("apollo"),
                u = (0, a.y)(void 0),
                c = (0, r.G)(void 0),
                m = (0, a.y)(void 0),
                v = (0, a.y)(void 0),
                k = (0, a.y)(void 0),
                g = (0, r.G)(!1),
                p = (0, a.y)(""),
                f = (0, a.y)("b-search-web-searchbox-component-service"),
                h = (0, a.y)("search-web"),
                N = (0, a.y)("searchbox-component-service"),
                S = (0, a.y)("b-search-web-searchbox-component-service"),
                _ = (0, a.y)(void 0, i.Gm),
                y = (0, a.y)(void 0, i.Kn),
                b = (0, r.G)(!0),
                F = (0, r.G)(!1),
                E = (0, r.G)(!1),
                T = (0, a.y)(void 0),
                C = (0, a.y)(void 0),
                I = (0, r.G)(!1),
                A = (0, a.y)(void 0),
                O = (0, r.G)(void 0),
                D = (0, r.G)(void 0),
                R = (0, r.G)(void 0),
                x = (0, r.G)(void 0),
                P = (0, r.G)(void 0);
            if (b && F) throw new Error("ENV: Cannot use server and client environment simultaneously");
            var L = {
                CAPLA_ACT_AS_LEGACY: d,
                CAPLA_OTEL_OPTOUT: x,
                CAPLA_BUILD_NAMESPACE: s,
                CAPLA_SERVICE_DIRECTORY_PROJECT: h,
                CAPLA_SERVICE_DIRECTORY_COMPONENT: N,
                CAPLA_SERVICE_DIRECTORY_PERSONA: S,
                CAPLA_CLIENTSIDE_ET_TRACKING_ENDPOINT_OVERRIDE: l,
                CAPLA_DATA_STRATEGY: o,
                CAPLA_GRAPHQL_ENDPOINT_CLIENT: u,
                CAPLA_GRAPHQL_ENDPOINT_DEFAULT: m,
                CAPLA_GRAPHQL_ENDPOINT_SERVER: v,
                CAPLA_GRAPHQL_ALLOW_NO_ACTION: c,
                CAPLA_OPT_IN_DIRECT_ACCAPI_TRAFFIC_EXPERIMENT: g,
                CAPLA_OPT_IN_DML_RUST_ROUTER_EXPERIMENT: p,
                CAPLA_SERVER_ROLE: f,
                CAPLA_HYDRATION_HANDLER_OPT_OUT: P,
                CAPLA_PRODUCT: k,
                DEFAULT_TIMEOUT_MS: _,
                CAPLA_FETCH_MIN_TIMEOUT_MS: y,
                IS_CLIENT: b,
                IS_DEVELOPMENT: !1,
                IS_PRODUCTION: !0,
                IS_SERVER: F,
                IS_TEST: !1,
                IS_E2E_TESTS: E,
                ORCA_PROXY_BASEURL_OVERRIDE: T,
                ORCA_REMOTE_COMPONENT_PATH_OVERRIDE: C,
                WEB_SHELL_DEV_TOOLS_ANALYTICS_ENABLED: I,
                WEB_SHELL_DEV_TOOLS_HASHED_TRACKING_ID: A,
                WEB_SHELL_DEV_TOOLS_OPT_OUT: O,
                WEB_SHELL_DEV_TOOLS_TESTS: D,
                WEB_SHELL_DEV_TOOLS_USE_ANALYTICS_SANDBOX: R
            }
        },
        "2b6c9666": (e, n, t) => {
            "use strict";

            function i(e) {
                var n = String(e);
                return "true" === n || "1" === n
            }
            t.d(n, {
                G: () => i
            })
        },
        "49c9e827": (e, n, t) => {
            "use strict";

            function i(e, n) {
                if (void 0 === e || "undefined" === e) return n;
                try {
                    return JSON.parse(e)
                } catch (t) {
                    return e
                }
            }
            t.d(n, {
                y: () => i
            })
        },
        "2c8dcc4b": (e, n, t) => {
            "use strict";

            function i(e, n, t, i, a, r, d) {
                try {
                    var s = e[r](d),
                        l = s.value
                } catch (o) {
                    return void t(o)
                }
                s.done ? n(l) : Promise.resolve(l).then(i, a)
            }

            function a(e) {
                return function() {
                    var n = this,
                        t = arguments;
                    return new Promise((function(a, r) {
                        var d = e.apply(n, t);

                        function s(e) {
                            i(d, a, r, s, l, "next", e)
                        }

                        function l(e) {
                            i(d, a, r, s, l, "throw", e)
                        }
                        s(void 0)
                    }))
                }
            }
            t.d(n, {
                XN: () => p
            });
            var r, d = t("95d6d3ae"),
                s = t("b775b7a7"),
                l = t("e74bf205"),
                o = t("52d2c2cf"),
                u = t("8d2481c1"),
                c = t("c6fca108"),
                m = /\.service$/,
                v = "AbortError",
                k = (0, u.j)("capla:fetch");
            ! function(e) {
                e.REQUEST = "request", e.RESPONSE = "response", e.REQUEST_ERROR = "request-error"
            }(r || (r = {}));
            var g = function(e) {
                function n(n) {
                    var t;
                    return (t = e.call(this, n) || this).name = v, t
                }
                return (0, d._)(n, e), n
            }((0, s._)(Error));

            function p(e, n) {
                return f.apply(this, arguments)
            }

            function f() {
                return f = a((function(e, n) {
                    var t, i, a, r, d, s, o;
                    return (0, l.Jh)(this, (function(l) {
                        switch (l.label) {
                            case 0:
                                return k.debug("Fetching: %O, %O", e, n), (null == n ? void 0 : n.ignoreCertCheck) && "https:" === ("string" === typeof e ? new URL(e) : e).protocol && (n.agent = undefined), t = new Request(e, n), i = F(t.url), a = i.hostname, m.test(a) ? [4, h(t, n)] : [3, 2];
                            case 1:
                                return d = l.sent(), [3, 3];
                            case 2:
                                d = t, l.label = 3;
                            case 3:
                                return s = function(e) {
                                    return b.apply(this, arguments)
                                }(r = d, n).catch((function(e) {
                                    return function(e, n) {
                                        if (e.name === v) {
                                            var t = e.stack,
                                                i = F(n.url),
                                                a = new g("Reached timeout on " + n.method + " " + i.origin + i.pathname + (i.search ? "<" + i.search + ">" : ""));
                                            throw a.stack = v + ": " + a.message + (t ? "\n" + t : ""), a
                                        }
                                        throw e
                                    }(e, t)
                                })), o = n && n.devOptions && n.devOptions.logFn ? n.devOptions.logFn : function() {}, [2, s.then((function(e) {
                                    return k.debug("Response received: %s, %O", e.url, {
                                        status: e.status,
                                        statusText: e.statusText
                                    }), o({
                                        type: "response",
                                        payload: e
                                    }), e
                                })).catch((function(e) {
                                    if (k.debug("Request failed: %O", e), o({
                                            type: "request-error",
                                            payload: e
                                        }), "FetchError" === e.name && e.message) {
                                        var n = F(r.url),
                                            t = "" + n.origin + n.pathname + (n.search ? "<" + n.search + ">" : "");
                                        e.message = e.message.indexOf(r.url) > -1 ? e.message.replace(r.url, t) : e.message.replace(/(https?:\/\/[\w\d.:-_]+\/[\w\d./]+)([?.=\d\w-&_:]+)/, "$1<$2>")
                                    }
                                    throw e
                                }))]
                        }
                    }))
                })), f.apply(this, arguments)
            }

            function h(e, n) {
                return N.apply(this, arguments)
            }

            function N() {
                return (N = a((function(e, n) {
                    var t, i, a, r, d, s;
                    return (0, l.Jh)(this, (function(l) {
                        return t = null == n ? void 0 : n.devOptions, i = F(e.url), a = i.hostname, (r = new Headers).set(c.MN, a), ((s = window.location.hostname).match(/\.(dev\.|dqs\.)booking\.com/i) || "localhost" === s || "127.0.0.1" === s) && k.warn("Making request to service from client-side, should not happen, carrier is being decomissioned, use DML instead"), i.protocol = "https:", i.host = (null == t ? void 0 : t.serviceProxyHost) || "carrier.booking.com", i.pathname = "/capla/proxy" + i.pathname, (null == (d = window.B) ? void 0 : d.env) && r.set("X-Booking-CSRF", window.B.env.b_csrf_token), [2, S(e, {
                            agent: undefined,
                            headers: r,
                            url: i,
                            credentials: "include"
                        })]
                    }))
                }))).apply(this, arguments)
            }

            function S(e, n) {
                return _.apply(this, arguments)
            }

            function _() {
                return (_ = a((function(e, n) {
                    var t, i, a, r, d, s, o, u, c, m, v, k, g, p, f;
                    return (0, l.Jh)(this, (function(l) {
                        switch (l.label) {
                            case 0:
                                return t = e.agent, i = e.cache, a = e.credentials, r = e.headers, d = e.integrity, s = e.method, o = e.mode, u = e.redirect, c = e.referrer, m = e.referrerPolicy, v = e.signal, k = e.url, "GET" !== s && "HEAD" !== s ? [3, 1] : (p = null, [3, 3]);
                            case 1:
                                return [4, e.blob()];
                            case 2:
                                p = l.sent(), l.label = 3;
                            case 3:
                                return g = p, f = function(e, n) {
                                    var t = new Headers;
                                    e && e.forEach((function(e, n) {
                                        return t.set(n, e)
                                    }));
                                    n && n.forEach((function(e, n) {
                                        return t.set(n, e)
                                    }));
                                    return t
                                }(r, n.headers), [2, new Request(n.url ? n.url.toString() : k, {
                                    agent: n.agent || t,
                                    body: g,
                                    cache: i,
                                    credentials: n.credentials || a,
                                    headers: f,
                                    integrity: d,
                                    method: s,
                                    mode: o,
                                    redirect: u,
                                    referrer: c,
                                    referrerPolicy: m,
                                    signal: n.signal || v
                                })]
                        }
                    }))
                }))).apply(this, arguments)
            }

            function y(e, n) {
                if (n) {
                    var t = new AbortController,
                        i = function() {
                            e.removeEventListener("abort", i), n.removeEventListener("abort", i), t.abort()
                        };
                    return e.addEventListener("abort", i), n.addEventListener("abort", i), t.signal
                }
                return e
            }

            function b() {
                return (b = a((function(e, n) {
                    var t, i, a, r, d, s, u;
                    return (0, l.Jh)(this, (function(l) {
                        switch (l.label) {
                            case 0:
                                return void 0 === n && (n = {
                                    timeoutMs: o.Lw
                                }), n.devOptions && n.devOptions.logFn && n.devOptions.logFn({
                                    type: "request",
                                    payload: e
                                }), t = parseInt(e.headers.get(c.Zt) || ""), i = isNaN(t) ? n.timeoutMs || o.Lw : t + o.zY, k.debug("Timeout set for request: %d", i), "undefined" === typeof AbortController ? (a = new Promise((function(e, n) {
                                    return setTimeout((function() {
                                        return n(new g("Request timed out"))
                                    }), i)
                                })), [2, Promise.race([fetch(e), a])]) : (r = new AbortController, d = setTimeout((function() {
                                    return r.abort()
                                }), i), s = function() {
                                    return clearTimeout(d)
                                }, [4, S(e, {
                                    signal: y(r.signal, e.signal)
                                })]);
                            case 1:
                                return (u = fetch.apply(void 0, [l.sent()])).then(s, s), [2, u]
                        }
                    }))
                }))).apply(this, arguments)
            }

            function F(e) {
                return new URL(e, window.location.protocol + "//" + window.location.host)
            }
        },
        "8d2481c1": (e, n, t) => {
            "use strict";
            t.d(n, {
                j: () => p
            });
            var i = t("6447fa60"),
                a = t("d10849cd"),
                r = t("057bed5a"),
                d = [];
            var s = t("e02ebd6f");
            var l = s.qG;
            var o = t("accefac5");

            function u(e, n, t) {
                try {
                    var i, a = n && n.replace(/:/g, ".");
                    return a ? (t && (a = a + "." + t), Array.isArray(e) ? 1 === (i = e.map((function(e) {
                        return c(e)
                    }))).length && (i = i[0]) : i = c(e), {
                        name: a,
                        value: i
                    }) : {
                        name: s.PS.PREPARE_ATTRIBUTE_ERROR,
                        value: "Error during mapping Pino log to OTel span attribute: namespace is undefined"
                    }
                } catch (r) {
                    return {
                        name: s.PS.PREPARE_ATTRIBUTE_ERROR,
                        value: "Error during mapping Pino log to OTel span attribute: " + JSON.stringify(r)
                    }
                }
            }

            function c(e) {
                return "string" === typeof e ? e : "object" === ("undefined" === typeof e ? "undefined" : (0, o._)(e)) ? JSON.stringify(e, null, 2) : String(e)
            }

            function m(e, n, t) {
                var i = a.levels.labels[t];
                if (i && "string" !== typeof e[0] && "oTelSpan" in e[0]) {
                    var r = e[0].oTelSpan || d[d.length - 1] || null;
                    if (r && function(e, n) {
                            var t = l[s.KE.ALL_SPANS];
                            if (t && t.enabled) return t.attributes.enabled || t.attributes[n];
                            var i = l[e];
                            return !(!i || !i.enabled) && (i.attributes.enabled || i.attributes[n])
                        }(r.name, i)) {
                        var o, c = u(e, n, i);
                        r.addEvent("log." + i, ((o = {})[c.name] = c.value, o))
                    }
                }
            }
            var v = !r.Z.CAPLA_OTEL_OPTOUT;
            var k = function() {
                    var e = {
                        level: "info"
                    };
                    return v && (e.browser = {
                        transmit: {
                            send: function(e, n) {
                                m(n.messages, n.bindings[0].ns, n.level.value)
                            }
                        }
                    }), e
                }(),
                g = a.pino((0, i._)({}, k));

            function p(e, n) {
                return g.child({
                    ns: e
                }, {
                    level: null != n ? n : "info"
                })
            }
        },
        d4f9d3c3: (e, n, t) => {
            var i = t("67cfd54a"),
                a = t("3cb91c27"),
                r = t("77e40909"),
                d = t("baf98b63"),
                s = t("f9aecff3");

            function l(e) {
                var n = -1,
                    t = null == e ? 0 : e.length;
                for (this.clear(); ++n < t;) {
                    var i = e[n];
                    this.set(i[0], i[1])
                }
            }
            l.prototype.clear = i, l.prototype.delete = a, l.prototype.get = r, l.prototype.has = d, l.prototype.set = s, e.exports = l
        },
        "5e123842": (e, n, t) => {
            var i = t("88cf0ec9"),
                a = t("2036f230"),
                r = t("4f6e9d16"),
                d = t("3d2e304d"),
                s = t("dd6bb5f8");

            function l(e) {
                var n = -1,
                    t = null == e ? 0 : e.length;
                for (this.clear(); ++n < t;) {
                    var i = e[n];
                    this.set(i[0], i[1])
                }
            }
            l.prototype.clear = i, l.prototype.delete = a, l.prototype.get = r, l.prototype.has = d, l.prototype.set = s, e.exports = l
        },
        "5146a2d1": (e, n, t) => {
            var i = t("e960a0df")(t("7a61f31c"), "Map");
            e.exports = i
        },
        "7d880cac": (e, n, t) => {
            var i = t("d10a4a5b"),
                a = t("45ab86d6"),
                r = t("efb323c8"),
                d = t("d2dd1be7"),
                s = t("b623841f");

            function l(e) {
                var n = -1,
                    t = null == e ? 0 : e.length;
                for (this.clear(); ++n < t;) {
                    var i = e[n];
                    this.set(i[0], i[1])
                }
            }
            l.prototype.clear = i, l.prototype.delete = a, l.prototype.get = r, l.prototype.has = d, l.prototype.set = s, e.exports = l
        },
        d2a80b53: (e, n, t) => {
            var i = t("5e123842"),
                a = t("8684809c"),
                r = t("790c8203"),
                d = t("9a64160b"),
                s = t("32e4d8a1"),
                l = t("71155cde");

            function o(e) {
                var n = this.__data__ = new i(e);
                this.size = n.size
            }
            o.prototype.clear = a, o.prototype.delete = r, o.prototype.get = d, o.prototype.has = s, o.prototype.set = l, e.exports = o
        },
        "22d23bc3": (e, n, t) => {
            var i = t("7a61f31c").Symbol;
            e.exports = i
        },
        d0a5e2ee: (e, n, t) => {
            var i = t("7a61f31c").Uint8Array;
            e.exports = i
        },
        "5bdf80f1": e => {
            e.exports = function(e, n, t) {
                switch (t.length) {
                    case 0:
                        return e.call(n);
                    case 1:
                        return e.call(n, t[0]);
                    case 2:
                        return e.call(n, t[0], t[1]);
                    case 3:
                        return e.call(n, t[0], t[1], t[2])
                }
                return e.apply(n, t)
            }
        },
        "77adaba7": (e, n, t) => {
            var i = t("25c703af"),
                a = t("d172dc00"),
                r = t("51a89998"),
                d = t("58a7f404"),
                s = t("4050d1e6"),
                l = t("9c616c27"),
                o = Object.prototype.hasOwnProperty;
            e.exports = function(e, n) {
                var t = r(e),
                    u = !t && a(e),
                    c = !t && !u && d(e),
                    m = !t && !u && !c && l(e),
                    v = t || u || c || m,
                    k = v ? i(e.length, String) : [],
                    g = k.length;
                for (var p in e) !n && !o.call(e, p) || v && ("length" == p || c && ("offset" == p || "parent" == p) || m && ("buffer" == p || "byteLength" == p || "byteOffset" == p) || s(p, g)) || k.push(p);
                return k
            }
        },
        "07a9660d": (e, n, t) => {
            var i = t("4c44fd41"),
                a = t("88b2cfe9");
            e.exports = function(e, n, t) {
                (void 0 !== t && !a(e[n], t) || void 0 === t && !(n in e)) && i(e, n, t)
            }
        },
        "10560ce8": (e, n, t) => {
            var i = t("4c44fd41"),
                a = t("88b2cfe9"),
                r = Object.prototype.hasOwnProperty;
            e.exports = function(e, n, t) {
                var d = e[n];
                r.call(e, n) && a(d, t) && (void 0 !== t || n in e) || i(e, n, t)
            }
        },
        "64601f33": (e, n, t) => {
            var i = t("88b2cfe9");
            e.exports = function(e, n) {
                for (var t = e.length; t--;)
                    if (i(e[t][0], n)) return t;
                return -1
            }
        },
        "4c44fd41": (e, n, t) => {
            var i = t("c6007786");
            e.exports = function(e, n, t) {
                "__proto__" == n && i ? i(e, n, {
                    configurable: !0,
                    enumerable: !0,
                    value: t,
                    writable: !0
                }) : e[n] = t
            }
        },
        "9e6e0708": (e, n, t) => {
            var i = t("054c05e4"),
                a = Object.create,
                r = function() {
                    function e() {}
                    return function(n) {
                        if (!i(n)) return {};
                        if (a) return a(n);
                        e.prototype = n;
                        var t = new e;
                        return e.prototype = void 0, t
                    }
                }();
            e.exports = r
        },
        ce82b810: (e, n, t) => {
            var i = t("bdc47808")();
            e.exports = i
        },
        be3c8eec: (e, n, t) => {
            var i = t("22d23bc3"),
                a = t("9e1008fe"),
                r = t("554f84dd"),
                d = i ? i.toStringTag : void 0;
            e.exports = function(e) {
                return null == e ? void 0 === e ? "[object Undefined]" : "[object Null]" : d && d in Object(e) ? a(e) : r(e)
            }
        },
        "85c625c5": (e, n, t) => {
            var i = t("be3c8eec"),
                a = t("b2c4ea90");
            e.exports = function(e) {
                return a(e) && "[object Arguments]" == i(e)
            }
        },
        b09d727e: (e, n, t) => {
            var i = t("e2d039d2"),
                a = t("d06e4c4d"),
                r = t("054c05e4"),
                d = t("6f4ec914"),
                s = /^\[object .+?Constructor\]$/,
                l = Function.prototype,
                o = Object.prototype,
                u = l.toString,
                c = o.hasOwnProperty,
                m = RegExp("^" + u.call(c).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
            e.exports = function(e) {
                return !(!r(e) || a(e)) && (i(e) ? m : s).test(d(e))
            }
        },
        e11081d6: (e, n, t) => {
            var i = t("be3c8eec"),
                a = t("d1c372f5"),
                r = t("b2c4ea90"),
                d = {};
            d["[object Float32Array]"] = d["[object Float64Array]"] = d["[object Int8Array]"] = d["[object Int16Array]"] = d["[object Int32Array]"] = d["[object Uint8Array]"] = d["[object Uint8ClampedArray]"] = d["[object Uint16Array]"] = d["[object Uint32Array]"] = !0, d["[object Arguments]"] = d["[object Array]"] = d["[object ArrayBuffer]"] = d["[object Boolean]"] = d["[object DataView]"] = d["[object Date]"] = d["[object Error]"] = d["[object Function]"] = d["[object Map]"] = d["[object Number]"] = d["[object Object]"] = d["[object RegExp]"] = d["[object Set]"] = d["[object String]"] = d["[object WeakMap]"] = !1, e.exports = function(e) {
                return r(e) && a(e.length) && !!d[i(e)]
            }
        },
        "34680a60": (e, n, t) => {
            var i = t("054c05e4"),
                a = t("2b021237"),
                r = t("58857f07"),
                d = Object.prototype.hasOwnProperty;
            e.exports = function(e) {
                if (!i(e)) return r(e);
                var n = a(e),
                    t = [];
                for (var s in e)("constructor" != s || !n && d.call(e, s)) && t.push(s);
                return t
            }
        },
        "1a4b1e22": (e, n, t) => {
            var i = t("d2a80b53"),
                a = t("07a9660d"),
                r = t("ce82b810"),
                d = t("2452e779"),
                s = t("054c05e4"),
                l = t("b944f3af"),
                o = t("239cd1ed");
            e.exports = function e(n, t, u, c, m) {
                n !== t && r(t, (function(r, l) {
                    if (m || (m = new i), s(r)) d(n, t, l, u, e, c, m);
                    else {
                        var v = c ? c(o(n, l), r, l + "", n, t, m) : void 0;
                        void 0 === v && (v = r), a(n, l, v)
                    }
                }), l)
            }
        },
        "2452e779": (e, n, t) => {
            var i = t("07a9660d"),
                a = t("107c741a"),
                r = t("9413b132"),
                d = t("8999868a"),
                s = t("18201b19"),
                l = t("d172dc00"),
                o = t("51a89998"),
                u = t("f4c6ee99"),
                c = t("58a7f404"),
                m = t("e2d039d2"),
                v = t("054c05e4"),
                k = t("9e392f31"),
                g = t("9c616c27"),
                p = t("239cd1ed"),
                f = t("7bc05fac");
            e.exports = function(e, n, t, h, N, S, _) {
                var y = p(e, t),
                    b = p(n, t),
                    F = _.get(b);
                if (F) i(e, t, F);
                else {
                    var E = S ? S(y, b, t + "", e, n, _) : void 0,
                        T = void 0 === E;
                    if (T) {
                        var C = o(b),
                            I = !C && c(b),
                            A = !C && !I && g(b);
                        E = b, C || I || A ? o(y) ? E = y : u(y) ? E = d(y) : I ? (T = !1, E = a(b, !0)) : A ? (T = !1, E = r(b, !0)) : E = [] : k(b) || l(b) ? (E = y, l(y) ? E = f(y) : v(y) && !m(y) || (E = s(b))) : T = !1
                    }
                    T && (_.set(b, E), N(E, b, h, S, _), _.delete(b)), i(e, t, E)
                }
            }
        },
        "0878ffa2": e => {
            var n = Math.ceil,
                t = Math.max;
            e.exports = function(e, i, a, r) {
                for (var d = -1, s = t(n((i - e) / (a || 1)), 0), l = Array(s); s--;) l[r ? s : ++d] = e, e += a;
                return l
            }
        },
        e589de19: (e, n, t) => {
            var i = t("178daf3a"),
                a = t("0a72074a"),
                r = t("a21d6477");
            e.exports = function(e, n) {
                return r(a(e, n, i), e + "")
            }
        },
        15145594: (e, n, t) => {
            var i = t("cf2f6cdc"),
                a = t("c6007786"),
                r = t("178daf3a"),
                d = a ? function(e, n) {
                    return a(e, "toString", {
                        configurable: !0,
                        enumerable: !1,
                        value: i(n),
                        writable: !0
                    })
                } : r;
            e.exports = d
        },
        "25c703af": e => {
            e.exports = function(e, n) {
                for (var t = -1, i = Array(e); ++t < e;) i[t] = n(t);
                return i
            }
        },
        bd344935: (e, n, t) => {
            var i = t("a427c6bc"),
                a = /^\s+/;
            e.exports = function(e) {
                return e ? e.slice(0, i(e) + 1).replace(a, "") : e
            }
        },
        "06d95161": e => {
            e.exports = function(e) {
                return function(n) {
                    return e(n)
                }
            }
        },
        "356dc289": (e, n, t) => {
            var i = t("d0a5e2ee");
            e.exports = function(e) {
                var n = new e.constructor(e.byteLength);
                return new i(n).set(new i(e)), n
            }
        },
        "107c741a": (e, n, t) => {
            e = t.nmd(e);
            var i = t("7a61f31c"),
                a = n && !n.nodeType && n,
                r = a && e && !e.nodeType && e,
                d = r && r.exports === a ? i.Buffer : void 0,
                s = d ? d.allocUnsafe : void 0;
            e.exports = function(e, n) {
                if (n) return e.slice();
                var t = e.length,
                    i = s ? s(t) : new e.constructor(t);
                return e.copy(i), i
            }
        },
        "9413b132": (e, n, t) => {
            var i = t("356dc289");
            e.exports = function(e, n) {
                var t = n ? i(e.buffer) : e.buffer;
                return new e.constructor(t, e.byteOffset, e.length)
            }
        },
        "8999868a": e => {
            e.exports = function(e, n) {
                var t = -1,
                    i = e.length;
                for (n || (n = Array(i)); ++t < i;) n[t] = e[t];
                return n
            }
        },
        "24ebe2f2": (e, n, t) => {
            var i = t("10560ce8"),
                a = t("4c44fd41");
            e.exports = function(e, n, t, r) {
                var d = !t;
                t || (t = {});
                for (var s = -1, l = n.length; ++s < l;) {
                    var o = n[s],
                        u = r ? r(t[o], e[o], o, t, e) : void 0;
                    void 0 === u && (u = e[o]), d ? a(t, o, u) : i(t, o, u)
                }
                return t
            }
        },
        bb3a0bc7: (e, n, t) => {
            var i = t("7a61f31c")["__core-js_shared__"];
            e.exports = i
        },
        "51a901b8": (e, n, t) => {
            var i = t("e589de19"),
                a = t("db0ccb42");
            e.exports = function(e) {
                return i((function(n, t) {
                    var i = -1,
                        r = t.length,
                        d = r > 1 ? t[r - 1] : void 0,
                        s = r > 2 ? t[2] : void 0;
                    for (d = e.length > 3 && "function" == typeof d ? (r--, d) : void 0, s && a(t[0], t[1], s) && (d = r < 3 ? void 0 : d, r = 1), n = Object(n); ++i < r;) {
                        var l = t[i];
                        l && e(n, l, i, d)
                    }
                    return n
                }))
            }
        },
        bdc47808: e => {
            e.exports = function(e) {
                return function(n, t, i) {
                    for (var a = -1, r = Object(n), d = i(n), s = d.length; s--;) {
                        var l = d[e ? s : ++a];
                        if (!1 === t(r[l], l, r)) break
                    }
                    return n
                }
            }
        },
        "80fb8801": (e, n, t) => {
            var i = t("0878ffa2"),
                a = t("db0ccb42"),
                r = t("cfc32837");
            e.exports = function(e) {
                return function(n, t, d) {
                    return d && "number" != typeof d && a(n, t, d) && (t = d = void 0), n = r(n), void 0 === t ? (t = n, n = 0) : t = r(t), d = void 0 === d ? n < t ? 1 : -1 : r(d), i(n, t, d, e)
                }
            }
        },
        c6007786: (e, n, t) => {
            var i = t("e960a0df"),
                a = function() {
                    try {
                        var e = i(Object, "defineProperty");
                        return e({}, "", {}), e
                    } catch (n) {}
                }();
            e.exports = a
        },
        a4cc8e79: (e, n, t) => {
            var i = "object" == typeof t.g && t.g && t.g.Object === Object && t.g;
            e.exports = i
        },
        "76d30a52": (e, n, t) => {
            var i = t("472070cd");
            e.exports = function(e, n) {
                var t = e.__data__;
                return i(n) ? t["string" == typeof n ? "string" : "hash"] : t.map
            }
        },
        e960a0df: (e, n, t) => {
            var i = t("b09d727e"),
                a = t("9151aa94");
            e.exports = function(e, n) {
                var t = a(e, n);
                return i(t) ? t : void 0
            }
        },
        "193016e8": (e, n, t) => {
            var i = t("05a96611")(Object.getPrototypeOf, Object);
            e.exports = i
        },
        "9e1008fe": (e, n, t) => {
            var i = t("22d23bc3"),
                a = Object.prototype,
                r = a.hasOwnProperty,
                d = a.toString,
                s = i ? i.toStringTag : void 0;
            e.exports = function(e) {
                var n = r.call(e, s),
                    t = e[s];
                try {
                    e[s] = void 0;
                    var i = !0
                } catch (l) {}
                var a = d.call(e);
                return i && (n ? e[s] = t : delete e[s]), a
            }
        },
        "9151aa94": e => {
            e.exports = function(e, n) {
                return null == e ? void 0 : e[n]
            }
        },
        "67cfd54a": (e, n, t) => {
            var i = t("fa97b2a6");
            e.exports = function() {
                this.__data__ = i ? i(null) : {}, this.size = 0
            }
        },
        "3cb91c27": e => {
            e.exports = function(e) {
                var n = this.has(e) && delete this.__data__[e];
                return this.size -= n ? 1 : 0, n
            }
        },
        "77e40909": (e, n, t) => {
            var i = t("fa97b2a6"),
                a = Object.prototype.hasOwnProperty;
            e.exports = function(e) {
                var n = this.__data__;
                if (i) {
                    var t = n[e];
                    return "__lodash_hash_undefined__" === t ? void 0 : t
                }
                return a.call(n, e) ? n[e] : void 0
            }
        },
        baf98b63: (e, n, t) => {
            var i = t("fa97b2a6"),
                a = Object.prototype.hasOwnProperty;
            e.exports = function(e) {
                var n = this.__data__;
                return i ? void 0 !== n[e] : a.call(n, e)
            }
        },
        f9aecff3: (e, n, t) => {
            var i = t("fa97b2a6");
            e.exports = function(e, n) {
                var t = this.__data__;
                return this.size += this.has(e) ? 0 : 1, t[e] = i && void 0 === n ? "__lodash_hash_undefined__" : n, this
            }
        },
        "18201b19": (e, n, t) => {
            var i = t("9e6e0708"),
                a = t("193016e8"),
                r = t("2b021237");
            e.exports = function(e) {
                return "function" != typeof e.constructor || r(e) ? {} : i(a(e))
            }
        },
        "4050d1e6": e => {
            var n = /^(?:0|[1-9]\d*)$/;
            e.exports = function(e, t) {
                var i = typeof e;
                return !!(t = null == t ? 9007199254740991 : t) && ("number" == i || "symbol" != i && n.test(e)) && e > -1 && e % 1 == 0 && e < t
            }
        },
        db0ccb42: (e, n, t) => {
            var i = t("88b2cfe9"),
                a = t("80d74825"),
                r = t("4050d1e6"),
                d = t("054c05e4");
            e.exports = function(e, n, t) {
                if (!d(t)) return !1;
                var s = typeof n;
                return !!("number" == s ? a(t) && r(n, t.length) : "string" == s && n in t) && i(t[n], e)
            }
        },
        "472070cd": e => {
            e.exports = function(e) {
                var n = typeof e;
                return "string" == n || "number" == n || "symbol" == n || "boolean" == n ? "__proto__" !== e : null === e
            }
        },
        d06e4c4d: (e, n, t) => {
            var i = t("bb3a0bc7"),
                a = function() {
                    var e = /[^.]+$/.exec(i && i.keys && i.keys.IE_PROTO || "");
                    return e ? "Symbol(src)_1." + e : ""
                }();
            e.exports = function(e) {
                return !!a && a in e
            }
        },
        "2b021237": e => {
            var n = Object.prototype;
            e.exports = function(e) {
                var t = e && e.constructor;
                return e === ("function" == typeof t && t.prototype || n)
            }
        },
        "88cf0ec9": e => {
            e.exports = function() {
                this.__data__ = [], this.size = 0
            }
        },
        "2036f230": (e, n, t) => {
            var i = t("64601f33"),
                a = Array.prototype.splice;
            e.exports = function(e) {
                var n = this.__data__,
                    t = i(n, e);
                return !(t < 0) && (t == n.length - 1 ? n.pop() : a.call(n, t, 1), --this.size, !0)
            }
        },
        "4f6e9d16": (e, n, t) => {
            var i = t("64601f33");
            e.exports = function(e) {
                var n = this.__data__,
                    t = i(n, e);
                return t < 0 ? void 0 : n[t][1]
            }
        },
        "3d2e304d": (e, n, t) => {
            var i = t("64601f33");
            e.exports = function(e) {
                return i(this.__data__, e) > -1
            }
        },
        dd6bb5f8: (e, n, t) => {
            var i = t("64601f33");
            e.exports = function(e, n) {
                var t = this.__data__,
                    a = i(t, e);
                return a < 0 ? (++this.size, t.push([e, n])) : t[a][1] = n, this
            }
        },
        d10a4a5b: (e, n, t) => {
            var i = t("d4f9d3c3"),
                a = t("5e123842"),
                r = t("5146a2d1");
            e.exports = function() {
                this.size = 0, this.__data__ = {
                    hash: new i,
                    map: new(r || a),
                    string: new i
                }
            }
        },
        "45ab86d6": (e, n, t) => {
            var i = t("76d30a52");
            e.exports = function(e) {
                var n = i(this, e).delete(e);
                return this.size -= n ? 1 : 0, n
            }
        },
        efb323c8: (e, n, t) => {
            var i = t("76d30a52");
            e.exports = function(e) {
                return i(this, e).get(e)
            }
        },
        d2dd1be7: (e, n, t) => {
            var i = t("76d30a52");
            e.exports = function(e) {
                return i(this, e).has(e)
            }
        },
        b623841f: (e, n, t) => {
            var i = t("76d30a52");
            e.exports = function(e, n) {
                var t = i(this, e),
                    a = t.size;
                return t.set(e, n), this.size += t.size == a ? 0 : 1, this
            }
        },
        fa97b2a6: (e, n, t) => {
            var i = t("e960a0df")(Object, "create");
            e.exports = i
        },
        "58857f07": e => {
            e.exports = function(e) {
                var n = [];
                if (null != e)
                    for (var t in Object(e)) n.push(t);
                return n
            }
        },
        "7a48d066": (e, n, t) => {
            e = t.nmd(e);
            var i = t("a4cc8e79"),
                a = n && !n.nodeType && n,
                r = a && e && !e.nodeType && e,
                d = r && r.exports === a && i.process,
                s = function() {
                    try {
                        var e = r && r.require && r.require("util").types;
                        return e || d && d.binding && d.binding("util")
                    } catch (n) {}
                }();
            e.exports = s
        },
        "554f84dd": e => {
            var n = Object.prototype.toString;
            e.exports = function(e) {
                return n.call(e)
            }
        },
        "05a96611": e => {
            e.exports = function(e, n) {
                return function(t) {
                    return e(n(t))
                }
            }
        },
        "0a72074a": (e, n, t) => {
            var i = t("5bdf80f1"),
                a = Math.max;
            e.exports = function(e, n, t) {
                return n = a(void 0 === n ? e.length - 1 : n, 0),
                    function() {
                        for (var r = arguments, d = -1, s = a(r.length - n, 0), l = Array(s); ++d < s;) l[d] = r[n + d];
                        d = -1;
                        for (var o = Array(n + 1); ++d < n;) o[d] = r[d];
                        return o[n] = t(l), i(e, this, o)
                    }
            }
        },
        "7a61f31c": (e, n, t) => {
            var i = t("a4cc8e79"),
                a = "object" == typeof self && self && self.Object === Object && self,
                r = i || a || Function("return this")();
            e.exports = r
        },
        "239cd1ed": e => {
            e.exports = function(e, n) {
                if (("constructor" !== n || "function" !== typeof e[n]) && "__proto__" != n) return e[n]
            }
        },
        a21d6477: (e, n, t) => {
            var i = t("15145594"),
                a = t("772ae427")(i);
            e.exports = a
        },
        "772ae427": e => {
            var n = Date.now;
            e.exports = function(e) {
                var t = 0,
                    i = 0;
                return function() {
                    var a = n(),
                        r = 16 - (a - i);
                    if (i = a, r > 0) {
                        if (++t >= 800) return arguments[0]
                    } else t = 0;
                    return e.apply(void 0, arguments)
                }
            }
        },
        "8684809c": (e, n, t) => {
            var i = t("5e123842");
            e.exports = function() {
                this.__data__ = new i, this.size = 0
            }
        },
        "790c8203": e => {
            e.exports = function(e) {
                var n = this.__data__,
                    t = n.delete(e);
                return this.size = n.size, t
            }
        },
        "9a64160b": e => {
            e.exports = function(e) {
                return this.__data__.get(e)
            }
        },
        "32e4d8a1": e => {
            e.exports = function(e) {
                return this.__data__.has(e)
            }
        },
        "71155cde": (e, n, t) => {
            var i = t("5e123842"),
                a = t("5146a2d1"),
                r = t("7d880cac");
            e.exports = function(e, n) {
                var t = this.__data__;
                if (t instanceof i) {
                    var d = t.__data__;
                    if (!a || d.length < 199) return d.push([e, n]), this.size = ++t.size, this;
                    t = this.__data__ = new r(d)
                }
                return t.set(e, n), this.size = t.size, this
            }
        },
        "6f4ec914": e => {
            var n = Function.prototype.toString;
            e.exports = function(e) {
                if (null != e) {
                    try {
                        return n.call(e)
                    } catch (t) {}
                    try {
                        return e + ""
                    } catch (t) {}
                }
                return ""
            }
        },
        a427c6bc: e => {
            var n = /\s/;
            e.exports = function(e) {
                for (var t = e.length; t-- && n.test(e.charAt(t)););
                return t
            }
        },
        cf2f6cdc: e => {
            e.exports = function(e) {
                return function() {
                    return e
                }
            }
        },
        "88b2cfe9": e => {
            e.exports = function(e, n) {
                return e === n || e !== e && n !== n
            }
        },
        "178daf3a": e => {
            e.exports = function(e) {
                return e
            }
        },
        d172dc00: (e, n, t) => {
            var i = t("85c625c5"),
                a = t("b2c4ea90"),
                r = Object.prototype,
                d = r.hasOwnProperty,
                s = r.propertyIsEnumerable,
                l = i(function() {
                    return arguments
                }()) ? i : function(e) {
                    return a(e) && d.call(e, "callee") && !s.call(e, "callee")
                };
            e.exports = l
        },
        "51a89998": e => {
            var n = Array.isArray;
            e.exports = n
        },
        "80d74825": (e, n, t) => {
            var i = t("e2d039d2"),
                a = t("d1c372f5");
            e.exports = function(e) {
                return null != e && a(e.length) && !i(e)
            }
        },
        f4c6ee99: (e, n, t) => {
            var i = t("80d74825"),
                a = t("b2c4ea90");
            e.exports = function(e) {
                return a(e) && i(e)
            }
        },
        "58a7f404": (e, n, t) => {
            e = t.nmd(e);
            var i = t("7a61f31c"),
                a = t("8c60ab32"),
                r = n && !n.nodeType && n,
                d = r && e && !e.nodeType && e,
                s = d && d.exports === r ? i.Buffer : void 0,
                l = (s ? s.isBuffer : void 0) || a;
            e.exports = l
        },
        e2d039d2: (e, n, t) => {
            var i = t("be3c8eec"),
                a = t("054c05e4");
            e.exports = function(e) {
                if (!a(e)) return !1;
                var n = i(e);
                return "[object Function]" == n || "[object GeneratorFunction]" == n || "[object AsyncFunction]" == n || "[object Proxy]" == n
            }
        },
        d1c372f5: e => {
            e.exports = function(e) {
                return "number" == typeof e && e > -1 && e % 1 == 0 && e <= 9007199254740991
            }
        },
        "054c05e4": e => {
            e.exports = function(e) {
                var n = typeof e;
                return null != e && ("object" == n || "function" == n)
            }
        },
        b2c4ea90: e => {
            e.exports = function(e) {
                return null != e && "object" == typeof e
            }
        },
        "9e392f31": (e, n, t) => {
            var i = t("be3c8eec"),
                a = t("193016e8"),
                r = t("b2c4ea90"),
                d = Function.prototype,
                s = Object.prototype,
                l = d.toString,
                o = s.hasOwnProperty,
                u = l.call(Object);
            e.exports = function(e) {
                if (!r(e) || "[object Object]" != i(e)) return !1;
                var n = a(e);
                if (null === n) return !0;
                var t = o.call(n, "constructor") && n.constructor;
                return "function" == typeof t && t instanceof t && l.call(t) == u
            }
        },
        d01d54e3: (e, n, t) => {
            var i = t("be3c8eec"),
                a = t("b2c4ea90");
            e.exports = function(e) {
                return "symbol" == typeof e || a(e) && "[object Symbol]" == i(e)
            }
        },
        "9c616c27": (e, n, t) => {
            var i = t("e11081d6"),
                a = t("06d95161"),
                r = t("7a48d066"),
                d = r && r.isTypedArray,
                s = d ? a(d) : i;
            e.exports = s
        },
        b944f3af: (e, n, t) => {
            var i = t("77adaba7"),
                a = t("34680a60"),
                r = t("80d74825");
            e.exports = function(e) {
                return r(e) ? i(e, !0) : a(e)
            }
        },
        "441a45cb": (e, n, t) => {
            var i = t("1a4b1e22"),
                a = t("51a901b8")((function(e, n, t, a) {
                    i(e, n, t, a)
                }));
            e.exports = a
        },
        e4cbd52b: e => {
            e.exports = function() {}
        },
        "41390caa": (e, n, t) => {
            var i = t("80fb8801")();
            e.exports = i
        },
        "8c60ab32": e => {
            e.exports = function() {
                return !1
            }
        },
        cfc32837: (e, n, t) => {
            var i = t("0b2ec524"),
                a = 1 / 0;
            e.exports = function(e) {
                return e ? (e = i(e)) === a || e === -1 / 0 ? 17976931348623157e292 * (e < 0 ? -1 : 1) : e === e ? e : 0 : 0 === e ? e : 0
            }
        },
        "0b2ec524": (e, n, t) => {
            var i = t("bd344935"),
                a = t("054c05e4"),
                r = t("d01d54e3"),
                d = /^[-+]0x[0-9a-f]+$/i,
                s = /^0b[01]+$/i,
                l = /^0o[0-7]+$/i,
                o = parseInt;
            e.exports = function(e) {
                if ("number" == typeof e) return e;
                if (r(e)) return NaN;
                if (a(e)) {
                    var n = "function" == typeof e.valueOf ? e.valueOf() : e;
                    e = a(n) ? n + "" : n
                }
                if ("string" != typeof e) return 0 === e ? e : +e;
                e = i(e);
                var t = s.test(e);
                return t || l.test(e) ? o(e.slice(2), t ? 2 : 8) : d.test(e) ? NaN : +e
            }
        },
        "7bc05fac": (e, n, t) => {
            var i = t("24ebe2f2"),
                a = t("b944f3af");
            e.exports = function(e) {
                return i(e, a(e))
            }
        },
        e7547f91: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M19.268 8.913a.9.9 0 0 1-.266.642l-6.057 6.057A1.3 1.3 0 0 1 12 16c-.35.008-.69-.123-.945-.364L4.998 9.58a.91.91 0 0 1 0-1.284.897.897 0 0 1 1.284 0L12 13.99l5.718-5.718a.897.897 0 0 1 1.284 0 .88.88 0 0 1 .266.642"
                }))
            }
        },
        "337dc83a": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M2.75 12h18.5c.69 0 1.25.56 1.25 1.25V18l.75-.75H.75l.75.75v-4.75c0-.69.56-1.25 1.25-1.25m0-1.5A2.75 2.75 0 0 0 0 13.25V18c0 .414.336.75.75.75h22.5A.75.75 0 0 0 24 18v-4.75a2.75 2.75 0 0 0-2.75-2.75zM0 18v3a.75.75 0 0 0 1.5 0v-3A.75.75 0 0 0 0 18m22.5 0v3a.75.75 0 0 0 1.5 0v-3a.75.75 0 0 0-1.5 0m-.75-6.75V4.5a2.25 2.25 0 0 0-2.25-2.25h-15A2.25 2.25 0 0 0 2.25 4.5v6.75a.75.75 0 0 0 1.5 0V4.5a.75.75 0 0 1 .75-.75h15a.75.75 0 0 1 .75.75v6.75a.75.75 0 0 0 1.5 0m-13.25-3h7a.25.25 0 0 1 .25.25v2.75l.75-.75h-9l.75.75V8.5a.25.25 0 0 1 .25-.25m0-1.5A1.75 1.75 0 0 0 6.75 8.5v2.75c0 .414.336.75.75.75h9a.75.75 0 0 0 .75-.75V8.5a1.75 1.75 0 0 0-1.75-1.75z"
                }))
            }
        },
        "08b473e0": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M22.502 13.5v8.25a.75.75 0 0 1-.75.75h-19.5a.75.75 0 0 1-.75-.75V5.25a.75.75 0 0 1 .75-.75h19.5a.75.75 0 0 1 .75.75zm1.5 0V5.25A2.25 2.25 0 0 0 21.752 3h-19.5a2.25 2.25 0 0 0-2.25 2.25v16.5A2.25 2.25 0 0 0 2.252 24h19.5a2.25 2.25 0 0 0 2.25-2.25zm-23.25-3h22.5a.75.75 0 0 0 0-1.5H.752a.75.75 0 0 0 0 1.5M7.502 6V.75a.75.75 0 0 0-1.5 0V6a.75.75 0 0 0 1.5 0m10.5 0V.75a.75.75 0 0 0-1.5 0V6a.75.75 0 0 0 1.5 0"
                }))
            }
        },
        "1424d033": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M15 8.25a3 3 0 1 1-6 0 3 3 0 0 1 6 0m1.5 0a4.5 4.5 0 1 0-9 0 4.5 4.5 0 0 0 9 0M12 1.5a6.75 6.75 0 0 1 6.75 6.75c0 2.537-3.537 9.406-6.75 14.25-3.214-4.844-6.75-11.713-6.75-14.25A6.75 6.75 0 0 1 12 1.5M12 0a8.25 8.25 0 0 0-8.25 8.25c0 2.965 3.594 9.945 7 15.08a1.5 1.5 0 0 0 2.5 0c3.406-5.135 7-12.115 7-15.08A8.25 8.25 0 0 0 12 0"
                }))
            }
        },
        "434d016f": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M16.5 6a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0M18 6A6 6 0 1 0 6 6a6 6 0 0 0 12 0M3 23.25a9 9 0 1 1 18 0 .75.75 0 0 0 1.5 0c0-5.799-4.701-10.5-10.5-10.5S1.5 17.451 1.5 23.25a.75.75 0 0 0 1.5 0"
                }))
            }
        },
        "95d18bc1": (e, n, t) => {
            "use strict";
            n.Z = void 0;
            var i, a = (i = t("ead71eb0")) && i.__esModule ? i : {
                default: i
            };

            function r() {
                return r = Object.assign || function(e) {
                    for (var n = 1; n < arguments.length; n++) {
                        var t = arguments[n];
                        for (var i in t) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
                    }
                    return e
                }, r.apply(this, arguments)
            }
            var d = function(e) {
                return a.default.createElement("svg", r({
                    viewBox: "0 0 128 128",
                    width: "1em",
                    height: "1em"
                }, e), a.default.createElement("path", {
                    d: "M69.7 64l33.1-33.2a4 4 0 0 0-5.6-5.6L64 58.3 30.8 25.2a4 4 0 1 0-5.6 5.6L58.3 64 25.2 97.2a4 4 0 1 0 5.6 5.6L64 69.7l33.2 33.1a4 4 0 0 0 5.6-5.6z"
                }))
            };
            n.Z = d
        },
        aa4f11f5: (e, n, t) => {
            "use strict";
            n.Z = void 0;
            var i, a = (i = t("ead71eb0")) && i.__esModule ? i : {
                default: i
            };

            function r() {
                return r = Object.assign || function(e) {
                    for (var n = 1; n < arguments.length; n++) {
                        var t = arguments[n];
                        for (var i in t) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
                    }
                    return e
                }, r.apply(this, arguments)
            }
            var d = function(e) {
                return a.default.createElement("svg", r({
                    viewBox: "0 0 128 128",
                    width: "1em",
                    height: "1em"
                }, e), a.default.createElement("path", {
                    d: "M118.8 113.2l-31-31A4 4 0 0 0 85 81a44 44 0 1 0-4 4 4 4 0 0 0 1.2 2.8l31 31a4 4 0 0 0 5.6-5.7zM52 88a36 36 0 1 1 36-36 36 36 0 0 1-36 36z"
                }))
            };
            n.Z = d
        },
        "107a8bb5": (e, n, t) => {
            "use strict";
            t.d(n, {
                p6: () => H
            });
            var i = t("e74bf205"),
                a = t("abab1afe");

            function r(e, n, t) {
                void 0 === n && (n = 2), void 0 === t && (t = "0");
                for (var i = (e || "").toString(), a = i.length; a < n;) i = t + i, a++;
                return i
            }

            function d(e) {
                return e instanceof Date && !isNaN(e.getTime())
            }

            function s(e) {
                return {
                    dayOfMonth: e.getDate(),
                    day: (n = e.getDay(), 0 === n ? 7 : n),
                    month: e.getMonth() + 1,
                    year: e.getFullYear(),
                    hours: e.getHours(),
                    minutes: e.getMinutes(),
                    seconds: e.getSeconds()
                };
                var n
            }

            function l(e) {
                return void 0 === e && (e = {}), Object.keys(e).reduce((function(n, t) {
                    var i = e[t];
                    return null !== i && "undefined" !== typeof i && ("string" === typeof i ? n[t] = i : "number" !== typeof i || isNaN(i) || (n[t] = i.toString(10))), n
                }), {})
            }

            function o(e, n) {
                var t;
                if (!e) throw new Error("No i18n object provided");
                var o = function(e) {
                        var n = d(e) ? e : new Date("2019-01-01T" + e);
                        if (d(n)) {
                            var t = s(n);
                            return {
                                hour: t.hours,
                                minutes: t.minutes,
                                seconds: t.seconds
                            }
                        }
                        throw new Error("formatting/time: invalid time provided \u2014 " + e)
                    }(n.time),
                    u = (o.hour < 12 ? "AM" : "PM") + "_symbol",
                    c = (0, i.pi)({
                        AM_PM: e.trans((0, a.t)("time_format", u, "name", {
                            variables: {}
                        }))
                    }, function(e, n) {
                        var t = e.hour,
                            i = n ? t : e.hour,
                            a = 0 === e.hour || 12 === e.hour ? 12 : e.hour % 12;
                        return l({
                            hour_24h_no0: e.hour,
                            hour_24h: r(e.hour),
                            hour_24h_show24: r(t),
                            hour_24h_until24: r(i),
                            hour_12h: r(a),
                            minutes_no0: e.minutes,
                            minutes: r(e.minutes),
                            hour_12h_no0: a,
                            hour_24h_show24_no0: t,
                            hour_24h_until24_no0: i
                        })
                    }(o, null !== (t = n.until) && void 0 !== t && t));
                return e.trans((0, a.t)("time_format", "time", "name", {
                    variables: c
                }))
            }(0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "name"));
            const u = "name";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "genitive_lc"));
            const c = "genitive_lc";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "genitive_uc"));
            const m = "genitive_uc";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "name_only"));
            const v = "name_only";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "name_in"));
            const k = "name_in";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "name_from"));
            const g = "name_from";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "name_to"));
            const p = "name_to";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "name_def_article_lc"));
            const f = "name_def_article_lc";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "in_month_lc"));
            const h = "in_month_lc";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "name_lc"));
            const N = "name_lc";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "to_month_lc"));
            const S = "to_month_lc";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "short_name"));
            const _ = "short_name";
            (0, a.registerDynamicTags)((0, a.t)("month_for_formatted_date", "fakeIndex", "short_name_uc"));
            const y = "short_name_uc";
            var b = t("171cecd0");
            (0, a.registerDynamicTags)((0, a.t)("weekday_formatted_date", "fakeIndex", "name_on"));
            const F = "name_on";
            (0, a.registerDynamicTags)((0, a.t)("weekday_formatted_date", "fakeIndex", "name_from"));
            const E = "name_from";
            (0, a.registerDynamicTags)((0, a.t)("weekday_formatted_date", "fakeIndex", "name_to"));
            const T = "name_to";
            (0, a.registerDynamicTags)((0, a.t)("weekday_formatted_date", "fakeIndex", "short"));
            const C = "short";
            (0, a.registerDynamicTags)((0, a.t)("day_for_formatted_date", "fakeIndex", "day_from"));
            const I = "day_from";
            (0, a.registerDynamicTags)((0, a.t)("day_for_formatted_date", "fakeIndex", "day_on"));
            const A = "day_on";
            (0, a.registerDynamicTags)((0, a.t)("day_for_formatted_date", "fakeIndex", "day_other"));
            const O = "day_other";
            (0, a.registerDynamicTags)((0, a.t)("day_for_formatted_date", "fakeIndex", "day_until"));
            const D = "day_until";
            (0, a.registerDynamicTags)((0, a.t)("day_for_formatted_date", "fakeIndex", "name"));
            const R = "name";
            (0, a.registerDynamicTags)((0, a.t)("day_for_formatted_date", "fakeIndex", "day_1"));
            const x = "day_1";
            (0, a.registerDynamicTags)((0, a.t)("day_for_formatted_date", "fakeIndex", "day_2"));
            const P = "day_2";

            function L(e) {
                var n = (0, i.CR)(/^(\d{2}):(\d{2})(:(\d{2}))?/.exec(e) || [], 5),
                    t = n[1],
                    a = n[2],
                    d = n[4],
                    s = void 0 === d ? "0" : d;
                return new Date("2020-01-01T" + r(t) + ":" + r(a) + ":" + r(s))
            }

            function w(e) {
                var n = (0, i.CR)(e.split(/[\sT]/), 2),
                    t = n[0],
                    a = n[1];
                if (t || a) {
                    var d = new Date;
                    if (t && (d = function(e) {
                            var n = (0, i.CR)(/^(\d{4})-(\d{1,2})-(\d{1,2})$/.exec(e) || [], 4),
                                t = n[1],
                                a = n[2],
                                d = n[3];
                            return new Date(t + "-" + r(a) + "-" + r(d) + "T00:00")
                        }(t)), a) {
                        var l = L(a),
                            o = s(d),
                            u = o.year,
                            c = o.month,
                            m = o.dayOfMonth,
                            v = s(l),
                            k = v.hours,
                            g = v.minutes,
                            p = v.seconds;
                        d = new Date(u, c - 1, m, k, g, p)
                    }
                    return d
                }
                return null
            }

            function B(e, n) {
                var t = d(e) ? e : w(e),
                    i = n ? d(n) ? n : L(n) : void 0;
                if (!t) throw new Error("No date provided \u2014 '" + e + "' '" + n + "'");
                if (d(i) && d(e)) {
                    var a = s(e),
                        r = a.year,
                        l = a.month,
                        o = a.dayOfMonth,
                        u = s(i),
                        c = u.hours,
                        m = u.minutes,
                        v = u.seconds;
                    t = new Date(r, l - 1, o, c, m, v)
                }
                if (!d(t)) throw new Error("invalid date provided \u2014 '" + e + "' '" + n + "'");
                return t
            }

            function U(e, n, t, i, r) {
                return void 0 === r && (r = {}), Object.keys(r).reduce((function(d, s) {
                    return d[s + n] = e.trans((0, a.t)(t, i.toString(), r[s])), d
                }), {})
            }

            function M(e, n, t) {
                var d, l;
                void 0 === t && (t = "");
                var L = s(n),
                    w = L.month,
                    B = L.year,
                    M = L.dayOfMonth,
                    H = L.day,
                    V = w.toString(),
                    G = (0, i.pi)((0, i.pi)((0, i.pi)(((d = {})["full_year" + t] = B.toString(), d["month" + t] = V, d["day_of_month" + t] = M.toString(), d["month_name_with_year_only" + t] = e.trans((0, a.t)("month_for_formatted_date", V, "name_with_year_only")), d["time" + t] = o(e, {
                        time: n
                    }), d), U(e, t, "day_for_formatted_date", M, {
                        day_name_from: I,
                        day_name_on: A,
                        day_name_other: O,
                        day_name_till: D,
                        day_name_1: R,
                        day_other: O,
                        day_name: R,
                        day_1: x,
                        day_of_month: R,
                        day_2: P
                    })), U(e, t, "month_for_formatted_date", w, {
                        month_1: u,
                        month_2: u,
                        month_name_1: u,
                        month_name_2: u,
                        month_name: u,
                        month_name_genitive_lc: c,
                        month_name_genitive_uc: m,
                        month_name_nom: v,
                        month_name_in: k,
                        month_name_from: g,
                        month_name_to: p,
                        month_genitive_uc: m,
                        month_name_def_article_lc: f,
                        month_name_genitive: c,
                        month_name_in_lc: h,
                        month_name_lc: N,
                        month_name_to_lc: S,
                        month_name_with_year_only: v,
                        short_month_name: _,
                        short_month_name_uc: y
                    })), U(e, t, "weekday_formatted_date", H, {
                        weekday: b.Z,
                        weekday_nom: F,
                        weekday_from: E,
                        weekday_to: T,
                        short_weekday: C
                    }));
                return (0, i.pi)(((l = {})["year" + t] = G.full_year, l["day_name_0" + t] = r(G.day_of_month), l["day_name_1" + t] = G.day_of_month, l["month_name_0" + t] = r(G.month), l["month_name_1" + t] = G.month, l["day_name_from_0" + t] = r(G["day_name_from" + t]), l["day_name_on_0" + t] = r(G["day_name_on" + t]), l["day_name_other_0" + t] = r(G["day_name_other" + t]), l["day_name_till_0" + t] = r(G["day_name_till" + t]), l), G)
            }

            function H(e, n) {
                if (!e) throw new Error("No i18n object provided");
                var t = n.time,
                    r = n.timeUntil,
                    d = n.beginMarker,
                    s = void 0 === d ? "(" : d,
                    u = n.endMarker,
                    c = void 0 === u ? ")" : u,
                    m = n.form,
                    v = n.date,
                    k = n.dateUntil,
                    g = (0, i.pi)({
                        begin_marker: s,
                        end_marker: c
                    }, M(e, B(v, t)));
                return k && (g = (0, i.pi)((0, i.pi)({}, g), M(e, B(k, r), "_until"))), t && (g.time = o(e, {
                    time: t
                })), r && (g.time_until = o(e, {
                    time: r
                })), m ? e.trans((0, a.t)("date_format", "1", m, {
                    variables: l(g)
                })) : e.trans((0, a.t)("date_format", "1", "short_date", {
                    variables: l(g)
                }))
            }
        },
        "15199e50": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => a
            });
            var i = t("abab1afe");
            (0, i.registerDynamicTags)((0, i.t)("month_for_formatted_date", "fakeIndex", "name_with_year_only"));
            const a = "name_with_year_only"
        },
        "35bd00ce": (e, n, t) => {
            "use strict";
            t.d(n, {
                l: () => a
            });
            var i = t("abab1afe");

            function a(e, n) {
                if (!e) throw new Error("No i18n object provided");
                return ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"].reduce((function(t, a, r) {
                    return t[a] = e.trans((0, i.t)("month_for_formatted_date", (r + 1).toString(), n.form)), t
                }), {})
            }
        },
        "171cecd0": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => a
            });
            var i = t("abab1afe");
            (0, i.registerDynamicTags)((0, i.t)("weekday_formatted_date", "fakeIndex", "name"));
            const a = "name"
        },
        c1a68871: (e, n, t) => {
            "use strict";
            t.d(n, {
                o: () => a
            });
            var i = t("abab1afe");

            function a(e, n) {
                if (!e) throw new Error("No i18n object provided");
                return ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"].reduce((function(t, a, r) {
                    return t[a] = e.trans((0, i.t)("weekday_formatted_date", (r + 1).toString(), n.form)), t
                }), {})
            }
        },
        e91eda94: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => r
            });
            var i = t("af1e2b38"),
                a = t("cdfdb49e");

            function r() {
                return (0, i.Z6)().isWWW && (0, a.rP)()
            }
        },
        "0a555533": (e, n) => {
            "use strict";
            n.byteLength = function(e) {
                var n = s(e),
                    t = n[0],
                    i = n[1];
                return 3 * (t + i) / 4 - i
            }, n.toByteArray = function(e) {
                var n, t, r = s(e),
                    d = r[0],
                    l = r[1],
                    o = new a(function(e, n, t) {
                        return 3 * (n + t) / 4 - t
                    }(0, d, l)),
                    u = 0,
                    c = l > 0 ? d - 4 : d;
                for (t = 0; t < c; t += 4) n = i[e.charCodeAt(t)] << 18 | i[e.charCodeAt(t + 1)] << 12 | i[e.charCodeAt(t + 2)] << 6 | i[e.charCodeAt(t + 3)], o[u++] = n >> 16 & 255, o[u++] = n >> 8 & 255, o[u++] = 255 & n;
                2 === l && (n = i[e.charCodeAt(t)] << 2 | i[e.charCodeAt(t + 1)] >> 4, o[u++] = 255 & n);
                1 === l && (n = i[e.charCodeAt(t)] << 10 | i[e.charCodeAt(t + 1)] << 4 | i[e.charCodeAt(t + 2)] >> 2, o[u++] = n >> 8 & 255, o[u++] = 255 & n);
                return o
            }, n.fromByteArray = function(e) {
                for (var n, i = e.length, a = i % 3, r = [], d = 16383, s = 0, o = i - a; s < o; s += d) r.push(l(e, s, s + d > o ? o : s + d));
                1 === a ? (n = e[i - 1], r.push(t[n >> 2] + t[n << 4 & 63] + "==")) : 2 === a && (n = (e[i - 2] << 8) + e[i - 1], r.push(t[n >> 10] + t[n >> 4 & 63] + t[n << 2 & 63] + "="));
                return r.join("")
            };
            for (var t = [], i = [], a = "undefined" !== typeof Uint8Array ? Uint8Array : Array, r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", d = 0; d < 64; ++d) t[d] = r[d], i[r.charCodeAt(d)] = d;

            function s(e) {
                var n = e.length;
                if (n % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
                var t = e.indexOf("=");
                return -1 === t && (t = n), [t, t === n ? 0 : 4 - t % 4]
            }

            function l(e, n, i) {
                for (var a, r, d = [], s = n; s < i; s += 3) a = (e[s] << 16 & 16711680) + (e[s + 1] << 8 & 65280) + (255 & e[s + 2]), d.push(t[(r = a) >> 18 & 63] + t[r >> 12 & 63] + t[r >> 6 & 63] + t[63 & r]);
                return d.join("")
            }
            i["-".charCodeAt(0)] = 62, i["_".charCodeAt(0)] = 63
        },
        "24e040c9": function(e) {
            e.exports = function() {
                "use strict";
                var e = "millisecond",
                    n = "second",
                    t = "minute",
                    i = "hour",
                    a = "day",
                    r = "week",
                    d = "month",
                    s = "quarter",
                    l = "year",
                    o = /^(\d{4})-?(\d{1,2})-?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d{1,3})?$/,
                    u = /\[([^\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
                    c = function(e, n, t) {
                        var i = String(e);
                        return !i || i.length >= n ? e : "" + Array(n + 1 - i.length).join(t) + e
                    },
                    m = {
                        s: c,
                        z: function(e) {
                            var n = -e.utcOffset(),
                                t = Math.abs(n),
                                i = Math.floor(t / 60),
                                a = t % 60;
                            return (n <= 0 ? "+" : "-") + c(i, 2, "0") + ":" + c(a, 2, "0")
                        },
                        m: function(e, n) {
                            var t = 12 * (n.year() - e.year()) + (n.month() - e.month()),
                                i = e.clone().add(t, d),
                                a = n - i < 0,
                                r = e.clone().add(t + (a ? -1 : 1), d);
                            return Number(-(t + (n - i) / (a ? i - r : r - i)) || 0)
                        },
                        a: function(e) {
                            return e < 0 ? Math.ceil(e) || 0 : Math.floor(e)
                        },
                        p: function(o) {
                            return {
                                M: d,
                                y: l,
                                w: r,
                                d: a,
                                D: "date",
                                h: i,
                                m: t,
                                s: n,
                                ms: e,
                                Q: s
                            }[o] || String(o || "").toLowerCase().replace(/s$/, "")
                        },
                        u: function(e) {
                            return void 0 === e
                        }
                    },
                    v = {
                        name: "en",
                        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
                        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
                    },
                    k = "en",
                    g = {};
                g[k] = v;
                var p = function(e) {
                        return e instanceof S
                    },
                    f = function(e, n, t) {
                        var i;
                        if (!e) return k;
                        if ("string" == typeof e) g[e] && (i = e), n && (g[e] = n, i = e);
                        else {
                            var a = e.name;
                            g[a] = e, i = a
                        }
                        return !t && i && (k = i), i || !t && k
                    },
                    h = function(e, n) {
                        if (p(e)) return e.clone();
                        var t = "object" == typeof n ? n : {};
                        return t.date = e, t.args = arguments, new S(t)
                    },
                    N = m;
                N.l = f, N.i = p, N.w = function(e, n) {
                    return h(e, {
                        locale: n.$L,
                        utc: n.$u,
                        $offset: n.$offset
                    })
                };
                var S = function() {
                    function c(e) {
                        this.$L = this.$L || f(e.locale, null, !0), this.parse(e)
                    }
                    var m = c.prototype;
                    return m.parse = function(e) {
                        this.$d = function(e) {
                            var n = e.date,
                                t = e.utc;
                            if (null === n) return new Date(NaN);
                            if (N.u(n)) return new Date;
                            if (n instanceof Date) return new Date(n);
                            if ("string" == typeof n && !/Z$/i.test(n)) {
                                var i = n.match(o);
                                if (i) return t ? new Date(Date.UTC(i[1], i[2] - 1, i[3] || 1, i[4] || 0, i[5] || 0, i[6] || 0, i[7] || 0)) : new Date(i[1], i[2] - 1, i[3] || 1, i[4] || 0, i[5] || 0, i[6] || 0, i[7] || 0)
                            }
                            return new Date(n)
                        }(e), this.init()
                    }, m.init = function() {
                        var e = this.$d;
                        this.$y = e.getFullYear(), this.$M = e.getMonth(), this.$D = e.getDate(), this.$W = e.getDay(), this.$H = e.getHours(), this.$m = e.getMinutes(), this.$s = e.getSeconds(), this.$ms = e.getMilliseconds()
                    }, m.$utils = function() {
                        return N
                    }, m.isValid = function() {
                        return !("Invalid Date" === this.$d.toString())
                    }, m.isSame = function(e, n) {
                        var t = h(e);
                        return this.startOf(n) <= t && t <= this.endOf(n)
                    }, m.isAfter = function(e, n) {
                        return h(e) < this.startOf(n)
                    }, m.isBefore = function(e, n) {
                        return this.endOf(n) < h(e)
                    }, m.$g = function(e, n, t) {
                        return N.u(e) ? this[n] : this.set(t, e)
                    }, m.year = function(e) {
                        return this.$g(e, "$y", l)
                    }, m.month = function(e) {
                        return this.$g(e, "$M", d)
                    }, m.day = function(e) {
                        return this.$g(e, "$W", a)
                    }, m.date = function(e) {
                        return this.$g(e, "$D", "date")
                    }, m.hour = function(e) {
                        return this.$g(e, "$H", i)
                    }, m.minute = function(e) {
                        return this.$g(e, "$m", t)
                    }, m.second = function(e) {
                        return this.$g(e, "$s", n)
                    }, m.millisecond = function(n) {
                        return this.$g(n, "$ms", e)
                    }, m.unix = function() {
                        return Math.floor(this.valueOf() / 1e3)
                    }, m.valueOf = function() {
                        return this.$d.getTime()
                    }, m.startOf = function(e, s) {
                        var o = this,
                            u = !!N.u(s) || s,
                            c = N.p(e),
                            m = function(e, n) {
                                var t = N.w(o.$u ? Date.UTC(o.$y, n, e) : new Date(o.$y, n, e), o);
                                return u ? t : t.endOf(a)
                            },
                            v = function(e, n) {
                                return N.w(o.toDate()[e].apply(o.toDate("s"), (u ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(n)), o)
                            },
                            k = this.$W,
                            g = this.$M,
                            p = this.$D,
                            f = "set" + (this.$u ? "UTC" : "");
                        switch (c) {
                            case l:
                                return u ? m(1, 0) : m(31, 11);
                            case d:
                                return u ? m(1, g) : m(0, g + 1);
                            case r:
                                var h = this.$locale().weekStart || 0,
                                    S = (k < h ? k + 7 : k) - h;
                                return m(u ? p - S : p + (6 - S), g);
                            case a:
                            case "date":
                                return v(f + "Hours", 0);
                            case i:
                                return v(f + "Minutes", 1);
                            case t:
                                return v(f + "Seconds", 2);
                            case n:
                                return v(f + "Milliseconds", 3);
                            default:
                                return this.clone()
                        }
                    }, m.endOf = function(e) {
                        return this.startOf(e, !1)
                    }, m.$set = function(r, s) {
                        var o, u = N.p(r),
                            c = "set" + (this.$u ? "UTC" : ""),
                            m = (o = {}, o[a] = c + "Date", o.date = c + "Date", o[d] = c + "Month", o[l] = c + "FullYear", o[i] = c + "Hours", o[t] = c + "Minutes", o[n] = c + "Seconds", o[e] = c + "Milliseconds", o)[u],
                            v = u === a ? this.$D + (s - this.$W) : s;
                        if (u === d || u === l) {
                            var k = this.clone().set("date", 1);
                            k.$d[m](v), k.init(), this.$d = k.set("date", Math.min(this.$D, k.daysInMonth())).toDate()
                        } else m && this.$d[m](v);
                        return this.init(), this
                    }, m.set = function(e, n) {
                        return this.clone().$set(e, n)
                    }, m.get = function(e) {
                        return this[N.p(e)]()
                    }, m.add = function(e, s) {
                        var o, u = this;
                        e = Number(e);
                        var c = N.p(s),
                            m = function(n) {
                                var t = h(u);
                                return N.w(t.date(t.date() + Math.round(n * e)), u)
                            };
                        if (c === d) return this.set(d, this.$M + e);
                        if (c === l) return this.set(l, this.$y + e);
                        if (c === a) return m(1);
                        if (c === r) return m(7);
                        var v = (o = {}, o[t] = 6e4, o[i] = 36e5, o[n] = 1e3, o)[c] || 1,
                            k = this.$d.getTime() + e * v;
                        return N.w(k, this)
                    }, m.subtract = function(e, n) {
                        return this.add(-1 * e, n)
                    }, m.format = function(e) {
                        var n = this;
                        if (!this.isValid()) return "Invalid Date";
                        var t = e || "YYYY-MM-DDTHH:mm:ssZ",
                            i = N.z(this),
                            a = this.$locale(),
                            r = this.$H,
                            d = this.$m,
                            s = this.$M,
                            l = a.weekdays,
                            o = a.months,
                            c = function(e, i, a, r) {
                                return e && (e[i] || e(n, t)) || a[i].substr(0, r)
                            },
                            m = function(e) {
                                return N.s(r % 12 || 12, e, "0")
                            },
                            v = a.meridiem || function(e, n, t) {
                                var i = e < 12 ? "AM" : "PM";
                                return t ? i.toLowerCase() : i
                            },
                            k = {
                                YY: String(this.$y).slice(-2),
                                YYYY: this.$y,
                                M: s + 1,
                                MM: N.s(s + 1, 2, "0"),
                                MMM: c(a.monthsShort, s, o, 3),
                                MMMM: c(o, s),
                                D: this.$D,
                                DD: N.s(this.$D, 2, "0"),
                                d: String(this.$W),
                                dd: c(a.weekdaysMin, this.$W, l, 2),
                                ddd: c(a.weekdaysShort, this.$W, l, 3),
                                dddd: l[this.$W],
                                H: String(r),
                                HH: N.s(r, 2, "0"),
                                h: m(1),
                                hh: m(2),
                                a: v(r, d, !0),
                                A: v(r, d, !1),
                                m: String(d),
                                mm: N.s(d, 2, "0"),
                                s: String(this.$s),
                                ss: N.s(this.$s, 2, "0"),
                                SSS: N.s(this.$ms, 3, "0"),
                                Z: i
                            };
                        return t.replace(u, (function(e, n) {
                            return n || k[e] || i.replace(":", "")
                        }))
                    }, m.utcOffset = function() {
                        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15)
                    }, m.diff = function(e, o, u) {
                        var c, m = N.p(o),
                            v = h(e),
                            k = 6e4 * (v.utcOffset() - this.utcOffset()),
                            g = this - v,
                            p = N.m(this, v);
                        return p = (c = {}, c[l] = p / 12, c[d] = p, c[s] = p / 3, c[r] = (g - k) / 6048e5, c[a] = (g - k) / 864e5, c[i] = g / 36e5, c[t] = g / 6e4, c[n] = g / 1e3, c)[m] || g, u ? p : N.a(p)
                    }, m.daysInMonth = function() {
                        return this.endOf(d).$D
                    }, m.$locale = function() {
                        return g[this.$L]
                    }, m.locale = function(e, n) {
                        if (!e) return this.$L;
                        var t = this.clone(),
                            i = f(e, n, !0);
                        return i && (t.$L = i), t
                    }, m.clone = function() {
                        return N.w(this.$d, this)
                    }, m.toDate = function() {
                        return new Date(this.valueOf())
                    }, m.toJSON = function() {
                        return this.isValid() ? this.toISOString() : null
                    }, m.toISOString = function() {
                        return this.$d.toISOString()
                    }, m.toString = function() {
                        return this.$d.toUTCString()
                    }, c
                }();
                return h.prototype = S.prototype, h.extend = function(e, n) {
                    return e(n, S, h), h
                }, h.locale = f, h.isDayjs = p, h.unix = function(e) {
                    return h(1e3 * e)
                }, h.en = g[k], h.Ls = g, h
            }()
        },
        e65db334: function(e) {
            e.exports = function() {
                "use strict";
                var e, n = /(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
                    t = /\d\d/,
                    i = /\d\d?/,
                    a = /\d*[^\s\d-:/()]+/,
                    r = function(e) {
                        return function(n) {
                            this[e] = +n
                        }
                    },
                    d = [/[+-]\d\d:?\d\d/, function(e) {
                        var n, t;
                        (this.zone || (this.zone = {})).offset = 0 === (t = 60 * (n = e.match(/([+-]|\d\d)/g))[1] + +n[2]) ? 0 : "+" === n[0] ? -t : t
                    }],
                    s = function(n) {
                        var t = e[n];
                        return t && (t.indexOf ? t : t.s.concat(t.f))
                    },
                    l = {
                        A: [/[AP]M/, function(e) {
                            this.afternoon = "PM" === e
                        }],
                        a: [/[ap]m/, function(e) {
                            this.afternoon = "pm" === e
                        }],
                        S: [/\d/, function(e) {
                            this.milliseconds = 100 * +e
                        }],
                        SS: [t, function(e) {
                            this.milliseconds = 10 * +e
                        }],
                        SSS: [/\d{3}/, function(e) {
                            this.milliseconds = +e
                        }],
                        s: [i, r("seconds")],
                        ss: [i, r("seconds")],
                        m: [i, r("minutes")],
                        mm: [i, r("minutes")],
                        H: [i, r("hours")],
                        h: [i, r("hours")],
                        HH: [i, r("hours")],
                        hh: [i, r("hours")],
                        D: [i, r("day")],
                        DD: [t, r("day")],
                        Do: [a, function(n) {
                            var t = e.ordinal,
                                i = n.match(/\d+/);
                            if (this.day = i[0], t)
                                for (var a = 1; a <= 31; a += 1) t(a).replace(/\[|\]/g, "") === n && (this.day = a)
                        }],
                        M: [i, r("month")],
                        MM: [t, r("month")],
                        MMM: [a, function(e) {
                            var n = s("months"),
                                t = (s("monthsShort") || n.map((function(e) {
                                    return e.substr(0, 3)
                                }))).indexOf(e) + 1;
                            if (t < 1) throw new Error;
                            this.month = t % 12 || t
                        }],
                        MMMM: [a, function(e) {
                            var n = s("months").indexOf(e) + 1;
                            if (n < 1) throw new Error;
                            this.month = n % 12 || n
                        }],
                        Y: [/[+-]?\d+/, r("year")],
                        YY: [t, function(e) {
                            e = +e, this.year = e + (e > 68 ? 1900 : 2e3)
                        }],
                        YYYY: [/\d{4}/, r("year")],
                        Z: d,
                        ZZ: d
                    },
                    o = function(e, t, i) {
                        try {
                            var a = function(e) {
                                    for (var t = e.match(n), i = t.length, a = 0; a < i; a += 1) {
                                        var r = t[a],
                                            d = l[r],
                                            s = d && d[0],
                                            o = d && d[1];
                                        t[a] = o ? {
                                            regex: s,
                                            parser: o
                                        } : r.replace(/^\[|\]$/g, "")
                                    }
                                    return function(e) {
                                        for (var n = {}, a = 0, r = 0; a < i; a += 1) {
                                            var d = t[a];
                                            if ("string" == typeof d) r += d.length;
                                            else {
                                                var s = d.regex,
                                                    l = d.parser,
                                                    o = e.substr(r),
                                                    u = s.exec(o)[0];
                                                l.call(n, u), e = e.replace(u, "")
                                            }
                                        }
                                        return function(e) {
                                            var n = e.afternoon;
                                            if (void 0 !== n) {
                                                var t = e.hours;
                                                n ? t < 12 && (e.hours += 12) : 12 === t && (e.hours = 0), delete e.afternoon
                                            }
                                        }(n), n
                                    }
                                }(t)(e),
                                r = a.year,
                                d = a.month,
                                s = a.day,
                                o = a.hours,
                                u = a.minutes,
                                c = a.seconds,
                                m = a.milliseconds,
                                v = a.zone,
                                k = new Date,
                                g = s || (r || d ? 1 : k.getDate()),
                                p = r || k.getFullYear(),
                                f = 0;
                            r && !d || (f = d > 0 ? d - 1 : k.getMonth());
                            var h = o || 0,
                                N = u || 0,
                                S = c || 0,
                                _ = m || 0;
                            return v ? new Date(Date.UTC(p, f, g, h, N, S, _ + 60 * v.offset * 1e3)) : i ? new Date(Date.UTC(p, f, g, h, N, S, _)) : new Date(p, f, g, h, N, S, _)
                        } catch (e) {
                            return new Date("")
                        }
                    };
                return function(n, t, i) {
                    var a = t.prototype,
                        r = a.parse;
                    a.parse = function(n) {
                        var t = n.date,
                            a = n.utc,
                            d = n.args;
                        this.$u = a;
                        var s = d[1];
                        if ("string" == typeof s) {
                            var l = !0 === d[2],
                                u = !0 === d[3],
                                c = l || u,
                                m = d[2];
                            u && (m = d[2]), l || (e = m ? i.Ls[m] : this.$locale()), this.$d = o(t, s, a), this.init(), m && !0 !== m && (this.$L = this.locale(m).$L), c && t !== this.format(s) && (this.$d = new Date(""))
                        } else if (s instanceof Array)
                            for (var v = s.length, k = 1; k <= v; k += 1) {
                                d[1] = s[k - 1];
                                var g = i.apply(this, d);
                                if (g.isValid()) {
                                    this.$d = g.$d, this.$L = g.$L, this.init();
                                    break
                                }
                                k === v && (this.$d = new Date(""))
                            } else r.call(this, n)
                    }
                }
            }()
        },
        "7fd19181": function(e) {
            e.exports = function() {
                "use strict";
                return function(e, n) {
                    n.prototype.isSameOrBefore = function(e, n) {
                        return this.isSame(e, n) || this.isBefore(e, n)
                    }
                }
            }()
        },
        "8da416e8": function(e) {
            e.exports = function() {
                "use strict";
                return function(e, n, t) {
                    var i = (new Date).getTimezoneOffset(),
                        a = n.prototype;
                    t.utc = function(e) {
                        return new n({
                            date: e,
                            utc: !0,
                            args: arguments
                        })
                    }, a.utc = function() {
                        return t(this.toDate(), {
                            locale: this.$L,
                            utc: !0
                        })
                    }, a.local = function() {
                        return t(this.toDate(), {
                            locale: this.$L,
                            utc: !1
                        })
                    };
                    var r = a.parse;
                    a.parse = function(e) {
                        e.utc && (this.$u = !0), this.$utils().u(e.$offset) || (this.$offset = e.$offset), r.call(this, e)
                    };
                    var d = a.init;
                    a.init = function() {
                        if (this.$u) {
                            var e = this.$d;
                            this.$y = e.getUTCFullYear(), this.$M = e.getUTCMonth(), this.$D = e.getUTCDate(), this.$W = e.getUTCDay(), this.$H = e.getUTCHours(), this.$m = e.getUTCMinutes(), this.$s = e.getUTCSeconds(), this.$ms = e.getUTCMilliseconds()
                        } else d.call(this)
                    };
                    var s = a.utcOffset;
                    a.utcOffset = function(e) {
                        var n = this.$utils().u;
                        if (n(e)) return this.$u ? 0 : n(this.$offset) ? s.call(this) : this.$offset;
                        var t, a = Math.abs(e) <= 16 ? 60 * e : e;
                        return 0 !== e ? (t = this.local().add(a + i, "minute")).$offset = a : t = this.utc(), t
                    };
                    var l = a.format;
                    a.format = function(e) {
                        var n = e || (this.$u ? "YYYY-MM-DDTHH:mm:ss[Z]" : "");
                        return l.call(this, n)
                    }, a.valueOf = function() {
                        var e = this.$utils().u(this.$offset) ? 0 : this.$offset + i;
                        return this.$d.valueOf() - 6e4 * e
                    }, a.isUTC = function() {
                        return !!this.$u
                    }, a.toISOString = function() {
                        return this.toDate().toISOString()
                    }, a.toString = function() {
                        return this.toDate().toUTCString()
                    };
                    var o = a.toDate;
                    a.toDate = function(e) {
                        return "s" === e && this.$offset ? t(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate() : o.call(this)
                    }
                }
            }()
        },
        b61503d5: (e, n) => {
            n.read = function(e, n, t, i, a) {
                var r, d, s = 8 * a - i - 1,
                    l = (1 << s) - 1,
                    o = l >> 1,
                    u = -7,
                    c = t ? a - 1 : 0,
                    m = t ? -1 : 1,
                    v = e[n + c];
                for (c += m, r = v & (1 << -u) - 1, v >>= -u, u += s; u > 0; r = 256 * r + e[n + c], c += m, u -= 8);
                for (d = r & (1 << -u) - 1, r >>= -u, u += i; u > 0; d = 256 * d + e[n + c], c += m, u -= 8);
                if (0 === r) r = 1 - o;
                else {
                    if (r === l) return d ? NaN : 1 / 0 * (v ? -1 : 1);
                    d += Math.pow(2, i), r -= o
                }
                return (v ? -1 : 1) * d * Math.pow(2, r - i)
            }, n.write = function(e, n, t, i, a, r) {
                var d, s, l, o = 8 * r - a - 1,
                    u = (1 << o) - 1,
                    c = u >> 1,
                    m = 23 === a ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                    v = i ? 0 : r - 1,
                    k = i ? 1 : -1,
                    g = n < 0 || 0 === n && 1 / n < 0 ? 1 : 0;
                for (n = Math.abs(n), isNaN(n) || n === 1 / 0 ? (s = isNaN(n) ? 1 : 0, d = u) : (d = Math.floor(Math.log(n) / Math.LN2), n * (l = Math.pow(2, -d)) < 1 && (d--, l *= 2), (n += d + c >= 1 ? m / l : m * Math.pow(2, 1 - c)) * l >= 2 && (d++, l /= 2), d + c >= u ? (s = 0, d = u) : d + c >= 1 ? (s = (n * l - 1) * Math.pow(2, a), d += c) : (s = n * Math.pow(2, c - 1) * Math.pow(2, a), d = 0)); a >= 8; e[t + v] = 255 & s, v += k, s /= 256, a -= 8);
                for (d = d << a | s, o += a; o > 0; e[t + v] = 255 & d, v += k, d /= 256, o -= 8);
                e[t + v - k] |= 128 * g
            }
        },
        "5030d674": e => {
            "use strict";

            function n(e) {
                try {
                    return JSON.stringify(e)
                } catch (n) {
                    return '"[Circular]"'
                }
            }
            e.exports = function(e, t, i) {
                var a = i && i.stringify || n;
                if ("object" === typeof e && null !== e) {
                    var r = t.length + 1;
                    if (1 === r) return e;
                    var d = new Array(r);
                    d[0] = a(e);
                    for (var s = 1; s < r; s++) d[s] = a(t[s]);
                    return d.join(" ")
                }
                if ("string" !== typeof e) return e;
                var l = t.length;
                if (0 === l) return e;
                for (var o = "", u = 0, c = -1, m = e && e.length || 0, v = 0; v < m;) {
                    if (37 === e.charCodeAt(v) && v + 1 < m) {
                        switch (c = c > -1 ? c : 0, e.charCodeAt(v + 1)) {
                            case 100:
                            case 102:
                                if (u >= l) break;
                                if (null == t[u]) break;
                                c < v && (o += e.slice(c, v)), o += Number(t[u]), c = v + 2, v++;
                                break;
                            case 105:
                                if (u >= l) break;
                                if (null == t[u]) break;
                                c < v && (o += e.slice(c, v)), o += Math.floor(Number(t[u])), c = v + 2, v++;
                                break;
                            case 79:
                            case 111:
                            case 106:
                                if (u >= l) break;
                                if (void 0 === t[u]) break;
                                c < v && (o += e.slice(c, v));
                                var k = typeof t[u];
                                if ("string" === k) {
                                    o += "'" + t[u] + "'", c = v + 2, v++;
                                    break
                                }
                                if ("function" === k) {
                                    o += t[u].name || "<anonymous>", c = v + 2, v++;
                                    break
                                }
                                o += a(t[u]), c = v + 2, v++;
                                break;
                            case 115:
                                if (u >= l) break;
                                c < v && (o += e.slice(c, v)), o += String(t[u]), c = v + 2, v++;
                                break;
                            case 37:
                                c < v && (o += e.slice(c, v)), o += "%", c = v + 2, v++, u--
                        }++u
                    }++v
                }
                if (-1 === c) return e;
                c < m && (o += e.slice(c));
                return o
            }
        },
        d10849cd: (e, n, t) => {
            "use strict";
            const i = t("5030d674");
            e.exports = c;
            const a = function() {
                    function e(e) {
                        return "undefined" !== typeof e && e
                    }
                    try {
                        return "undefined" !== typeof globalThis || Object.defineProperty(Object.prototype, "globalThis", {
                            get: function() {
                                return delete Object.prototype.globalThis, this.globalThis = this
                            },
                            configurable: !0
                        }), globalThis
                    } catch (n) {
                        return e(self) || e(window) || e(this) || {}
                    }
                }().console || {},
                r = {
                    mapHttpRequest: f,
                    mapHttpResponse: f,
                    wrapRequestSerializer: h,
                    wrapResponseSerializer: h,
                    wrapErrorSerializer: h,
                    req: f,
                    res: f,
                    err: g,
                    errWithCause: g
                };

            function d(e, n) {
                return "silent" === e ? 1 / 0 : n.levels.values[e]
            }
            const s = Symbol("pino.logFuncs"),
                l = Symbol("pino.hierarchy"),
                o = {
                    error: "log",
                    fatal: "error",
                    warn: "error",
                    info: "log",
                    debug: "log",
                    trace: "log"
                };

            function u(e, n) {
                const t = {
                    logger: n,
                    parent: e[l]
                };
                n[l] = t
            }

            function c(e) {
                (e = e || {}).browser = e.browser || {};
                const n = e.browser.transmit;
                if (n && "function" !== typeof n.send) throw Error("pino: transmit option must have a send function");
                const t = e.browser.write || a;
                e.browser.write && (e.browser.asObject = !0);
                const i = e.serializers || {},
                    r = function(e, n) {
                        if (Array.isArray(e)) return e.filter((function(e) {
                            return "!stdSerializers.err" !== e
                        }));
                        return !0 === e && Object.keys(n)
                    }(e.browser.serialize, i);
                let l = e.browser.serialize;
                Array.isArray(e.browser.serialize) && e.browser.serialize.indexOf("!stdSerializers.err") > -1 && (l = !1);
                const g = Object.keys(e.customLevels || {}),
                    f = ["error", "fatal", "warn", "info", "debug", "trace"].concat(g);
                "function" === typeof t && f.forEach((function(e) {
                    t[e] = t
                })), (!1 === e.enabled || e.browser.disabled) && (e.level = "silent");
                const h = e.level || "info",
                    S = Object.create(t);
                S.log || (S.log = N),
                    function(e, n, t) {
                        const i = {};
                        n.forEach((e => {
                            i[e] = t[e] ? t[e] : a[e] || a[o[e] || "log"] || N
                        })), e[s] = i
                    }(S, f, t), u({}, S), Object.defineProperty(S, "levelVal", {
                        get: function() {
                            return d(this.level, this)
                        }
                    }), Object.defineProperty(S, "level", {
                        get: function() {
                            return this._level
                        },
                        set: function(e) {
                            if ("silent" !== e && !this.levels.values[e]) throw Error("unknown level " + e);
                            this._level = e, m(this, _, S, "error"), m(this, _, S, "fatal"), m(this, _, S, "warn"), m(this, _, S, "info"), m(this, _, S, "debug"), m(this, _, S, "trace"), g.forEach((e => {
                                m(this, _, S, e)
                            }))
                        }
                    });
                const _ = {
                    transmit: n,
                    serialize: r,
                    asObject: e.browser.asObject,
                    formatters: e.browser.formatters,
                    levels: f,
                    timestamp: p(e),
                    messageKey: e.messageKey || "msg",
                    onChild: e.onChild || N
                };

                function y(t, a, d) {
                    if (!a) throw new Error("missing bindings for child Pino");
                    d = d || {}, r && a.serializers && (d.serializers = a.serializers);
                    const s = d.serializers;
                    if (r && s) {
                        var l = Object.assign({}, i, s),
                            o = !0 === e.browser.serialize ? Object.keys(l) : r;
                        delete a.serializers, v([a], o, l, this._stdErrSerialize)
                    }

                    function c(e) {
                        this._childLevel = 1 + (0 | e._childLevel), this.bindings = a, l && (this.serializers = l, this._serialize = o), n && (this._logEvent = k([].concat(e._logEvent.bindings, a)))
                    }
                    c.prototype = this;
                    const m = new c(this);
                    return u(this, m), m.child = function() {
                        for (var e = arguments.length, n = new Array(e), i = 0; i < e; i++) n[i] = arguments[i];
                        return y.call(this, t, ...n)
                    }, m.level = d.level || this.level, t.onChild(m), m
                }
                return S.levels = function(e) {
                    const n = e.customLevels || {},
                        t = Object.assign({}, c.levels.values, n),
                        i = Object.assign({}, c.levels.labels, function(e) {
                            const n = {};
                            return Object.keys(e).forEach((function(t) {
                                n[e[t]] = t
                            })), n
                        }(n));
                    return {
                        values: t,
                        labels: i
                    }
                }(e), S.level = h, S.setMaxListeners = S.getMaxListeners = S.emit = S.addListener = S.on = S.prependListener = S.once = S.prependOnceListener = S.removeListener = S.removeAllListeners = S.listeners = S.listenerCount = S.eventNames = S.write = S.flush = N, S.serializers = i, S._serialize = r, S._stdErrSerialize = l, S.child = function() {
                    for (var e = arguments.length, n = new Array(e), t = 0; t < e; t++) n[t] = arguments[t];
                    return y.call(this, _, ...n)
                }, n && (S._logEvent = k()), S
            }

            function m(e, n, t, r) {
                if (Object.defineProperty(e, r, {
                        value: d(e.level, t) > d(r, t) ? N : t[s][r],
                        writable: !0,
                        enumerable: !0,
                        configurable: !0
                    }), e[r] === N) {
                    if (!n.transmit) return;
                    const i = n.transmit.level || e.level,
                        a = t.levels.values[i];
                    if (t.levels.values[r] < a) return
                }
                e[r] = function(e, n, t, r) {
                    return l = e[s][r],
                        function() {
                            const s = n.timestamp(),
                                o = new Array(arguments.length),
                                u = Object.getPrototypeOf && Object.getPrototypeOf(this) === a ? a : this;
                            for (var c = 0; c < o.length; c++) o[c] = arguments[c];
                            var m = !1;
                            if (n.serialize && (v(o, this._serialize, this.serializers, this._stdErrSerialize), m = !0), n.asObject || n.formatters ? l.call(u, function(e, n, t, a, r) {
                                    const {
                                        level: d,
                                        log: s = e => e
                                    } = r.formatters || {}, l = t.slice();
                                    let o = l[0];
                                    const u = {};
                                    if (a && (u.time = a), d) {
                                        const t = d(n, e.levels.values[n]);
                                        Object.assign(u, t)
                                    } else u.level = e.levels.values[n];
                                    let c = 1 + (0 | e._childLevel);
                                    if (c < 1 && (c = 1), null !== o && "object" === typeof o) {
                                        for (; c-- && "object" === typeof l[0];) Object.assign(u, l.shift());
                                        o = l.length ? i(l.shift(), l) : void 0
                                    } else "string" === typeof o && (o = i(l.shift(), l));
                                    return void 0 !== o && (u[r.messageKey] = o), s(u)
                                }(this, r, o, s, n)) : l.apply(u, o), n.transmit) {
                                const i = n.transmit.level || e._level,
                                    a = t.levels.values[i],
                                    l = t.levels.values[r];
                                if (l < a) return;
                                ! function(e, n, t) {
                                    let i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
                                    const a = n.send,
                                        r = n.ts,
                                        d = n.methodLevel,
                                        s = n.methodValue,
                                        l = n.val,
                                        o = e._logEvent.bindings;
                                    i || v(t, e._serialize || Object.keys(e.serializers), e.serializers, void 0 === e._stdErrSerialize || e._stdErrSerialize), e._logEvent.ts = r, e._logEvent.messages = t.filter((function(e) {
                                        return -1 === o.indexOf(e)
                                    })), e._logEvent.level.label = d, e._logEvent.level.value = s, a(d, e._logEvent, l), e._logEvent = k(o)
                                }(this, {
                                    ts: s,
                                    methodLevel: r,
                                    methodValue: l,
                                    transmitLevel: i,
                                    transmitValue: t.levels.values[n.transmit.level || e._level],
                                    send: n.transmit.send,
                                    val: d(e._level, t)
                                }, o, m)
                            }
                        };
                    var l
                }(e, n, t, r);
                const o = function(e) {
                    const n = [];
                    e.bindings && n.push(e.bindings);
                    let t = e[l];
                    for (; t.parent;) t = t.parent, t.logger.bindings && n.push(t.logger.bindings);
                    return n.reverse()
                }(e);
                0 !== o.length && (e[r] = function(e, n) {
                    return function() {
                        return n.apply(this, [...e, ...arguments])
                    }
                }(o, e[r]))
            }

            function v(e, n, t, i) {
                for (const a in e)
                    if (i && e[a] instanceof Error) e[a] = c.stdSerializers.err(e[a]);
                    else if ("object" === typeof e[a] && !Array.isArray(e[a]) && n)
                    for (const i in e[a]) n.indexOf(i) > -1 && i in t && (e[a][i] = t[i](e[a][i]))
            }

            function k(e) {
                return {
                    ts: 0,
                    messages: [],
                    bindings: e || [],
                    level: {
                        label: "",
                        value: 0
                    }
                }
            }

            function g(e) {
                const n = {
                    type: e.constructor.name,
                    msg: e.message,
                    stack: e.stack
                };
                for (const t in e) void 0 === n[t] && (n[t] = e[t]);
                return n
            }

            function p(e) {
                return "function" === typeof e.timestamp ? e.timestamp : !1 === e.timestamp ? S : _
            }

            function f() {
                return {}
            }

            function h(e) {
                return e
            }

            function N() {}

            function S() {
                return !1
            }

            function _() {
                return Date.now()
            }
            c.levels = {
                values: {
                    fatal: 60,
                    error: 50,
                    warn: 40,
                    info: 30,
                    debug: 20,
                    trace: 10
                },
                labels: {
                    10: "trace",
                    20: "debug",
                    30: "info",
                    40: "warn",
                    50: "error",
                    60: "fatal"
                }
            }, c.stdSerializers = r, c.stdTimeFunctions = Object.assign({}, {
                nullTime: S,
                epochTime: _,
                unixTime: function() {
                    return Math.round(Date.now() / 1e3)
                },
                isoTime: function() {
                    return new Date(Date.now()).toISOString()
                }
            }), e.exports.default = c, e.exports.pino = c
        },
        "8521b397": (e, n) => {
            var t;
            ! function() {
                "use strict";
                var i = {}.hasOwnProperty;

                function a() {
                    for (var e = "", n = 0; n < arguments.length; n++) {
                        var t = arguments[n];
                        t && (e = d(e, r(t)))
                    }
                    return e
                }

                function r(e) {
                    if ("string" === typeof e || "number" === typeof e) return e;
                    if ("object" !== typeof e) return "";
                    if (Array.isArray(e)) return a.apply(null, e);
                    if (e.toString !== Object.prototype.toString && !e.toString.toString().includes("[native code]")) return e.toString();
                    var n = "";
                    for (var t in e) i.call(e, t) && e[t] && (n = d(n, t));
                    return n
                }

                function d(e, n) {
                    return n ? e ? e + " " + n : e + n : e
                }
                e.exports ? (a.default = a, e.exports = a) : void 0 === (t = function() {
                    return a
                }.apply(n, [])) || (e.exports = t)
            }()
        },
        e74bf205: (e, n, t) => {
            "use strict";
            t.d(n, {
                CR: () => o,
                Jh: () => l,
                ZT: () => a,
                _T: () => d,
                ev: () => u,
                mG: () => s,
                pi: () => r
            });
            var i = function(e, n) {
                return i = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(e, n) {
                    e.__proto__ = n
                } || function(e, n) {
                    for (var t in n) Object.prototype.hasOwnProperty.call(n, t) && (e[t] = n[t])
                }, i(e, n)
            };

            function a(e, n) {
                if ("function" !== typeof n && null !== n) throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");

                function t() {
                    this.constructor = e
                }
                i(e, n), e.prototype = null === n ? Object.create(n) : (t.prototype = n.prototype, new t)
            }
            var r = function() {
                return r = Object.assign || function(e) {
                    for (var n, t = 1, i = arguments.length; t < i; t++)
                        for (var a in n = arguments[t]) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a]);
                    return e
                }, r.apply(this, arguments)
            };

            function d(e, n) {
                var t = {};
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && n.indexOf(i) < 0 && (t[i] = e[i]);
                if (null != e && "function" === typeof Object.getOwnPropertySymbols) {
                    var a = 0;
                    for (i = Object.getOwnPropertySymbols(e); a < i.length; a++) n.indexOf(i[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, i[a]) && (t[i[a]] = e[i[a]])
                }
                return t
            }

            function s(e, n, t, i) {
                return new(t || (t = Promise))((function(a, r) {
                    function d(e) {
                        try {
                            l(i.next(e))
                        } catch (n) {
                            r(n)
                        }
                    }

                    function s(e) {
                        try {
                            l(i.throw(e))
                        } catch (n) {
                            r(n)
                        }
                    }

                    function l(e) {
                        var n;
                        e.done ? a(e.value) : (n = e.value, n instanceof t ? n : new t((function(e) {
                            e(n)
                        }))).then(d, s)
                    }
                    l((i = i.apply(e, n || [])).next())
                }))
            }

            function l(e, n) {
                var t, i, a, r, d = {
                    label: 0,
                    sent: function() {
                        if (1 & a[0]) throw a[1];
                        return a[1]
                    },
                    trys: [],
                    ops: []
                };
                return r = {
                    next: s(0),
                    throw: s(1),
                    return: s(2)
                }, "function" === typeof Symbol && (r[Symbol.iterator] = function() {
                    return this
                }), r;

                function s(s) {
                    return function(l) {
                        return function(s) {
                            if (t) throw new TypeError("Generator is already executing.");
                            for (; r && (r = 0, s[0] && (d = 0)), d;) try {
                                if (t = 1, i && (a = 2 & s[0] ? i.return : s[0] ? i.throw || ((a = i.return) && a.call(i), 0) : i.next) && !(a = a.call(i, s[1])).done) return a;
                                switch (i = 0, a && (s = [2 & s[0], a.value]), s[0]) {
                                    case 0:
                                    case 1:
                                        a = s;
                                        break;
                                    case 4:
                                        return d.label++, {
                                            value: s[1],
                                            done: !1
                                        };
                                    case 5:
                                        d.label++, i = s[1], s = [0];
                                        continue;
                                    case 7:
                                        s = d.ops.pop(), d.trys.pop();
                                        continue;
                                    default:
                                        if (!(a = (a = d.trys).length > 0 && a[a.length - 1]) && (6 === s[0] || 2 === s[0])) {
                                            d = 0;
                                            continue
                                        }
                                        if (3 === s[0] && (!a || s[1] > a[0] && s[1] < a[3])) {
                                            d.label = s[1];
                                            break
                                        }
                                        if (6 === s[0] && d.label < a[1]) {
                                            d.label = a[1], a = s;
                                            break
                                        }
                                        if (a && d.label < a[2]) {
                                            d.label = a[2], d.ops.push(s);
                                            break
                                        }
                                        a[2] && d.ops.pop(), d.trys.pop();
                                        continue
                                }
                                s = n.call(e, d)
                            } catch (l) {
                                s = [6, l], i = 0
                            } finally {
                                t = a = 0
                            }
                            if (5 & s[0]) throw s[1];
                            return {
                                value: s[0] ? s[1] : void 0,
                                done: !0
                            }
                        }([s, l])
                    }
                }
            }
            Object.create;

            function o(e, n) {
                var t = "function" === typeof Symbol && e[Symbol.iterator];
                if (!t) return e;
                var i, a, r = t.call(e),
                    d = [];
                try {
                    for (;
                        (void 0 === n || n-- > 0) && !(i = r.next()).done;) d.push(i.value)
                } catch (s) {
                    a = {
                        error: s
                    }
                } finally {
                    try {
                        i && !i.done && (t = r.return) && t.call(r)
                    } finally {
                        if (a) throw a.error
                    }
                }
                return d
            }

            function u(e, n, t) {
                if (t || 2 === arguments.length)
                    for (var i, a = 0, r = n.length; a < r; a++) !i && a in n || (i || (i = Array.prototype.slice.call(n, 0, a)), i[a] = n[a]);
                return e.concat(i || Array.prototype.slice.call(n))
            }
            Object.create;
            "function" === typeof SuppressedError && SuppressedError
        },
        "00d29d3a": (e, n, t) => {
            "use strict";

            function i(e) {
                return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                    return typeof e
                } : function(e) {
                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
                }, i(e)
            }

            function a(e) {
                var n = function(e, n) {
                    if ("object" != i(e) || !e) return e;
                    var t = e[Symbol.toPrimitive];
                    if (void 0 !== t) {
                        var a = t.call(e, n || "default");
                        if ("object" != i(a)) return a;
                        throw new TypeError("@@toPrimitive must return a primitive value.")
                    }
                    return ("string" === n ? String : Number)(e)
                }(e, "string");
                return "symbol" == i(n) ? n : n + ""
            }

            function r(e, n, t) {
                return (n = a(n)) in e ? Object.defineProperty(e, n, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[n] = t, e
            }
            t.d(n, {
                Z: () => r
            })
        },
        "3d054e81": (e, n, t) => {
            "use strict";

            function i() {
                return i = Object.assign ? Object.assign.bind() : function(e) {
                    for (var n = 1; n < arguments.length; n++) {
                        var t = arguments[n];
                        for (var i in t)({}).hasOwnProperty.call(t, i) && (e[i] = t[i])
                    }
                    return e
                }, i.apply(null, arguments)
            }
            t.d(n, {
                Z: () => i
            })
        },
        "6447fa60": (e, n, t) => {
            "use strict";

            function i() {
                return i = Object.assign || function(e) {
                    for (var n = 1; n < arguments.length; n++) {
                        var t = arguments[n];
                        for (var i in t) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
                    }
                    return e
                }, i.apply(this, arguments)
            }
            t.d(n, {
                _: () => i
            })
        },
        "95d6d3ae": (e, n, t) => {
            "use strict";
            t.d(n, {
                _: () => a
            });
            var i = t("52853b11");

            function a(e, n) {
                if ("function" !== typeof n && null !== n) throw new TypeError("Super expression must either be null or a function");
                e.prototype = Object.create(n && n.prototype, {
                    constructor: {
                        value: e,
                        writable: !0,
                        configurable: !0
                    }
                }), n && (0, i.b)(e, n)
            }
        },
        "52853b11": (e, n, t) => {
            "use strict";

            function i(e, n) {
                return i = Object.setPrototypeOf || function(e, n) {
                    return e.__proto__ = n, e
                }, i(e, n)
            }
            t.d(n, {
                b: () => i
            })
        },
        accefac5: (e, n, t) => {
            "use strict";

            function i(e) {
                return e && "undefined" !== typeof Symbol && e.constructor === Symbol ? "symbol" : typeof e
            }
            t.d(n, {
                _: () => i
            })
        },
        b775b7a7: (e, n, t) => {
            "use strict";
            t.d(n, {
                _: () => d
            });
            var i = t("52853b11");

            function a(e, n, t) {
                return a = function() {
                    if ("undefined" === typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" === typeof Proxy) return !0;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {}))), !0
                    } catch (e) {
                        return !1
                    }
                }() ? Reflect.construct : function(e, n, t) {
                    var a = [null];
                    a.push.apply(a, n);
                    var r = new(Function.bind.apply(e, a));
                    return t && (0, i.b)(r, t.prototype), r
                }, a.apply(null, arguments)
            }

            function r(e) {
                return r = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) {
                    return e.__proto__ || Object.getPrototypeOf(e)
                }, r(e)
            }

            function d(e) {
                var n = "function" === typeof Map ? new Map : void 0;
                return d = function(e) {
                    if (null === e || (t = e, -1 === Function.toString.call(t).indexOf("[native code]"))) return e;
                    var t;
                    if ("function" !== typeof e) throw new TypeError("Super expression must either be null or a function");
                    if ("undefined" !== typeof n) {
                        if (n.has(e)) return n.get(e);
                        n.set(e, d)
                    }

                    function d() {
                        return a(e, arguments, r(this).constructor)
                    }
                    return d.prototype = Object.create(e.prototype, {
                        constructor: {
                            value: d,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), (0, i.b)(d, e)
                }, d(e)
            }
        }
    }
]);
//# sourceMappingURL=https://istatic.booking.com/internal-static/capla/static/js/0d919837.225661b0.chunk.js.map