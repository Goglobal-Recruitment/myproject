/*! For license information please see c8637181.1e1c432c.chunk.js.LICENSE.txt */
(self["b-index-lp-web-mfe__LOADABLE_LOADED_CHUNKS__"] = self["b-index-lp-web-mfe__LOADABLE_LOADED_CHUNKS__"] || []).push([
    ["c8637181", "572dba2c", "1faad75c", "bf5d442e", "1d36ff76", "db86981b"], {
        d0989236: (e, n, t) => {
            "use strict";
            t.d(n, {
                B: () => a
            });
            var i = t("dc6d28ff");

            function a() {
                const e = (0, i.getRequestContext)();
                return {
                    get acceptHeader() {
                        return e.getAcceptHeader()
                    },
                    get actionName() {
                        return e.getActionName()
                    },
                    get affiliate() {
                        return e.getAffiliate()
                    },
                    get basePageUrl() {
                        return e.getBasePageUrl()
                    },
                    get body() {
                        return e.getBody()
                    },
                    get bPlatformEnvironment() {
                        return e.getBPlatformEnvironment()
                    },
                    get CDNOrigin() {
                        return e.getCDNOrigin()
                    },
                    get CSPNonce() {
                        return e.getCSPNonce()
                    },
                    get CSRFToken() {
                        return e.getCSRFToken()
                    },
                    get currency() {
                        return e.getCurrency()
                    },
                    get encryptedCommonOauthState() {
                        return e.getEncryptedCommonOauthState()
                    },
                    get ETSerializedState() {
                        return e.getETSerializedState()
                    },
                    get isInternalIp() {
                        return e.isInternalIp()
                    },
                    get isInternalUser() {
                        return e.isInternalUser()
                    },
                    get isLanding() {
                        return e.isLanding()
                    },
                    get isNormalRequest() {
                        return e.isNormalRequest()
                    },
                    get isRobotRequest() {
                        return e.isRobotRequest()
                    },
                    get language() {
                        return e.getLanguage()
                    },
                    get pageviewId() {
                        return e.getPageviewId()
                    },
                    get partnerIdentity() {
                        return e.getPartnerIdentity()
                    },
                    get publicPath() {
                        return e.getPublicPath()
                    },
                    get sessions() {
                        return e.getSessions()
                    },
                    get siteId() {
                        return e.getSiteId()
                    },
                    get siteType() {
                        return e.getSiteType()
                    },
                    get staffIdentity() {
                        return e.getStaffIdentity()
                    },
                    get userAgent() {
                        return e.getUserAgent()
                    },
                    get userIdentity() {
                        return e.getUserIdentity()
                    },
                    get visitorCountry() {
                        return e.getVisitorCountry()
                    },
                    get visitorCountryRegion() {
                        return e.getVisitorCountryRegion()
                    },
                    get visitorIP() {
                        return e.getVisitorIP()
                    },
                    get visitorUfi() {
                        return e.getVisitorUfi()
                    },
                    get isCnDomain() {
                        var n;
                        return null === e || void 0 === e || null === (n = e.getBasePageUrl()) || void 0 === n || null === (n = n.host) || void 0 === n ? void 0 : n.endsWith("booking.cn")
                    }
                }
            }
        },
        de4a3ce2: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => k
            });
            var i = t("3d054e81"),
                a = t("ead71eb0"),
                r = t.n(a);
            const d = function() {
                return a.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 80 32"
                }, a.createElement("g", {
                    fill: "none"
                }, a.createElement("rect", {
                    width: 80,
                    height: 32.049,
                    fill: "#004cb8",
                    rx: 4
                }), a.createElement("path", {
                    fill: "#fff",
                    d: "m44.9668352 5.5533056c.216944 0 .339024.090062.3661543.269157l.0058137.082203v6.00384c0 .598784.15488 1.081728.468224 1.446784.311552.365184.752384.546944 1.318784.546944.8360411 0 1.5222034-.3462224 2.0583844-1.0386671l.1210716-.1659409v-6.79296c0-.204512.088396-.320138.2661313-.345849l.0816447-.005511h2.201984c.203392 0 .318388.090062.343959.269157l.005481.082203v9.97056c0 .204512-.089572.318864-.267687.3442565l-.081753.0054395h-1.787008c-.2109806 0-.3651605-.0750446-.4590737-.2251337l-.0419183-.0812983-.26176-.635136c-.290944.26304-.542208.467328-.752256.612736-.210048.147072-.507904.282112-.893568.406656-.385664.12288-.81088.185216-1.275648.185216-1.220608 0-2.186496-.375552-2.8992-1.128448-.6602514-.6974537-1.0146749-1.6397022-1.0619382-2.8224411l-.0054538-.2772069v-6.3552c0-.204512.094864-.320138.283563-.345849l.086613-.005511zm12.803968-.35456c1.773184 0 3.117824.562432 4.033664 1.687424.140112.165088.140476.320866.0022925.4651045l-.0677005.0611035-1.1776 1.095552c-.173824.131456-.34944.108928-.523392-.065792-.624896-.657664-1.358336-.986496-2.201856-.986496-.521728 0-.940032.07616-1.253376.230144-.311552.15232-.468224.361728-.468224.624768 0 .306304.19968.559104.59904.756352.401152.195584 1.057152.375552 1.972992.536576 2.49984.422272 3.749632 1.5264 3.749632 3.309056 0 1.079936-.42176 1.934976-1.263616 2.5632-.843648.628224-1.874816.941568-3.095424.941568-1.265408 0-2.306944-.266624-3.128192-.799616-.821248-.53312-1.39968-1.208064-1.733632-2.026752-.088928-.192304-.049966-.338254.116886-.44128l.079338-.041536 1.656192-.744192c.218624-.102144.37184-.043264.457984.174848.175616.453376.480256.825472.91584 1.117952s.958976.437888 1.570176.437888c.507776 0 .919296-.095232 1.230848-.283776.313344-.190464.468352-.446592.468352-.768512 0-.365184-.203136-.655872-.609408-.875776-.408064-.219776-1.119104-.423936-2.136576-.612608-1.031168-.190336-1.84896-.558976-2.451584-1.107712-.604288-.546816-.9056-1.230464-.9056-2.049152 0-.977792.37888-1.756672 1.134592-2.332928.754048-.576384 1.764608-.865408 3.028352-.865408zm-36.68096 0c1.642496 0 2.928512.507136 3.858176 1.523072.929664 1.014144 1.394432 2.289664 1.394432 3.823104v.700928c0 .233728-.115328.35136-.347648.35136h-7.499392c.160128.671488.476928 1.21152.948608 1.621632.47168.408448 1.07264.612736 1.79904.612736.988288 0 1.742336-.408448 2.265728-1.227136.087808-.131456.225536-.15232.414848-.065664l1.874816.78912c.21696.072704.268544.204288.151552.394624-1.06048 1.79648-2.628864 2.694784-4.706944 2.694784-1.570048 0-2.902528-.526208-4.000896-1.576704-1.096704-1.052288-1.645952-2.397056-1.645952-4.03264 0-1.635456.545792-2.980224 1.635584-4.032512 1.089792-1.050624 2.375808-1.576704 3.858048-1.576704zm-12.376576-5.1987456c2.16 0 4.13952.7363072 5.660544 1.9553792.07296.0590464.118144.1424.125056.232704.010368.0937728-.017408.1840768-.076416.2570112-.388992.4688768-1.19808 1.4448384-1.59744 1.9241344-.059008.0729344-.14592.11808-.239616.1250304-.093824.0069504-.184064-.0243072-.253568-.0833536-.958464-.8127232-2.226048-1.3059072-3.61856-1.3059072-2.976256 0-5.389824 2.3757312-5.389824 5.1542272s2.413568 5.036032 5.389824 5.036032c1.156352 0 2.226048-.340352 3.10464-.92032v-2.250624h-2.54912c-.09024 0-.18048-.034688-.246528-.100736-.062464-.06592-.100736-.152832-.100736-.246528v-2.181248c0-.093696.038272-.180608.100736-.246528.066048-.062592.156288-.100736.246528-.100736h5.025152c.190976 0 .347264.156288.347264.347264v6.307328c0 .208384-.09024.402816-.25344.538368-1.524608 1.219072-3.51104 1.955328-5.674496 1.955328-4.8098688 0-8.7132672-3.646848-8.7132672-8.1376 0-4.4942592 3.9033984-8.2592256 8.7132672-8.2592256zm24.552448 5.1987456c1.220608 0 2.162304.332288 2.823424.996864.6138971.61710629.9427154 1.47006759.9865573 2.56011373l.0050587.25575827v6.793088c0 .2044-.08967.318738-.2677238.3441288l-.0817162.0054392h-2.200192c-.203392 0-.318486-.088788-.3440815-.2674788l-.0054865-.0820892v-6.026368c0-1.315328-.602496-1.972992-1.809408-1.972992-.406272 0-.814336.124672-1.220608.373888-.33856.20618667-.6125867.42801778-.82008.66556741l-.116496.14441659v6.815488c0 .2044-.094864.318738-.2846778.3441288l-.0871622.0054392h-2.179584c-.215376 0-.337162-.088788-.3642433-.2674788l-.0058047-.0820892v-9.970688c0-.2044.094864-.320012.2834773-.34572125l.0865707-.00551075h1.7888c.2109806 0 .3587657.08134531.4422269.24194015l.0363651.08689185.284032.6144c.929664-.818688 1.947136-1.227136 3.050752-1.227136zm7.523712.265216c.216832 0 .337526.090062.3643115.26907125l.0057365.08216075v9.970688c0 .204512-.09359.318766-.2829995.344134l-.0870485.005434h-2.179584c-.216944 0-.337652-.08869-.3644393-.267442l-.0057367-.082126v-9.970688c0-.2044.09359-.320012.2830852-.34572125l.0870908-.00551075zm-19.699584 2.211456c-.63872 0-1.174144.162688-1.602816.49152s-.736896.756352-.926208 1.282432h5.013248c-.101504-.49664-.383872-.917248-.848768-1.259904-.46656-.342656-1.01056-.514048-1.635456-.514048z",
                    transform: "translate(9 7)"
                }), a.createElement("path", {
                    fill: "#febb02",
                    d: "m37.6090112 2.1196288c0 .5691264.204288 1.058944.614656 1.4694272.410496.4084992.900224.6147328 1.469312.6147328s1.058816-.2062336 1.469312-.6147328c.408448-.4104832.614656-.9003008.614656-1.4694272s-.206208-1.0589312-.614656-1.4694272c-.410496-.4104832-.900224-.6147328-1.469312-.6147328s-1.058816.2042496-1.469312.6147328c-.410368.410496-.614656.9003008-.614656 1.4694272z",
                    transform: "translate(9 7)"
                })))
            };
            var l = t("6222292b"),
                s = t("abab1afe"),
                o = t("c44dcb0c"),
                c = t("8521b397"),
                m = t.n(c);
            const u = "f4e2bdcdc7";
            var v = t("43bedd84");
            const k = e => {
                const {
                    size: n,
                    className: t
                } = (e => "deal-badge" === e ? {
                    className: u
                } : {
                    size: e
                })(e.size), {
                    trans: a
                } = (0, o.useI18n)(), c = e.ariaLabel || a((0, s.t)("www_ge_screenreader_generic_logo", {
                    variables: {
                        b_companyname: v.p
                    }
                }));
                return r().createElement(l.Icon, (0, i.Z)({}, e, {
                    size: n,
                    svg: d,
                    ariaLabel: c,
                    className: m()([e.className, t])
                }))
            }
        },
        f3c8bee5: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => o
            });
            var i = t("3d054e81"),
                a = t("af1e2b38"),
                r = t("5245e060"),
                d = t("ead71eb0"),
                l = t.n(d);
            const s = e => {
                    if ("number" === typeof e) return e;
                    return e[(0, a.sv)() || r.N.MDOT]
                },
                o = e => {
                    let {
                        queenMabId: n,
                        ...t
                    } = e;
                    return l().createElement("div", (0, i.Z)({}, t, {
                        "data-qmab-component-id": s(n)
                    }))
                }
        },
        84451606: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => c
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("6222292b");
            const d = "abb411a687",
                l = "f45d6fffc8",
                s = "fd814929a2",
                o = e => {
                    let {
                        buttons: n,
                        onCloseAction: t
                    } = e;
                    return a().createElement(r.Stack, {
                        className: d,
                        gap: 2
                    }, n.map((e => {
                        let {
                            text: n,
                            url: i,
                            variant: d,
                            ariaLabel: l,
                            onClickHandler: s
                        } = e;
                        return a().createElement(r.Button, {
                            key: n,
                            text: n,
                            href: i,
                            variant: d,
                            size: "large",
                            attributes: {
                                "aria-label": l,
                                "data-testid": "context-modal-content-cta"
                            },
                            preventDefault: !1,
                            onClick: s ? () => s({
                                closeContextSheet: t
                            }) : void 0
                        })
                    })))
                },
                c = e => {
                    let {
                        contentItems: n,
                        buttons: t,
                        onCloseAction: i
                    } = e;
                    return a().createElement(r.Stack, {
                        className: l,
                        direction: "column",
                        alignItems: "start",
                        justifyContent: "start"
                    }, n.map(((e, n) => "list" === e.type ? a().createElement(r.List, {
                        key: n,
                        attributes: {
                            "data-testid": "context-modal-content-list"
                        },
                        variant: "unordered",
                        rowSpacing: "small",
                        className: s
                    }, e.items.map((e => a().createElement(r.Text, {
                        key: e.text
                    }, e.text)))) : a().createElement(r.Text, {
                        variant: "body_1",
                        key: n
                    }, e.text))), t && a().createElement(o, {
                        buttons: t,
                        onCloseAction: i
                    }))
                }
        },
        "633e4f6b": (e, n, t) => {
            "use strict";
            t.d(n, {
                I: () => o,
                o: () => c
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("6222292b");
            const d = "f99d7a7917",
                l = "c0b9eeea35",
                s = "ea2234fd67",
                o = e => {
                    let {
                        footerCTAs: n
                    } = e;
                    return n.map((e => {
                        let {
                            icon: n,
                            text: t,
                            href: i,
                            onClick: d,
                            attributes: o
                        } = e;
                        return a().createElement(r.Actionable, {
                            key: i ? ? t,
                            onClick: d,
                            href: i,
                            attributes: o
                        }, a().createElement(r.Stack, {
                            direction: "row",
                            alignItems: "center",
                            wrap: "nowrap"
                        }, n && a().createElement(r.Icon, {
                            svg: n,
                            color: "action",
                            size: "small",
                            className: l,
                            attributes: {
                                "data-testid": "footerIconTestId"
                            }
                        }), a().createElement(r.Text, {
                            variant: "emphasized_2",
                            color: "neutral",
                            className: s
                        }, t)))
                    }))
                },
                c = e => {
                    let {
                        children: n
                    } = e;
                    return a().createElement(r.Stack, {
                        direction: "column",
                        className: d
                    }, a().createElement(r.Divider, null), n)
                }
        },
        "2593b143": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => o
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("6222292b"),
                d = t("c44dcb0c");
            const l = "e4248514e8",
                s = "d0077f59f9",
                o = e => {
                    let {
                        price: n,
                        priceText: t,
                        crossedOutPrice: i,
                        priceTextEnd: o,
                        alignItems: c = "end",
                        justifyContent: m = "end",
                        isPriceTextAboveThePrice: u = !1,
                        isCardImprovementsExp: v = !1,
                        isSoldOut: k = !1
                    } = e;
                    const g = a().createElement(a().Fragment, null, t && a().createElement(r.Text, {
                            variant: "small_1",
                            color: "neutral_alt",
                            className: l
                        }, t), a().createElement(r.Stack, {
                            direction: "row",
                            alignItems: "center",
                            gap: v ? 1 : void 0
                        }, i && a().createElement(r.Text, {
                            "data-testid": "webcore-crossedout-price",
                            variant: "body_2",
                            color: "destructive",
                            decoration: "line-through",
                            attributes: {
                                "aria-hidden": !0
                            }
                        }, i), a().createElement(r.Text, {
                            color: "neutral",
                            variant: "strong_1",
                            attributes: {
                                "aria-hidden": !0
                            }
                        }, n), o && a().createElement(r.Text, {
                            variant: "small_1",
                            color: "neutral_alt",
                            className: l
                        }, o)), a().createElement(r.HiddenVisually, null, i ? a().createElement(d.Trans, {
                            tag: "a11y_vm_sr_rt_original_current_price_currency",
                            variables: {
                                original_price_with_currency: i,
                                current_price_with_currency: n
                            },
                            num_exception: 0
                        }) : a().createElement(d.Trans, {
                            tag: "a11y_vm_sr_rt_generic_price_currency",
                            variables: {
                                generic_price_with_currency: n
                            }
                        }))),
                        p = a().createElement(a().Fragment, null, t && a().createElement(r.Text, {
                            variant: "emphasized_2",
                            color: "destructive",
                            className: l
                        }, t));
                    return a().createElement(r.Stack, {
                        gap: 1,
                        direction: "row",
                        alignItems: v ? "center" : c,
                        justifyContent: m
                    }, !n && k ? a().createElement(r.Stack, {
                        direction: "column",
                        justifyContent: "center",
                        alignItems: "end",
                        gap: 0,
                        className: s
                    }, p) : n && u ? a().createElement(r.Stack, {
                        direction: "column",
                        justifyContent: "center",
                        alignItems: "end",
                        gap: 0,
                        className: s
                    }, g) : n ? g : null)
                }
        },
        "7a54d755": (e, n, t) => {
            "use strict";
            t.d(n, {
                Cn: () => o.C,
                ZP: () => c
            });
            var i = t("3d054e81"),
                a = t("ead71eb0"),
                r = t.n(a),
                d = t("235c3452"),
                l = t("d81ed3ea");
            const s = e => {
                var n;
                let {
                    heading: t,
                    subHeading: a,
                    containerClassName: s,
                    isMdot: o,
                    titleSize: c,
                    lastTileButtonLink: m,
                    showSkeletonTitle: u = !0,
                    ...v
                } = e;
                return null !== (n = v.items) && void 0 !== n && n.length || v.isLoading ? r().createElement("div", {
                    className: s,
                    "data-testid": v.testId
                }, r().createElement(d.Z, (0, i.Z)({}, v, {
                    lastTileButtonLink: m,
                    title: !!t && r().createElement(l.Z, {
                        heading: t,
                        subHeading: a,
                        isMdot: o,
                        titleSize: c
                    }),
                    heading: t,
                    showSkeletonTitle: u
                }))) : null
            };
            var o = t("9f43804b");
            const c = s
        },
        e908bbd3: (e, n, t) => {
            "use strict";
            t.d(n, {
                o: () => kn,
                Z: () => gn
            });
            var i = t("3d054e81"),
                a = t("ead71eb0"),
                r = t.n(a),
                d = t("9a67ad93"),
                l = t("6222292b"),
                s = t("74702481"),
                o = t("337dc83a"),
                c = t("c44dcb0c");
            const m = "ffdbf717ce",
                u = "a00905ea00",
                v = "b74e963701",
                k = "e1a9578e73",
                g = "ae9940ea75",
                p = "b6dab3c49c",
                _ = "cc72cf75cf",
                S = e => {
                    const {
                        onClick: n,
                        shouldHide: t = !1,
                        shouldDisable: i = !1
                    } = e, a = (0, c.useI18n)();
                    return t ? null : r().createElement(r().Fragment, null, r().createElement(l.Divider, null), r().createElement(l.Actionable, {
                        onClick: e => {
                            e.preventDefault(), e.stopPropagation(), n()
                        },
                        className: m,
                        attributes: {
                            "data-testid": "similar-properties-cta"
                        }
                    }, r().createElement(l.Stack, {
                        direction: "row",
                        alignItems: "center",
                        wrap: "nowrap"
                    }, r().createElement(l.Stack.Item, {
                        className: v
                    }, r().createElement(l.Icon, {
                        svg: o.default,
                        size: "small",
                        className: i ? g : k
                    })), r().createElement(l.Stack.Item, {
                        className: p
                    }, r().createElement(l.Text, {
                        variant: "emphasized_2",
                        className: i ? _ : u,
                        color: i ? "disabled" : "neutral"
                    }, a.trans((0, c.t)("webcore_similarity_widget_hc_cta")))))))
                };
            const h = t("72bf8c83").Z;
            let N = function(e) {
                return e.DEFAULT = "DEFAULT", e.VMF = "VMF", e
            }({});
            const E = e => {
                    var n;
                    let {
                        variant: t,
                        text: i,
                        ariaLabel: d,
                        popupContentTitle: s,
                        popupContentDetails: o,
                        isBadgeAlternative: c
                    } = e;
                    const m = (0, a.useRef)("undefined" !== typeof document ? null === (n = document) || void 0 === n || null === (n = n.getElementsByTagName("body")) || void 0 === n ? void 0 : n[0] : null),
                        u = r().createElement(l.Badge, {
                            ariaLabel: d,
                            variant: t,
                            text: i,
                            key: String(i),
                            alternative: c
                        });
                    return s || o ? r().createElement(l.Popover, {
                        triggerType: "hover",
                        containerRef: m
                    }, r().createElement(l.Popover.Trigger, null, (e => r().createElement(l.Badge, {
                        ariaLabel: d,
                        variant: t,
                        text: i,
                        key: String(i),
                        alternative: c,
                        attributes: e
                    }))), r().createElement(l.Popover.Content, null, s ? r().createElement(l.Text, {
                        variant: "emphasized_2",
                        mixin: {
                            marginBlockEnd: 1
                        }
                    }, s) : null, o ? r().createElement(l.Text, {
                        variant: "small_1"
                    }, o) : null)) : u
                },
                f = e => `webcore-card-badges-stack:${e}`,
                C = e => {
                    let {
                        badges: n,
                        badgeName: t,
                        isBadgeAlternative: a,
                        alignSelfEnd: d
                    } = e;
                    return n ? r().createElement(l.Stack, {
                        attributes: {
                            "data-testid": f(t)
                        },
                        direction: "row",
                        gap: 1,
                        alignSelf: d ? "end" : void 0
                    }, n.map((e => r().createElement(E, (0, i.Z)({}, e, {
                        isBadgeAlternative: a,
                        key: `${t}-${e.text}`
                    }))))) : null
                };
            var T = t("2593b143");
            const I = e => {
                let {
                    price: n,
                    priceSubtext: t,
                    isCardImprovementsExp: i,
                    isSoldOut: a
                } = e;
                return n ? r().createElement(r().Fragment, null, r().createElement(T.Z, {
                    price: n.formattedPrice,
                    priceText: n.priceText,
                    crossedOutPrice: n.formattedCrossedOutPrice,
                    priceTextEnd: n.priceTextEnd,
                    isPriceTextAboveThePrice: n.isPriceTextAboveThePrice,
                    isCardImprovementsExp: i,
                    isSoldOut: a
                }), t && r().createElement(l.Text, {
                    variant: "small_1",
                    align: "end",
                    color: "neutral_alt"
                }, t)) : null
            };
            var R = t("8521b397"),
                b = t.n(R),
                F = t("0c68dce6"),
                y = t("77a90307");
            const P = function(e) {
                const n = e.additionalClasses || [],
                    t = e.textVariant || "headline_3";
                return r().createElement(l.Text, {
                    variant: t,
                    className: b()(...n),
                    tagName: "span",
                    attributes: {
                        "data-testid": "price-and-discounted-price",
                        "aria-hidden": !0,
                        onMouseEnter: () => {
                            var n;
                            null !== (n = e.onHoverTracking) && void 0 !== n && n.finalPrice && e.onHoverTracking.finalPrice()
                        },
                        ...e.attributes
                    }
                }, e.useRounding ? e.priceBreakdown.headlinePrice.userAmount.formattedRoundedAmount : e.priceBreakdown.headlinePrice.userAmount.formattedAmount)
            };
            let A = function(e) {
                    return e.SR_PROPERTY_CARD = "SR_PROPERTY_CARD", e.SR_PROPERTY_CARD_MDOT = "SR_PROPERTY_CARD_MDOT", e.SR_PROPERTY_CARD_MDOT_MAPS = "SR_PROPERTY_CARD_MDOT_MAPS", e.SR_PROPERTY_CARD_NIGHTLY_PRICE = "SR_PROPERTY_CARD_NIGHTLY_PRICE", e.SR_PROPERTY_CARD_NIGHTLY_PRICE_DOMINANT = "SR_PROPERTY_CARD_NIGHTLY_PRICE_DOMINANT", e.SR_PROPERTY_CARD_NIGHTLY_PRICE_MDOT = "SR_PROPERTY_CARD_NIGHTLY_PRICE_MDOT", e.SR_PROPERTY_CARD_NIGHTLY_PRICE_DOMINANT_MDOT = "SR_PROPERTY_CARD_NIGHTLY_PRICE_DOMINANT_MDOT", e.SR_PROPERTY_CARD_NIGHTLY_PRICE_MDOT_MAPS = "SR_PROPERTY_CARD_NIGHTLY_PRICE_MDOT_MAPS", e.SR_PROPERTY_CARD_NIGHTLY_PRICE_DOMINANT_MDOT_MAPS = "SR_PROPERTY_CARD_NIGHTLY_PRICE_DOMINANT_MDOT_MAPS", e.HP_RT_DESKTOP = "HP_RT_DESKTOP", e.HP_RT_SUMMARY_DESKTOP = "HP_RT_SUMMARY_DESKTOP", e.HP_RT_SUMMARY_SELECTION_MDOT = "HP_RT_SUMMARY_SELECTION_MDOT", e.HP_RT_MDOT = "HP_RT_MDOT", e.HP_RT_DETAILED_MDOT = "HP_RT_DETAILED_MDOT", e.HP_RT_DETAILED_NIGHTLY_PRICE_MDOT = "HP_RT_DETAILED_NIGHTLY_PRICE_MDOT", e.HP_RT_HORIZONTAL_SELECTION_SUMMARY_MDOT = "HP_RT_HORIZONTAL_SELECTION_SUMMARY_MDOT", e.HP_RT_HORIZONTAL_SELECTION_SUMMARY_NIGHTLY_PRICE_MDOT = "HP_RT_HORIZONTAL_SELECTION_SUMMARY_NIGHTLY_PRICE_MDOT", e.HP_RT_MDOT_MICROFUNNEL = "HP_RT_MDOT_MICROFUNNEL", e.HP_MAP_MAIN_VIEW_DESKTOP = "HP_MAP_MAIN_VIEW_DESKTOP", e.HP_MAP_MAIN_VIEW_NIGHTLY_PRICE_DESKTOP = "HP_MAP_MAIN_VIEW_NIGHTLY_PRICE_DESKTOP", e.HP_MAP_MAIN_VIEW_NIGHTLY_PRICE_DOMINANT_DESKTOP = "HP_MAP_MAIN_VIEW_NIGHTLY_PRICE_DOMINANT_DESKTOP", e.HP_MAP_MINI_VIEW_DESKTOP = "HP_MAP_MINI_VIEW_DESKTOP", e.HP_MAP_MINI_VIEW_NIGHTLY_PRICE_DESKTOP = "HP_MAP_MINI_VIEW_NIGHTLY_PRICE_DESKTOP", e.HP_MAP_MINI_VIEW_NIGHTLY_PRICE_DOMINANT_DESKTOP = "HP_MAP_MINI_VIEW_NIGHTLY_PRICE_DOMINANT_DESKTOP", e.HP_MAP_PIN_VIEW_DESKTOP = "HP_MAP_PIN_VIEW_DESKTOP", e.HP_MAP_PIN_VIEW_NIGHTLY_PRICE_DESKTOP = "HP_MAP_PIN_VIEW_NIGHTLY_PRICE_DESKTOP", e.HP_MAP_PROPERTY_VIEW_MDOT = "HP_MAP_PROPERTY_VIEW_MDOT", e.HP_MAP_PROPERTY_VIEW_NIGHTLY_PRICE_MDOT = "HP_MAP_PROPERTY_VIEW_NIGHTLY_PRICE_MDOT", e.HP_MAP_PROPERTY_VIEW_NIGHTLY_PRICE_DOMINANT_MDOT = "HP_MAP_PROPERTY_VIEW_NIGHTLY_PRICE_DOMINANT_MDOT", e.HP_MAP_PIN_VIEW_MDOT = "HP_MAP_PIN_VIEW_MDOT", e.HP_MAP_PIN_VIEW_NIGHTLY_PRICE_MDOT = "HP_MAP_PIN_VIEW_NIGHTLY_PRICE_MDOT", e.WEBCORE_PROPERTY_CARD_DESKTOP = "WEBCORE_PROPERTY_CARD_DESKTOP", e
                }({}),
                O = function(e) {
                    return e[e.UNKNOWN = 0] = "UNKNOWN", e[e.BADGE = 1] = "BADGE", e[e.CONSTRUCTIVE_TEXT = 2] = "CONSTRUCTIVE_TEXT", e[e.DESTRUCTIVE_TEXT = 3] = "DESTRUCTIVE_TEXT", e
                }({}),
                w = function(e) {
                    return e.DISPLAY_PRICE_PER_NIGHT = "use_nightly_prices", e.DISPLAY_DOMINANT_PRICE_PER_NIGHT = "use_nightly_as_dominant", e.USE_JS_TRACKING = "use_js_tracking", e.DISPLAY_PRICE_IN_PROPERTY_CURRENCY = "display_price_in_property_currency", e
                }({});
            const M = "cafac92f4a",
                L = "fcc645b25d",
                x = "f2f358d1de",
                B = "d68334ea31",
                D = "b2d4ad7a15",
                H = "ac028fa603",
                V = "ccd2dc984b",
                G = "bcc9679f3b",
                W = "d795ef4144",
                Y = "ab607752a2",
                U = "b326b7423a",
                K = "d58faa3d6a",
                Z = "e5377cce84",
                q = "a2efaf6c2e",
                $ = "f6b355237f",
                z = "e725a11992",
                X = "e6ab5b5b63",
                j = "bf44319e7e",
                Q = "b6aa3f089f",
                J = "d90842265b",
                ee = "a373cdfaea",
                ne = "e01153b159",
                te = "b091ff8d21",
                ie = "be2fd8df4c",
                ae = "da745aa322",
                re = "ac8cb41332",
                de = "ccb42190e8",
                le = "b57789eae3",
                se = "b3559b4a95",
                oe = "bc953715bf",
                ce = "f8f74e6f1f",
                me = "cc5da3f00c",
                ue = "a5bef32ed0",
                ve = "f8864b11cd";
            const ke = function(e) {
                var n, t;
                if (!e.priceBreakdown.absoluteSavings) return null;
                const i = null === (n = e.priceBreakdown.absoluteSavings) || void 0 === n ? void 0 : n.variant,
                    a = null === (t = e.priceBreakdown.absoluteSavings) || void 0 === t ? void 0 : t.percentageValue;
                return i === O.BADGE ? r().createElement("div", {
                    "data-testid": "absolute-savings-percentage",
                    className: b()(e.additionalClasses, de)
                }, r().createElement(l.Badge, {
                    text: r().createElement(c.Trans, {
                        tag: "vm_single_savings_badge_name_pd",
                        variables: {
                            num_percent: a
                        },
                        num_exception: a
                    }),
                    variant: "constructive"
                })) : r().createElement(l.Text, {
                    variant: e.isMDot ? "emphasized_1" : "small_1",
                    color: i === O.CONSTRUCTIVE_TEXT ? "constructive" : "destructive",
                    attributes: {
                        "data-testid": "absolute-savings-percentage"
                    },
                    className: b()(e.additionalClasses, e.isMDot ? re : de)
                }, r().createElement(c.Trans, {
                    tag: "vm_single_savings_badge_name_pd",
                    variables: {
                        num_percent: a
                    },
                    num_exception: a
                }))
            };
            const ge = function(e) {
                return r().createElement(l.HiddenVisually, null, e.priceBreakdown.strikethroughPrice ? r().createElement(c.Trans, {
                    tag: "a11y_vm_sr_rt_original_current_price_currency",
                    variables: {
                        original_price_with_currency: e.useRounding ? e.priceBreakdown.strikethroughPrice.userAmount.formattedRoundedAmount : e.priceBreakdown.strikethroughPrice.userAmount.formattedAmount,
                        current_price_with_currency: e.useRounding ? e.priceBreakdown.headlinePrice.userAmount.formattedRoundedAmount : e.priceBreakdown.headlinePrice.userAmount.formattedAmount
                    },
                    num_exception: e.priceBreakdown.headlinePrice.userAmount.rawAmount
                }) : r().createElement(c.Trans, {
                    tag: "a11y_vm_sr_rt_generic_price_currency",
                    variables: {
                        generic_price_with_currency: e.useRounding ? e.priceBreakdown.headlinePrice.userAmount.formattedRoundedAmount : e.priceBreakdown.headlinePrice.userAmount.formattedAmount
                    }
                }))
            };
            let pe = function(e) {
                return e.TOTAL_PRICE_TEXT = "total_text", e.TOOLTIP_TOTAL_PRICE_TEXT = "tooltip_total_text", e.TOOLTIP_FOOTNOTE_TEXTS = "tooltip_footnote_text", e.PER_NIGHT_TEXT_PREFIX = "per_night_amount_prefix", e.PER_NIGHT_TEXT_SUFFIX = "amount_per_night_suffix", e
            }({});
            const _e = class {
                constructor(e) {
                    this.allDiscounts = e.allDiscounts, this.charges = e.charges, this.rewards = e.rewards, this.rewardsRaw = e.rewardsRaw, this.badges = e.badges, this.netPrice = e.netPrice, this.strikethroughPrice = e.strikethroughPrice, this.headlinePrice = e.headlinePrice, this.prediscountedPricePerNight = e.prediscountedPricePerNight, this.averagePricePerNight = e.averagePricePerNight, this.taxExceptions = e.taxExceptions, this.totalPrice = e.totalPrice, this.textBenefits = e.textBenefits, this.priceNotes = e.priceNotes, this.chargesInfo = e.chargesInfo, this.stayLevelBreakdown = e.stayLevelBreakdown, this.priceDebug = e.priceDebug, this.absoluteSavings = e.absoluteSavings, this.beTranslations = e.beTranslations, this.priceDisplayConfig = e.priceDisplayConfig
                }
                getConfigByKey(e) {
                    var n;
                    const t = null === (n = this.priceDisplayConfig) || void 0 === n || null === (n = n.find((n => n.key === e))) || void 0 === n ? void 0 : n.value;
                    if (void 0 !== t) return "true" === t || "false" === t ? "true" === t : isNaN(+t) ? t : +t
                }
                getTranslationsByKey(e) {
                    var n;
                    return null === (n = this.beTranslations) || void 0 === n || null === (n = n.find((n => n.key === e))) || void 0 === n ? void 0 : n.value
                }
                getFirstTranslationByKey(e) {
                    var n;
                    return null === (n = this.beTranslations) || void 0 === n || null === (n = n.find((n => n.key === e))) || void 0 === n ? void 0 : n.value[0]
                }
            };
            const Se = function(e) {
                var n;
                if (!(null !== e.priceBreakdown.strikethroughPrice) || !e.priceBreakdown.allDiscounts.length) return null;
                const t = new _e(e.priceBreakdown),
                    i = "discountsGrid-",
                    a = r().createElement(l.Grid, {
                        key: "priceBeforeDiscountGrid",
                        className: ie
                    }, r().createElement(l.Grid.Column, {
                        key: "priceBeforeDiscountGridName",
                        size: 8
                    }, r().createElement(l.Text, {
                        variant: "body_2",
                        align: "start"
                    }, e.priceBreakdown.strikethroughPrice.name)), r().createElement(l.Grid.Column, {
                        key: "priceBeforeDiscountGridValue",
                        size: 4
                    }, r().createElement(l.Text, {
                        variant: "body_2",
                        align: "end"
                    }, e.priceBreakdown.strikethroughPrice.userAmount.formattedAmount))),
                    d = e.priceBreakdown.allDiscounts.map((e => r().createElement(r().Fragment, {
                        key: i + e.copy
                    }, r().createElement(l.Grid, {
                        className: ie
                    }, r().createElement(l.Grid.Column, {
                        key: i + e.copy + "-name",
                        size: 8
                    }, r().createElement(l.Text, {
                        variant: "body_2",
                        align: "start"
                    }, e.copy)), r().createElement(l.Grid.Column, {
                        key: i + e.copy + "-value",
                        size: 4
                    }, r().createElement(l.Text, {
                        variant: "body_2",
                        align: "end",
                        className: $
                    }, "-\xa0", e.userAmount.formattedAmount))), e.copyAlt ? r().createElement(l.Text, {
                        key: i + e.copy + "-description",
                        className: ae,
                        variant: "small_1",
                        align: "start",
                        color: "neutral_alt"
                    }, e.copyAlt) : null))),
                    s = r().createElement(l.Divider, {
                        key: "horizontalLine-subtotal",
                        className: ie
                    }),
                    o = r().createElement(r().Fragment, {
                        key: "subtotalPriceGridWrapper"
                    }, r().createElement(l.Grid, {
                        key: "subtotalPriceGrid",
                        className: ie
                    }, r().createElement(l.Grid.Column, {
                        key: "subtotalPriceGridName",
                        size: 8
                    }, r().createElement(l.Text, {
                        variant: "strong_2",
                        align: "start"
                    }, t.getFirstTranslationByKey(pe.TOOLTIP_TOTAL_PRICE_TEXT) ? ? e.priceBreakdown.headlinePrice.name)), r().createElement(l.Grid.Column, {
                        key: "subtotalPriceGridValue",
                        size: 4
                    }, r().createElement(l.Text, {
                        variant: "strong_2",
                        align: "end"
                    }, e.priceBreakdown.headlinePrice.userAmount.formattedAmount))), t.getConfigByKey(w.DISPLAY_PRICE_PER_NIGHT) && e.priceBreakdown.chargesInfo ? r().createElement(l.Text, {
                        className: ae,
                        variant: "small_1",
                        align: "end",
                        color: "neutral_alt"
                    }, e.priceBreakdown.chargesInfo) : null);
                let c = null;
                return t.getConfigByKey(w.DISPLAY_PRICE_PER_NIGHT) && null !== (n = t.getTranslationsByKey(pe.TOOLTIP_FOOTNOTE_TEXTS)) && void 0 !== n && n.length && (c = r().createElement(r().Fragment, {
                    key: "popup-footnotes"
                }, r().createElement(l.Divider, {
                    key: "horizontalLine-footnotes",
                    className: ie
                }), t.getTranslationsByKey(pe.TOOLTIP_FOOTNOTE_TEXTS).map((e => r().createElement("div", {
                    key: e
                }, r().createElement(l.Text, {
                    variant: "small_1",
                    align: "start",
                    color: "neutral_alt"
                }, e)))))), r().createElement(r().Fragment, null, a, d, s, o, c)
            };
            const he = function(e) {
                var n;
                if (null == e.priceSearchConfig) return null;
                const t = e.additionalClasses || [],
                    i = Number(e.priceSearchConfig.numAdults) || 2,
                    a = Number(e.priceSearchConfig.numChildren) || 0,
                    d = Number(e.priceSearchConfig.numNights) || 1,
                    s = e.priceSearchConfig.isGroupSearch || !1,
                    o = (null === (n = e.priceSearchConfig) || void 0 === n ? void 0 : n.showWeeksInsteadOfNights) || !1,
                    m = "price-for-x-nights";
                let u, v = !o && e.isMDot || d % 7 !== 0 ? r().createElement(c.Trans, {
                        tag: "prd_sr_card_nights_above_price",
                        variables: {
                            n_of_nights: d
                        },
                        num_exception: d,
                        key: "num_nights_copy"
                    }) : r().createElement(c.Trans, {
                        tag: "bh_prd_sr_card_weeks_above_price",
                        variables: {
                            num_weeks: d / 7
                        },
                        num_exception: d / 7,
                        key: "num_weeks_copy"
                    }),
                    k = e.isMDot ? r().createElement(c.Trans, {
                        tag: "m_prd_sr_card_adults_above_price",
                        variables: {
                            n_of_adults: i
                        },
                        num_exception: i,
                        key: "num_adults_copy"
                    }) : r().createElement(c.Trans, {
                        tag: "prd_sr_card_adults_above_price",
                        variables: {
                            n_of_adults: i
                        },
                        num_exception: i,
                        key: "num_adults_copy"
                    });
                if (e.isMDot && (v = r().createElement("b", null, v), k = r().createElement("b", null, k)), a > 0 && (u = r().createElement(c.Trans, {
                        tag: "prd_sr_card_children_above_price",
                        variables: {
                            n_of_children: a
                        },
                        num_exception: a
                    }), e.isMDot && (u = r().createElement("b", null, u))), e.isMDot && s && a > 0) return r().createElement(l.Text, {
                    className: b()(...t),
                    variant: "small_1",
                    attributes: {
                        "data-testid": m
                    }
                }, r().createElement(c.Trans, {
                    tag: "m_prd_sr_card_nights_adults_children_nights_parent",
                    variables: {
                        m_prd_sr_card_nights_above_price: "<0/>",
                        m_prd_sr_card_adults_above_price: "<1/>",
                        m_prd_sr_card_children_above_price: "<2/>"
                    },
                    components: [v, k, u]
                }));
                if (e.isMDot && s) return r().createElement(l.Text, {
                    className: b()(...t),
                    variant: "small_1",
                    attributes: {
                        "data-testid": m
                    }
                }, r().createElement(c.Trans, {
                    tag: "m_prd_sr_card_nights_adults_parent",
                    variables: {
                        m_prd_sr_card_nights_above_price: "<0/>",
                        m_prd_sr_card_adults_above_price: "<1/>"
                    },
                    components: [v, k]
                }));
                if (e.isMDot && d > 1) {
                    const e = o && d % 7 === 0;
                    return r().createElement(l.Text, {
                        className: b()(...t),
                        variant: "small_1",
                        attributes: {
                            "data-testid": m
                        }
                    }, e ? r().createElement(c.Trans, {
                        tag: "m_sr_hp_price_for_x_weeks_bold",
                        variables: {
                            start_bold: "<0>",
                            end_bold: "</0>",
                            num_weeks: d / 7
                        },
                        num_exception: d / 7,
                        components: [r().createElement("b", {
                            key: "b"
                        })]
                    }) : r().createElement(c.Trans, {
                        tag: "m_sr_hp_price_for_x_nights_bold",
                        variables: {
                            start_bold: "<0>",
                            end_bold: "</0>",
                            num_nights: d
                        },
                        num_exception: d,
                        components: [r().createElement("b", {
                            key: "b"
                        })]
                    }))
                }
                return e.isMDot ? null : a > 0 ? r().createElement(l.Text, {
                    className: b()(...t),
                    variant: "small_1",
                    color: "neutral_alt",
                    attributes: {
                        "data-testid": m
                    }
                }, r().createElement(c.Trans, {
                    tag: "prd_sr_card_nights_adults_children_parent",
                    variables: {
                        prd_sr_card_nights_above_price: "<0/>",
                        prd_sr_card_adults_above_price: "<1/>",
                        prd_sr_card_children_above_price: "<2/>"
                    },
                    components: [v, k, u]
                })) : r().createElement(l.Text, {
                    className: b()(...t),
                    variant: "small_1",
                    color: "neutral_alt",
                    attributes: {
                        "data-testid": m
                    }
                }, r().createElement(c.Trans, {
                    tag: "prd_sr_card_nights_adults_parent",
                    variables: {
                        prd_sr_card_nights_above_price: "<0/>",
                        prd_sr_card_adults_above_price: "<1/>"
                    },
                    components: [v, k]
                }))
            };
            const Ne = function(e) {
                const n = e.additionalClasses || [];
                return null === e.priceBreakdown.strikethroughPrice ? null : e.isMDot ? r().createElement(l.Text, {
                    variant: e.textVariant || "emphasized_1",
                    className: b()(G, ...n),
                    tagName: "span",
                    attributes: {
                        "aria-hidden": !0,
                        ...e.attributes
                    }
                }, e.useRounding ? e.priceBreakdown.strikethroughPrice.userAmount.formattedRoundedAmount : e.priceBreakdown.strikethroughPrice.userAmount.formattedAmount) : r().createElement(l.Text, {
                    variant: e.textVariant || "small_1",
                    className: b()(B, ...n),
                    tagName: "span",
                    attributes: {
                        "aria-hidden": !0,
                        onMouseEnter: () => {
                            var n;
                            null !== (n = e.onHoverTracking) && void 0 !== n && n.strikethroughPrice && e.onHoverTracking.strikethroughPrice()
                        },
                        ...e.attributes
                    }
                }, e.useRounding ? e.priceBreakdown.strikethroughPrice.userAmount.formattedRoundedAmount : e.priceBreakdown.strikethroughPrice.userAmount.formattedAmount)
            };
            const Ee = function(e) {
                    if ("" === e.priceBreakdown.chargesInfo) return null;
                    const n = e.additionalClasses || [];
                    return r().createElement(l.Text, {
                        className: b()(...n),
                        variant: "small_1",
                        color: "neutral_alt",
                        attributes: {
                            "data-testid": "taxes-and-charges"
                        }
                    }, e.priceBreakdown.chargesInfo)
                },
                fe = e => {
                    var n;
                    const t = null !== e.priceBreakdown.strikethroughPrice,
                        a = void 0 === e.displayBreakdown || e.displayBreakdown,
                        d = null === e || void 0 === e || null === (n = e.priceBreakdown) || void 0 === n ? void 0 : n.absoluteSavings;
                    let s;
                    const o = {
                        tabIndex: 0
                    };
                    return s = a && t && e.priceBreakdown.allDiscounts.length ? r().createElement(l.Popover, {
                        triggerType: "hover",
                        size: "auto",
                        containerRef: (0, y.sk)() ? void 0 : {
                            current: document.body
                        },
                        onOpen: () => {
                            e.onStrikethroughPriceMouseOver && e.onStrikethroughPriceMouseOver()
                        }
                    }, r().createElement(l.Popover.Trigger, null, (n => r().createElement("div", (0, i.Z)({}, n, o), r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement("div", {
                        className: b()([Y, $])
                    }, r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [x, Y]
                    }), r().createElement(l.Icon, {
                        className: j,
                        svg: F.default,
                        size: "small",
                        color: "neutral_alt"
                    })), d ? r().createElement(ke, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        additionalClasses: [Y]
                    }) : null))), r().createElement(l.Popover.Content, null, r().createElement("div", {
                        onClick: e => e.stopPropagation(),
                        className: W
                    }, r().createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    })))) : r().createElement(r().Fragment, null, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [x, Y],
                        onHoverTracking: {
                            finalPrice: e.onFinalPriceMouseOver
                        }
                    })), r().createElement("div", {
                        className: b()(M),
                        "data-testid": "availability-rate-information"
                    }, r().createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig
                    }), s, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }))
                };
            const Ce = function(e) {
                    var n;
                    if (!e.priceBreakdown.averagePricePerNight) return null;
                    const t = new _e(e.priceBreakdown),
                        i = void 0 === e.usePrefix || e.usePrefix,
                        a = e.additionalClasses || [],
                        d = e.textVariant || "headline_3";
                    let s = null,
                        o = null;
                    return !e.priceOnly && i ? s = r().createElement(l.Text, {
                        variant: "small_1",
                        color: e.additionalTextColor,
                        className: b()(Y, z)
                    }, t.getFirstTranslationByKey(pe.PER_NIGHT_TEXT_PREFIX) || "") : e.priceOnly || (o = r().createElement(l.Text, {
                        variant: "small_1",
                        color: e.additionalTextColor,
                        className: b()(Y, X)
                    }, t.getFirstTranslationByKey(pe.PER_NIGHT_TEXT_SUFFIX) || "")), r().createElement(r().Fragment, null, s, r().createElement(l.Text, {
                        variant: d,
                        color: e.textColor,
                        className: b()(...a),
                        tagName: "span",
                        attributes: {
                            "data-testid": "price-and-discounted-price",
                            "aria-hidden": !0,
                            ...e.attributes
                        }
                    }, null === (n = e.priceBreakdown.averagePricePerNight) || void 0 === n ? void 0 : n.userAmount.formattedRoundedAmount), o)
                },
                Te = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        r = void 0 === e.displayBreakdown || e.displayBreakdown;
                    let d;
                    const s = {
                            tabIndex: 0
                        },
                        o = a.createElement("div", null, a.createElement(Ce, {
                            usePrefix: !1,
                            priceBreakdown: e.priceBreakdown
                        }));
                    let c = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), c = a.createElement(l.Text, {
                            variant: "small_1",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    return d = r && t && e.priceBreakdown.allDiscounts.length ? a.createElement(l.Popover, {
                        triggerType: "hover",
                        containerRef: (0, y.sk)() ? void 0 : {
                            current: document.body
                        },
                        onOpen: () => {
                            e.onStrikethroughPriceMouseOver && e.onStrikethroughPriceMouseOver()
                        }
                    }, a.createElement(l.Popover.Trigger, null, (n => a.createElement("div", (0, i.Z)({}, n, s), c, a.createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), a.createElement("div", {
                        className: b()([Y, $])
                    }, a.createElement(P, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), a.createElement(l.Icon, {
                        className: Q,
                        svg: F.default,
                        size: "smallest",
                        color: "neutral_alt"
                    }))))), a.createElement(l.Popover.Content, null, a.createElement("div", {
                        onClick: e => e.stopPropagation()
                    }, a.createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    })))) : a.createElement(a.Fragment, null, c, a.createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), a.createElement(P, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y],
                        onHoverTracking: {
                            finalPrice: e.onFinalPriceMouseOver
                        }
                    })), a.createElement("div", {
                        className: b()(M),
                        "data-testid": "availability-rate-information"
                    }, o, d, a.createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), a.createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig
                    }))
                },
                Ie = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        a = void 0 === e.displayBreakdown || e.displayBreakdown;
                    let d;
                    const s = {
                            tabIndex: 0
                        },
                        o = r().createElement("div", null, r().createElement(Ce, {
                            usePrefix: !1,
                            priceBreakdown: e.priceBreakdown,
                            textVariant: "small_1"
                        }));
                    let c = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), c = r().createElement(l.Text, {
                            variant: "small_1",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    return d = a && t && e.priceBreakdown.allDiscounts.length ? r().createElement(l.Popover, {
                        triggerType: "hover",
                        containerRef: (0, y.sk)() ? void 0 : {
                            current: document.body
                        },
                        onOpen: () => {
                            e.onStrikethroughPriceMouseOver && e.onStrikethroughPriceMouseOver()
                        }
                    }, r().createElement(l.Popover.Trigger, null, (n => r().createElement("div", (0, i.Z)({}, n, s), c, r().createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement("div", {
                        className: b()([Y, $])
                    }, r().createElement(P, {
                        textVariant: "headline_3",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(l.Icon, {
                        className: Q,
                        svg: F.default,
                        size: "smallest",
                        color: "neutral_alt"
                    }))))), r().createElement(l.Popover.Content, null, r().createElement("div", {
                        onClick: e => e.stopPropagation()
                    }, r().createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    })))) : r().createElement(r().Fragment, null, c, r().createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        textVariant: "headline_3",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y],
                        onHoverTracking: {
                            finalPrice: e.onFinalPriceMouseOver
                        }
                    })), r().createElement("div", {
                        className: b()(M),
                        "data-testid": "availability-rate-information"
                    }, o, d, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig
                    }))
                },
                Re = e => r().createElement("div", {
                    className: b()(M, L),
                    "data-testid": "availability-rate-information"
                }, r().createElement(Ne, {
                    priceBreakdown: e.priceBreakdown,
                    isMDot: !1,
                    useRounding: !0,
                    additionalClasses: [Y]
                }), r().createElement(P, {
                    priceBreakdown: e.priceBreakdown,
                    useRounding: !0,
                    additionalClasses: [x, Y],
                    onHoverTracking: {
                        finalPrice: e.onFinalPriceMouseOver
                    }
                }), r().createElement(ge, {
                    priceBreakdown: e.priceBreakdown,
                    useRounding: !0
                }), r().createElement(Ee, {
                    priceBreakdown: e.priceBreakdown
                })),
                be = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        i = a.createElement("div", null, a.createElement(Ce, {
                            priceBreakdown: e.priceBreakdown
                        }));
                    let r = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), r = a.createElement(l.Text, {
                            variant: "small_1",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    const d = a.createElement(a.Fragment, null, r, a.createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), a.createElement(P, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y],
                        onHoverTracking: {
                            finalPrice: e.onFinalPriceMouseOver
                        }
                    }));
                    return a.createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, i, d, a.createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), a.createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig
                    }))
                },
                Fe = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        i = r().createElement("div", null, r().createElement(Ce, {
                            priceBreakdown: e.priceBreakdown,
                            textVariant: "small_1"
                        }));
                    let a = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), a = r().createElement(l.Text, {
                            variant: "small_1",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    const d = r().createElement(r().Fragment, null, a, r().createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        textVariant: "headline_3",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y],
                        onHoverTracking: {
                            finalPrice: e.onFinalPriceMouseOver
                        }
                    }));
                    return r().createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, i, d, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig
                    }))
                },
                ye = e => r().createElement("div", {
                    className: b()(Y),
                    "data-testid": "availability-rate-information"
                }, r().createElement(P, {
                    priceBreakdown: e.priceBreakdown,
                    useRounding: !0,
                    textVariant: "strong_2",
                    additionalClasses: [Y, ee]
                })),
                Pe = e => r().createElement("div", {
                    className: b()(Y),
                    "data-testid": "availability-rate-information"
                }, r().createElement(P, {
                    priceBreakdown: e.priceBreakdown,
                    useRounding: !0,
                    textVariant: "emphasized_2",
                    additionalClasses: [Y, ne]
                })),
                Ae = e => r().createElement("div", {
                    className: b()(Y),
                    "data-testid": "availability-rate-information"
                }, r().createElement(P, {
                    priceBreakdown: e.priceBreakdown,
                    useRounding: !0,
                    textVariant: "strong_2",
                    additionalClasses: [Y, ee]
                })),
                Oe = e => r().createElement("div", {
                    className: b()(Y),
                    "data-testid": "availability-rate-information"
                }, r().createElement(P, {
                    priceBreakdown: e.priceBreakdown,
                    useRounding: !0,
                    textVariant: "strong_2",
                    additionalClasses: [Y, ee]
                })),
                we = e => {
                    const n = [];
                    return null !== e.priceBreakdown.strikethroughPrice || n.push(Y), r().createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, r().createElement(he, {
                        isMDot: !0,
                        priceSearchConfig: e.priceSearchConfig,
                        additionalClasses: n
                    }), r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [D, Y]
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [V, Y]
                    }), r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }))
                },
                Me = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        i = r().createElement("div", null, r().createElement(Ce, {
                            priceBreakdown: e.priceBreakdown
                        }));
                    let a = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), a = r().createElement(l.Text, {
                            variant: "small_1",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    const d = r().createElement(r().Fragment, null, a, r().createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }));
                    return r().createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, i, d, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement("div", null, r().createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig,
                        additionalClasses: [Y]
                    })))
                },
                Le = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        i = r().createElement("div", null, r().createElement(Ce, {
                            priceBreakdown: e.priceBreakdown,
                            textVariant: "small_1"
                        }));
                    let a = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), a = r().createElement(l.Text, {
                            variant: "small_1",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    const d = r().createElement(r().Fragment, null, a, r().createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        textVariant: "headline_3",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }));
                    return r().createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, i, d, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement("div", null, r().createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig,
                        additionalClasses: [Y]
                    })))
                },
                xe = e => {
                    const n = null !== e.priceBreakdown.strikethroughPrice,
                        t = void 0 === e.displayBreakdown || e.displayBreakdown;
                    let i = r().createElement(r().Fragment, null);
                    const a = {
                            onMouseOver: e.onStrikethroughPriceMouseOver
                        },
                        d = {
                            onMouseOver: e.onFinalPriceMouseOver
                        },
                        s = {
                            onMouseOver: e.onIconMouseOver
                        };
                    return i = t && n ? r().createElement(l.Popover, {
                        triggerType: "hover",
                        size: "auto"
                    }, r().createElement(l.Popover.Trigger, null, (n => r().createElement("div", n, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        additionalClasses: [q],
                        useRounding: !0,
                        attributes: a
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        additionalClasses: [Y],
                        textVariant: "strong_1",
                        useRounding: !0,
                        attributes: d
                    }), r().createElement(l.Icon, {
                        className: J,
                        svg: F.default,
                        size: "smaller",
                        color: "neutral_alt",
                        attributes: s
                    })))), r().createElement(l.Popover.Content, null, r().createElement("div", {
                        className: W,
                        onClick: e => e.stopPropagation()
                    }, r().createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    })))) : r().createElement(r().Fragment, null, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        additionalClasses: [q],
                        useRounding: !0,
                        attributes: a
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        additionalClasses: [Y],
                        textVariant: "strong_1",
                        useRounding: !0,
                        attributes: d
                    })), r().createElement("div", {
                        className: b()(M),
                        "data-testid": "availability-rate-information"
                    }, i, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !1
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }))
                };
            var Be = t("6cc81d04");
            const De = function(e) {
                    if (!e.data.details.length) return null;
                    const n = [];
                    for (const t of e.data.details) n.push(r().createElement(l.Text, {
                        tagName: "p",
                        key: t.name.text,
                        variant: "body_2"
                    }, t.name.text));
                    return r().createElement(r().Fragment, null, r().createElement(l.Stack, {
                        gap: 4,
                        direction: "row"
                    }, r().createElement("div", null, r().createElement(l.Icon, {
                        svg: Be.default,
                        size: "larger",
                        color: "constructive"
                    })), r().createElement(l.Stack.Item, {
                        grow: !0,
                        alignSelf: "center"
                    }, r().createElement(l.Text, {
                        variant: "strong_2",
                        color: "constructive"
                    }, e.data.title.text))), r().createElement(r().Fragment, null, n), r().createElement("p", null))
                },
                He = e => {
                    const [n, t] = (0, a.useState)(!1), {
                        translate: i
                    } = (0, c.useTranslations)(), d = null !== e.priceBreakdown.strikethroughPrice, s = null !== e.priceBreakdown.rewards, o = d && e.displayBreakdown;
                    return r().createElement("div", {
                        className: b()(M, U, K),
                        "data-testid": "availability-rate-information"
                    }, o ? r().createElement("span", {
                        className: Y,
                        onClick: () => {
                            var n;
                            t(!0), null === (n = e.onPriceBlockClick) || void 0 === n || n.call(e)
                        },
                        onKeyDown: () => {
                            var n;
                            t(!0), null === (n = e.onPriceBlockClick) || void 0 === n || n.call(e)
                        },
                        role: "button",
                        tabIndex: 0
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        useRounding: !0,
                        additionalClasses: [Y, z],
                        onHoverTracking: e.onStrikethroughPriceMouseOver ? {
                            strikethroughPrice: e.onStrikethroughPriceMouseOver
                        } : void 0
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [H, Y],
                        onHoverTracking: e.onFinalPriceMouseOver ? {
                            finalPrice: e.onFinalPriceMouseOver
                        } : void 0
                    }), r().createElement(l.Icon, {
                        className: j,
                        svg: F.default,
                        size: "small",
                        color: "neutral_alt",
                        attributes: {
                            onMouseEnter: e.onIconMouseOver
                        }
                    })) : r().createElement("div", {
                        className: Y
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        useRounding: !0,
                        additionalClasses: [Y, z],
                        onHoverTracking: e.onStrikethroughPriceMouseOver ? {
                            strikethroughPrice: e.onStrikethroughPriceMouseOver
                        } : void 0
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [H, Y],
                        onHoverTracking: e.onFinalPriceMouseOver ? {
                            finalPrice: e.onFinalPriceMouseOver
                        } : void 0
                    })), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown,
                        additionalClasses: []
                    }), o && r().createElement(l.SheetContainer, {
                        title: i("sr_pd_breakdown_price_summary"),
                        active: n,
                        onCloseTrigger: () => t(!1),
                        closeAriaLabel: i("a11y_cta_close"),
                        position: "bottom"
                    }, r().createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    }), s && r().createElement(r().Fragment, null, r().createElement(l.Divider, {
                        className: te
                    }), r().createElement(De, {
                        data: e.priceBreakdown.rewards
                    }))), r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }))
                },
                Ve = e => {
                    var n;
                    const [t, i] = (0, a.useState)(!1), {
                        translate: d
                    } = (0, c.useTranslations)(), s = null !== e.priceBreakdown.strikethroughPrice, o = null !== e.priceBreakdown.rewards, m = void 0 === e.displayBreakdown || e.displayBreakdown, u = s && m, v = Number(null === (n = e.priceSearchConfig) || void 0 === n ? void 0 : n.numNights) || 1, k = [];
                    e.isMDot && k.push(K);
                    const g = v % 7 === 0 ? r().createElement(c.Trans, {
                        tag: "bh_prd_sr_card_weeks_above_price",
                        variables: {
                            num_weeks: v / 7
                        },
                        num_exception: v / 7,
                        key: "num_weeks_copy"
                    }) : r().createElement(c.Trans, {
                        tag: "prd_sr_card_nights_above_price",
                        variables: {
                            n_of_nights: v
                        },
                        num_exception: v,
                        key: "num_nights_copy"
                    });
                    return r().createElement("div", {
                        className: b()(M, U, ...k)
                    }, r().createElement("div", null, r().createElement(Ce, {
                        priceBreakdown: e.priceBreakdown,
                        additionalClasses: [Y],
                        textVariant: "small_1"
                    })), r().createElement("div", null, u ? r().createElement("span", {
                        onClick: () => {
                            var n;
                            i(!0), null === (n = e.onPriceBlockClick) || void 0 === n || n.call(e)
                        },
                        onKeyDown: n => {
                            var t;
                            "Enter" !== n.key && " " !== n.key || (n.preventDefault(), i(!0), null === (t = e.onPriceBlockClick) || void 0 === t || t.call(e))
                        },
                        role: "button",
                        tabIndex: 0,
                        className: Y
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: e.isMDot,
                        useRounding: !0,
                        additionalClasses: [Y, z],
                        onHoverTracking: {
                            strikethroughPrice: e.onStrikethroughPriceMouseOver
                        },
                        textVariant: "small_1"
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [H, Y],
                        textVariant: "headline_3"
                    }), r().createElement(l.Icon, {
                        svg: r().createElement(F.default, null),
                        size: "small",
                        color: "neutral_alt",
                        className: j
                    })) : r().createElement("div", {
                        className: Y
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: e.isMDot,
                        useRounding: !0,
                        additionalClasses: [Y, z],
                        onHoverTracking: {
                            strikethroughPrice: e.onStrikethroughPriceMouseOver
                        },
                        textVariant: "small_1"
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [H, Y],
                        textVariant: "headline_3"
                    })), r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    })), r().createElement("div", null, r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown,
                        additionalClasses: [Y]
                    }), "\xa0\u2022\xa0", r().createElement(l.Text, {
                        variant: "small_1",
                        color: "neutral_alt",
                        className: Y
                    }, g)), u && r().createElement(l.SheetContainer, {
                        title: d("sr_pd_breakdown_price_summary"),
                        active: t,
                        onCloseTrigger: () => i(!1),
                        closeAriaLabel: d("a11y_cta_close"),
                        position: "bottom"
                    }, r().createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    }), o && r().createElement(r().Fragment, null, r().createElement(l.Divider, {
                        className: te
                    }), r().createElement(De, {
                        data: e.priceBreakdown.rewards
                    }))))
                },
                Ge = e => {
                    const n = null !== e.priceBreakdown.strikethroughPrice;
                    return r().createElement("div", {
                        className: b()(M),
                        "data-testid": "availability-rate-information"
                    }, r().createElement("div", {
                        className: L
                    }, r().createElement("div", {
                        className: se,
                        "aria-hidden": "true"
                    }, n && r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        useRounding: !0,
                        additionalClasses: [G, z],
                        onHoverTracking: {
                            strikethroughPrice: e.onStrikethroughPriceMouseOver
                        },
                        textVariant: "emphasized_2"
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [],
                        onHoverTracking: {
                            finalPrice: e.onFinalPriceMouseOver
                        }
                    })), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown,
                        additionalClasses: [oe]
                    }), r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !1
                    })))
                },
                We = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        i = "" !== e.priceBreakdown.chargesInfo;
                    return r().createElement("div", {
                        className: Z
                    }, r().createElement("div", {
                        className: q
                    }, r().createElement(Ce, {
                        priceBreakdown: e.priceBreakdown,
                        textVariant: "small_1",
                        attributes: {
                            "aria-hidden": !0
                        }
                    })), r().createElement("div", {
                        className: Y,
                        "aria-hidden": "true"
                    }, r().createElement(l.Text, {
                        className: b()(Y, z),
                        variant: "small_1"
                    }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)), t && r().createElement("div", {
                        className: b()(Y)
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        useRounding: !0,
                        additionalClasses: [z],
                        textVariant: "small_1"
                    })), r().createElement("div", {
                        className: b()(Y, ue, me)
                    }, r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: []
                    }))), i && r().createElement("div", {
                        "aria-hidden": "true"
                    }, r().createElement("div", {
                        className: b()(Y, ce, ve)
                    }, r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }))), r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }))
                },
                Ye = e => {
                    const [n, t] = (0, a.useState)(!1), {
                        translate: i
                    } = (0, c.useTranslations)(), d = null !== e.priceBreakdown.strikethroughPrice, s = null !== e.priceBreakdown.rewards;
                    let o;
                    return o = (void 0 === e.displayBreakdown || e.displayBreakdown) && d ? r().createElement(l.Box, {
                        padding: 0
                    }, r().createElement("span", {
                        onClick: () => {
                            var n;
                            t(!0), null === (n = e.onPriceBlockClick) || void 0 === n || n.call(e)
                        },
                        onKeyDown: () => {
                            var n;
                            t(!0), null === (n = e.onPriceBlockClick) || void 0 === n || n.call(e)
                        },
                        role: "button",
                        tabIndex: 0
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [H, Y]
                    }), r().createElement(l.Icon, {
                        className: j,
                        svg: F.default,
                        size: "small",
                        color: "neutral_alt"
                    })), r().createElement(l.SheetContainer, {
                        title: i("sr_pd_breakdown_price_summary"),
                        active: n,
                        onCloseTrigger: () => t(!1),
                        closeAriaLabel: i("a11y_cta_close"),
                        position: "bottom"
                    }, r().createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    }), s ? r().createElement(r().Fragment, null, r().createElement(l.Divider, {
                        className: te
                    }), r().createElement(De, {
                        data: e.priceBreakdown.rewards
                    })) : null)) : r().createElement(l.Box, {
                        padding: 0
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [H, Y]
                    })), r().createElement("div", {
                        className: b()(M),
                        "data-testid": "availability-rate-information"
                    }, o, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !1
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }))
                },
                Ue = e => {
                    const [n, t] = (0, a.useState)(!1), {
                        translate: i
                    } = (0, c.useTranslations)(), d = null !== e.priceBreakdown.strikethroughPrice, s = null !== e.priceBreakdown.rewards;
                    let o;
                    o = (void 0 === e.displayBreakdown || e.displayBreakdown) && d ? r().createElement(r().Fragment, null, r().createElement("span", {
                        onClick: () => {
                            var n;
                            t(!0), null === (n = e.onPriceBlockClick) || void 0 === n || n.call(e)
                        },
                        onKeyDown: () => {
                            var n;
                            t(!0), null === (n = e.onPriceBlockClick) || void 0 === n || n.call(e)
                        },
                        role: "button",
                        tabIndex: 0
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [H, Y]
                    }), r().createElement(l.Icon, {
                        className: j,
                        svg: F.default,
                        size: "small",
                        color: "neutral_alt"
                    })), r().createElement(l.SheetContainer, {
                        title: i("sr_pd_breakdown_price_summary"),
                        active: n,
                        onCloseTrigger: () => t(!1),
                        closeAriaLabel: i("a11y_cta_close"),
                        position: "bottom"
                    }, r().createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    }), s ? r().createElement(r().Fragment, null, r().createElement(l.Divider, {
                        className: te
                    }), r().createElement(De, {
                        data: e.priceBreakdown.rewards
                    })) : null)) : r().createElement(r().Fragment, null, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [H, Y]
                    }));
                    const m = [];
                    return d || m.push(Y), r().createElement("div", {
                        className: b()(M),
                        "data-testid": "availability-rate-information"
                    }, r().createElement(he, {
                        isMDot: !0,
                        priceSearchConfig: e.priceSearchConfig,
                        additionalClasses: m
                    }), r().createElement("div", null, " ", o), r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !1
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }))
                },
                Ke = e => {
                    const n = {
                            onMouseOver: e.onStrikethroughPriceMouseOver
                        },
                        t = {
                            onMouseOver: e.onFinalPriceMouseOver
                        };
                    return r().createElement("div", {
                        className: b()(M),
                        "data-testid": "hp-summary-rate-information"
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y],
                        attributes: n
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [x, Y],
                        attributes: t
                    }), r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }))
                },
                Ze = e => {
                    const n = {
                            onMouseOver: e.onStrikethroughPriceMouseOver
                        },
                        t = {
                            onMouseOver: e.onFinalPriceMouseOver
                        };
                    return r().createElement("div", {
                        className: b()(M),
                        "data-testid": "hp-summary-rate-information"
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        useRounding: !0,
                        additionalClasses: [Y, z],
                        attributes: n
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [x, Y],
                        attributes: t
                    }), r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }))
                },
                qe = e => {
                    const n = [];
                    return null !== e.priceBreakdown.strikethroughPrice || n.push(Y), r().createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, r().createElement(he, {
                        isMDot: !0,
                        priceSearchConfig: e.priceSearchConfig,
                        additionalClasses: n
                    }), r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [D, Y]
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [V, Y]
                    }), r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }))
                },
                $e = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        i = a.createElement("div", null, a.createElement(Ce, {
                            priceBreakdown: e.priceBreakdown
                        }));
                    let r = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), r = a.createElement(l.Text, {
                            variant: "small_1",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    const d = a.createElement(a.Fragment, null, r, a.createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), a.createElement(P, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }));
                    return a.createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, i, d, a.createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), a.createElement("div", null, a.createElement(Ee, {
                        priceBreakdown: e.priceBreakdown,
                        additionalClasses: [Y]
                    }), "\xa0\u2022\xa0", a.createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig,
                        additionalClasses: [Y]
                    })))
                },
                ze = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        i = r().createElement("div", null, r().createElement(Ce, {
                            priceBreakdown: e.priceBreakdown,
                            textVariant: "small_1"
                        }));
                    let a = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), a = r().createElement(l.Text, {
                            variant: "small_1",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    const d = r().createElement(r().Fragment, null, a, r().createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        textVariant: "headline_3",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }));
                    return r().createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, i, d, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement("div", null, r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown,
                        additionalClasses: [Y]
                    }), "\xa0\u2022\xa0", r().createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig,
                        additionalClasses: [Y]
                    })))
                },
                Xe = e => {
                    var n;
                    const t = new _e(e.priceBreakdown),
                        a = null !== e.priceBreakdown.strikethroughPrice,
                        d = void 0 === e.displayBreakdown || e.displayBreakdown,
                        s = null === e || void 0 === e || null === (n = e.priceBreakdown) || void 0 === n ? void 0 : n.absoluteSavings;
                    let o, c = null;
                    const m = {
                        tabIndex: 0
                    };
                    return t.getConfigByKey(w.DISPLAY_PRICE_IN_PROPERTY_CURRENCY) && e.priceBreakdown.headlinePrice.productAmount && e.priceBreakdown.headlinePrice.productAmount.formattedRoundedAmount && (c = r().createElement("div", {
                        className: le
                    }, r().createElement(l.Text, {
                        variant: "strong_2",
                        color: "neutral_alt"
                    }, e.priceBreakdown.headlinePrice.productAmount.formattedRoundedAmount))), o = d && a && e.priceBreakdown.allDiscounts.length ? r().createElement(l.Popover, {
                        triggerType: "hover",
                        size: "auto",
                        containerRef: (0, y.sk)() ? void 0 : {
                            current: document.body
                        },
                        onOpen: () => {
                            e.onStrikethroughPriceMouseOver && e.onStrikethroughPriceMouseOver()
                        }
                    }, r().createElement(l.Popover.Trigger, null, (n => r().createElement("div", (0, i.Z)({}, n, m), r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement("div", {
                        className: b()([Y, $])
                    }, r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [x, Y]
                    }), r().createElement(l.Icon, {
                        className: j,
                        svg: F.default,
                        size: "small",
                        color: "neutral_alt"
                    })), c, s ? r().createElement(ke, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        additionalClasses: [Y]
                    }) : null))), r().createElement(l.Popover.Content, null, r().createElement("div", {
                        onClick: e => e.stopPropagation(),
                        className: W
                    }, r().createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    })))) : r().createElement(r().Fragment, null, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [x, Y],
                        onHoverTracking: {
                            finalPrice: e.onFinalPriceMouseOver
                        }
                    }), c), r().createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, r().createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig
                    }), o, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }))
                },
                je = e => {
                    var n;
                    const [t, i] = (0, a.useState)(!1), {
                        translate: d
                    } = (0, c.useTranslations)(), s = null !== e.priceBreakdown.strikethroughPrice, o = null !== e.priceBreakdown.rewards, m = void 0 === e.displayBreakdown || e.displayBreakdown, u = null === e || void 0 === e || null === (n = e.priceBreakdown) || void 0 === n ? void 0 : n.absoluteSavings;
                    let v;
                    v = m && s ? r().createElement(r().Fragment, null, r().createElement("span", {
                        onClick: () => i(!0),
                        onKeyDown: () => i(!0),
                        role: "button",
                        tabIndex: 0
                    }, r().createElement("div", {
                        className: b()(u ? "" : Y)
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), u ? r().createElement(ke, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        additionalClasses: [Y]
                    }) : null), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [H, Y]
                    }), r().createElement(l.Icon, {
                        className: j,
                        svg: F.default,
                        size: "small",
                        color: "neutral_alt"
                    })), r().createElement(l.SheetContainer, {
                        title: d("sr_pd_breakdown_price_summary"),
                        active: t,
                        onCloseTrigger: () => i(!1),
                        closeAriaLabel: d("a11y_cta_close"),
                        position: "bottom"
                    }, r().createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    }), o ? r().createElement(r().Fragment, null, r().createElement(l.Divider, {
                        className: te
                    }), r().createElement(De, {
                        data: e.priceBreakdown.rewards
                    })) : null)) : r().createElement(r().Fragment, null, r().createElement("div", {
                        className: b()(Y)
                    }, r().createElement(Ne, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        useRounding: !0,
                        additionalClasses: [Y]
                    })), r().createElement(P, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [H, Y]
                    }), u ? r().createElement(ke, {
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !0,
                        additionalClasses: [Y]
                    }) : null);
                    const k = [];
                    return s || k.push(Y), r().createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, r().createElement(he, {
                        isMDot: !0,
                        priceSearchConfig: e.priceSearchConfig,
                        additionalClasses: k
                    }), v, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }))
                },
                Qe = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        a = void 0 === e.displayBreakdown || e.displayBreakdown;
                    let d;
                    const s = {
                            tabIndex: 0
                        },
                        o = r().createElement("div", null, r().createElement(Ce, {
                            priceBreakdown: e.priceBreakdown,
                            additionalTextColor: "neutral_alt"
                        }));
                    let c = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), c = r().createElement(l.Text, {
                            variant: "small_1",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    return d = a && t && e.priceBreakdown.allDiscounts.length ? r().createElement(l.Popover, {
                        triggerType: "hover",
                        containerRef: (0, y.sk)() ? void 0 : {
                            current: document.body
                        },
                        onOpen: () => {
                            e.onStrikethroughPriceMouseOver && e.onStrikethroughPriceMouseOver()
                        }
                    }, r().createElement(l.Popover.Trigger, null, (n => r().createElement("div", (0, i.Z)({}, n, s), c, r().createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement("div", {
                        className: b()([Y, $])
                    }, r().createElement(P, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(l.Icon, {
                        className: Q,
                        svg: F.default,
                        size: "smallest",
                        color: "neutral_alt"
                    }))))), r().createElement(l.Popover.Content, null, r().createElement("div", {
                        onClick: e => e.stopPropagation()
                    }, r().createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    })))) : r().createElement(r().Fragment, null, c, r().createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y],
                        onHoverTracking: {
                            finalPrice: e.onFinalPriceMouseOver
                        }
                    })), r().createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, o, d, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }), r().createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig
                    }))
                },
                Je = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        i = a.createElement("div", null, a.createElement(Ce, {
                            priceBreakdown: e.priceBreakdown
                        }));
                    let r = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), r = a.createElement(l.Text, {
                            variant: "small_1",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    const d = a.createElement(a.Fragment, null, r, a.createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), a.createElement(P, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }));
                    return a.createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, i, d, a.createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), a.createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }), a.createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig
                    }))
                },
                en = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        a = void 0 === e.displayBreakdown || e.displayBreakdown;
                    let d;
                    const s = {
                            tabIndex: 0
                        },
                        o = r().createElement("div", null, r().createElement(Ce, {
                            priceBreakdown: e.priceBreakdown,
                            textVariant: "small_1"
                        }));
                    let c = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), c = r().createElement(l.Text, {
                            variant: "small_1",
                            color: "neutral_alt",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    return d = a && t && e.priceBreakdown.allDiscounts.length ? r().createElement(l.Popover, {
                        triggerType: "hover",
                        containerRef: (0, y.sk)() ? void 0 : {
                            current: document.body
                        },
                        onOpen: () => {
                            e.onStrikethroughPriceMouseOver && e.onStrikethroughPriceMouseOver()
                        }
                    }, r().createElement(l.Popover.Trigger, null, (n => r().createElement("div", (0, i.Z)({}, n, s), c, r().createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement("div", {
                        className: b()([Y, $])
                    }, r().createElement(P, {
                        textVariant: "headline_3",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(l.Icon, {
                        className: Q,
                        svg: F.default,
                        size: "smallest",
                        color: "neutral_alt"
                    }))))), r().createElement(l.Popover.Content, null, r().createElement("div", {
                        onClick: e => e.stopPropagation()
                    }, r().createElement(Se, {
                        priceBreakdown: e.priceBreakdown
                    })))) : r().createElement(r().Fragment, null, c, r().createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        textVariant: "headline_3",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y],
                        onHoverTracking: {
                            finalPrice: e.onFinalPriceMouseOver
                        }
                    })), r().createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, o, d, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }), r().createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig
                    }))
                },
                nn = e => {
                    const n = new _e(e.priceBreakdown),
                        t = null !== e.priceBreakdown.strikethroughPrice,
                        i = r().createElement("div", null, r().createElement(Ce, {
                            priceBreakdown: e.priceBreakdown,
                            textVariant: "small_1"
                        }));
                    let a = null;
                    if (n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT)) {
                        const e = [Y];
                        t || e.push(z), a = r().createElement(l.Text, {
                            variant: "small_1",
                            className: b()(...e),
                            tagName: "span"
                        }, n.getFirstTranslationByKey(pe.TOTAL_PRICE_TEXT))
                    }
                    const d = r().createElement(r().Fragment, null, a, r().createElement(Ne, {
                        textVariant: "small_1",
                        priceBreakdown: e.priceBreakdown,
                        isMDot: !1,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }), r().createElement(P, {
                        textVariant: "headline_3",
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0,
                        additionalClasses: [Y]
                    }));
                    return r().createElement("div", {
                        className: b()(M, L),
                        "data-testid": "availability-rate-information"
                    }, i, d, r().createElement(ge, {
                        priceBreakdown: e.priceBreakdown,
                        useRounding: !0
                    }), r().createElement(Ee, {
                        priceBreakdown: e.priceBreakdown
                    }), r().createElement(he, {
                        isMDot: !1,
                        priceSearchConfig: e.priceSearchConfig
                    }))
                },
                tn = e => {
                    const n = e.priceBreakdown;
                    switch (e.layout) {
                        case A.SR_PROPERTY_CARD:
                        case A.WEBCORE_PROPERTY_CARD_DESKTOP:
                            return r().createElement(Xe, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver
                            });
                        case A.SR_PROPERTY_CARD_MDOT:
                            return r().createElement(je, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown
                            });
                        case A.SR_PROPERTY_CARD_MDOT_MAPS:
                            return r().createElement(qe, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown
                            });
                        case A.SR_PROPERTY_CARD_NIGHTLY_PRICE:
                            return r().createElement(en, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver
                            });
                        case A.SR_PROPERTY_CARD_NIGHTLY_PRICE_DOMINANT:
                            return r().createElement(Qe, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver
                            });
                        case A.SR_PROPERTY_CARD_NIGHTLY_PRICE_MDOT:
                            return r().createElement(nn, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver
                            });
                        case A.SR_PROPERTY_CARD_NIGHTLY_PRICE_DOMINANT_MDOT:
                            return r().createElement(Je, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver
                            });
                        case A.SR_PROPERTY_CARD_NIGHTLY_PRICE_MDOT_MAPS:
                            return r().createElement(ze, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver
                            });
                        case A.SR_PROPERTY_CARD_NIGHTLY_PRICE_DOMINANT_MDOT_MAPS:
                            return r().createElement($e, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver
                            });
                        case A.HP_RT_DESKTOP:
                            return r().createElement(xe, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver,
                                onIconMouseOver: e.onIconMouseOver
                            });
                        case A.HP_RT_SUMMARY_DESKTOP:
                            return r().createElement(Ke, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver
                            });
                        case A.HP_RT_SUMMARY_SELECTION_MDOT:
                            return r().createElement(Ze, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver
                            });
                        case A.HP_RT_MDOT:
                            return r().createElement(Ue, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_RT_DETAILED_MDOT:
                            return r().createElement(He, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver,
                                onIconMouseOver: e.onIconMouseOver
                            });
                        case A.HP_RT_DETAILED_NIGHTLY_PRICE_MDOT:
                            return r().createElement(Ve, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_RT_HORIZONTAL_SELECTION_SUMMARY_MDOT:
                            return r().createElement(Ge, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_RT_HORIZONTAL_SELECTION_SUMMARY_NIGHTLY_PRICE_MDOT:
                            return r().createElement(We, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onFinalPriceMouseOver: e.onFinalPriceMouseOver,
                                onStrikethroughPriceMouseOver: e.onStrikethroughPriceMouseOver
                            });
                        case A.HP_MAP_MAIN_VIEW_DESKTOP:
                            return r().createElement(fe, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_MAIN_VIEW_NIGHTLY_PRICE_DESKTOP:
                            return r().createElement(Ie, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_MAIN_VIEW_NIGHTLY_PRICE_DOMINANT_DESKTOP:
                            return r().createElement(Te, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_MINI_VIEW_DESKTOP:
                            return r().createElement(Re, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_MINI_VIEW_NIGHTLY_PRICE_DESKTOP:
                            return r().createElement(Fe, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_MINI_VIEW_NIGHTLY_PRICE_DOMINANT_DESKTOP:
                            return r().createElement(be, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_PIN_VIEW_DESKTOP:
                            return r().createElement(ye, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_PIN_VIEW_NIGHTLY_PRICE_DESKTOP:
                            return r().createElement(Ae, {
                                priceBreakdown: n,
                                isMDot: !1,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_PROPERTY_VIEW_MDOT:
                            return r().createElement(we, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_PROPERTY_VIEW_NIGHTLY_PRICE_MDOT:
                            return r().createElement(Le, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_PROPERTY_VIEW_NIGHTLY_PRICE_DOMINANT_MDOT:
                            return r().createElement(Me, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_PIN_VIEW_MDOT:
                            return r().createElement(Pe, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_MAP_PIN_VIEW_NIGHTLY_PRICE_MDOT:
                            return r().createElement(Oe, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        case A.HP_RT_MDOT_MICROFUNNEL:
                            return r().createElement(Ye, {
                                priceBreakdown: n,
                                isMDot: !0,
                                priceSearchConfig: e.priceSearchConfig,
                                displayBreakdown: e.displayBreakdown,
                                onPriceBlockClick: e.onPriceBlockClick
                            });
                        default:
                            return null
                    }
                };
            t("abab1afe");
            t("de4a3ce2");
            const an = e => {
                    let {
                        priceDisplayInfo: n
                    } = e;
                    return n ? r().createElement(tn, n) : null
                },
                rn = e => {
                    let {
                        priceDisplayVariant: n,
                        priceSubtext: t,
                        price: i,
                        priceDisplayInfo: a,
                        isCardImprovementsExp: d,
                        isSoldOut: l
                    } = e;
                    return n === N.DEFAULT ? r().createElement(I, {
                        price: i,
                        priceSubtext: t,
                        isCardImprovementsExp: d,
                        isSoldOut: l
                    }) : n === N.VMF ? r().createElement(an, {
                        priceDisplayInfo: a
                    }) : null
                };
            var dn = t("6229d898"),
                ln = t("633e4f6b");
            const sn = "ec849dfa65",
                on = e => {
                    let {
                        title: n,
                        subtitle: t,
                        className: i,
                        titleTagName: a = "h3",
                        subtitleVariant: d = "small_1"
                    } = e;
                    const s = r().createElement(l.Text, {
                        variant: d
                    }, t);
                    return r().createElement(l.Title, {
                        className: i,
                        titleClassName: sn,
                        subtitleClassName: sn,
                        variant: "strong_1",
                        title: n,
                        titleTagName: a,
                        subtitle: s
                    })
                };
            var cn = t("6356c4a8"),
                mn = t("c91f1a4c"),
                un = t("c6ddcf1d");
            const vn = e => {
                    let {
                        title: n,
                        subTitle: t,
                        iconField1: o,
                        iconField2: c,
                        iconField3: m,
                        reviewScore: u,
                        starRating: v,
                        propertyType: k,
                        footer: g,
                        similarPropertiesCTA: p,
                        url: _,
                        img: E,
                        id: f,
                        price: T,
                        badges: I,
                        itemIndex: R,
                        aspectRatio: b,
                        isGenius: F,
                        isPreferredProperty: y,
                        isPreferredPlusProperty: P,
                        isPreferredKoreaCopy: A,
                        showPreferredPropertyPopup: O,
                        roomBadges: w,
                        roomType: M,
                        roomFeature: L,
                        urgencyTag: x,
                        pricingBadges: B,
                        pricingTags: D,
                        priceDisplayVariant: H = N.DEFAULT,
                        priceDisplayInfo: V,
                        priceSubtext: G,
                        isElevated: W = !0,
                        isBadgeAlternative: Y = !1,
                        galleryOfImages: U,
                        onClickHandler: K,
                        onViewHandler: Z,
                        onImageErrorHandler: q,
                        onGalleryNavigation: $,
                        onClickOpenInSameTab: z,
                        handleTextWithIconError: X,
                        shouldAriaHideImages: j = !1,
                        wishlistWidget: Q,
                        footerCTAs: J = [],
                        propertyFeatureHighlightBadge: ee,
                        isCardImprovementsExp: ne = !1,
                        isSoldOut: te = !1
                    } = e;
                    const ie = () => {
                            q && q(f, R)
                        },
                        ae = [o, c, m].filter(Boolean),
                        [re, de] = (0, d.YD)({
                            threshold: 0,
                            triggerOnce: !0
                        });
                    (0, a.useEffect)((() => {
                        de && Z && Z(f, R)
                    }), [de]);
                    const le = {
                            price: T,
                            priceDisplayVariant: H,
                            priceDisplayInfo: V,
                            priceSubtext: G
                        },
                        se = r().createElement(l.Actionable, {
                            href: _,
                            className: W ? un.Z.cardElevated : un.Z.card,
                            ref: re,
                            onClick: () => {
                                K && K(f, R)
                            },
                            attributes: {
                                target: z ? "_self" : "_blank",
                                "data-testid": mn.fn
                            }
                        }, (() => {
                            var e, a;
                            return r().createElement(l.Stack, {
                                gap: 0
                            }, (null === ee || void 0 === ee ? void 0 : ee.text) && r().createElement(l.Badge, {
                                text: ee.text,
                                className: un.Z.cardBadge,
                                variant: "media",
                                alternative: !0
                            }), r().createElement(l.AspectRatio, {
                                ratio: b || cn.Ze,
                                attributes: {
                                    "data-testid": mn.Yq,
                                    ...j && {
                                        "aria-hidden": "true"
                                    }
                                }
                            }, U && null !== (e = U.items) && void 0 !== e && e.length ? r().createElement(l.SliderContainer, {
                                previousButtonAriaLabel: U.previousButtonAriaLabel ? ? "",
                                nextButtonAriaLabel: U.nextButtonAriaLabel ? ? "",
                                onNavigationControlClick: e => (e.preventDefault(), void($ && $(f, R))),
                                attributes: {
                                    "data-testid": mn.tg
                                },
                                className: un.Z.sliderContainer
                            }, U.items.map((e => {
                                let {
                                    src: n
                                } = e;
                                return r().createElement(l.SliderContainer.Item, {
                                    key: n
                                }, r().createElement(l.AspectRatio, {
                                    ratio: b || cn.Ze
                                }, r().createElement(l.Image, (0, i.Z)({
                                    src: n,
                                    fallback: "icon",
                                    fallbackIcon: (0, dn.uI)(null === E || void 0 === E ? void 0 : E.imageType),
                                    onError: ie
                                }, j && {
                                    alt: ""
                                }))))
                            }))) : r().createElement(l.Image, (0, i.Z)({}, E, {
                                fallback: "icon",
                                fallbackIcon: (0, dn.uI)(null === E || void 0 === E ? void 0 : E.imageType),
                                onError: ie
                            }, j && {
                                alt: ""
                            }))), r().createElement(l.Box, {
                                padding: 2,
                                className: un.Z.contentBox
                            }, r().createElement(l.Stack, {
                                gap: 1,
                                justifyContent: "space-between"
                            }, r().createElement(l.Stack, {
                                gap: 1,
                                justifyContent: "space-between"
                            }, r().createElement(s.Z, {
                                starRating: v,
                                isPreferredProperty: y,
                                isPreferredPlusProperty: P,
                                isGenius: F,
                                propertyType: k,
                                isPreferredKoreaCopy: A,
                                showPreferredPropertyPopup: O,
                                sizeRatingGeniusRow: ne ? "smaller" : void 0,
                                sizePreferredIcon: ne ? "smaller" : void 0
                            }), r().createElement(on, {
                                "data-testid": mn.kr,
                                className: un.Z.title,
                                title: n,
                                subtitle: t,
                                subtitleVariant: ne ? "small_2" : void 0,
                                titleTagName: H === N.VMF ? "h2" : "h3"
                            }), u && u.formattedScore && r().createElement(l.Stack.Item, null, r().createElement(l.ReviewScore, {
                                score: u.formattedScore,
                                rating: u.rating,
                                reviewCount: u.formattedReviewCount,
                                ratingReviewAriaLabel: u.ratingReviewAriaLabel,
                                scoreAriaLabel: u.ariaLabel,
                                size: "smaller",
                                inline: !ne,
                                attributes: {
                                    "data-testid": mn.hT
                                }
                            })), !!ae.length && ae.map((e => r().createElement(h, {
                                key: e.text,
                                iconName: e.iconName,
                                text: e.text,
                                textColor: "neutral",
                                iconColor: "neutral",
                                alignItems: ne ? "start" : void 0,
                                iconLoadFailedCallback: X
                            }))), r().createElement(C, {
                                badges: I,
                                badgeName: "badge",
                                isBadgeAlternative: !ne && Y
                            })), r().createElement(l.Stack.Item, {
                                alignSelf: "end"
                            }, r().createElement(l.Stack, {
                                alignItems: "end",
                                gap: 0
                            }, r().createElement(C, {
                                badges: w,
                                badgeName: "roomBadge",
                                isBadgeAlternative: Y,
                                alignSelfEnd: !0
                            }), M && r().createElement(l.Text, {
                                variant: "small_1",
                                align: "end",
                                color: "neutral_alt",
                                className: un.Z.textWrapper
                            }, M), L && r().createElement(l.Text, {
                                variant: "body_2",
                                align: "end"
                            }, L), (a = le).priceDisplayVariant === N.DEFAULT && (e => {
                                let {
                                    price: n
                                } = e;
                                return !!n
                            })(a) || a.priceDisplayVariant === N.VMF && (e => {
                                let {
                                    priceDisplayInfo: n
                                } = e;
                                return !!n
                            })(a) ? r().createElement(r().Fragment, null, r().createElement(rn, (0, i.Z)({}, le, {
                                isCardImprovementsExp: ne,
                                isSoldOut: te
                            })), r().createElement(C, {
                                badges: B,
                                badgeName: "pricingBadge",
                                isBadgeAlternative: Y,
                                alignSelfEnd: !0
                            }), (null === D || void 0 === D ? void 0 : D.length) && D.map((e => r().createElement(l.Text, {
                                variant: ne ? "small_1" : "emphasized_2",
                                align: "end",
                                color: e.variant,
                                key: `key-${e.text}`
                            }, e.text)))) : null, x && r().createElement(l.Text, {
                                variant: ne ? "small_1" : "body_2",
                                color: x.variant,
                                align: "end",
                                className: un.Z.textWrapper
                            }, x.text))))), p && r().createElement(S, p), J.length > 0 && !p && r().createElement(ln.o, null, r().createElement(ln.I, {
                                footerCTAs: J
                            })), g && !p && r().createElement(l.Box, {
                                padding: 2,
                                className: un.Z.footer
                            }, r().createElement(h, {
                                iconName: g.iconName,
                                text: g.text,
                                textColor: "neutral",
                                iconColor: "neutral",
                                textVariant: "small_1",
                                iconLoadFailedCallback: X
                            })))
                        })());
                    return Q ? r().createElement("div", {
                        className: un.Z.cardWrapper
                    }, se, r().createElement("div", {
                        className: un.Z.wishlistWidgetWrapper
                    }, Q)) : se
                },
                kn = e => r().createElement(vn, (0, i.Z)({}, e, {
                    isCardImprovementsExp: !0
                })),
                gn = vn
        },
        "51a388c3": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => i
            });
            const i = t("6e8b4072").Z
        },
        30190550: (e, n, t) => {
            "use strict";
            t.d(n, {
                au: () => l,
                L4: () => s,
                wd: () => d
            });
            var i = t("dc6d28ff"),
                a = t("af1e2b38");
            const r = /^(b_feature_.*|exp_.*|i_am_from)$/;
            const d = function(e) {
                var n;
                const t = (0, i.getRequestContext)(),
                    d = t.getBPlatformEnvironment(),
                    l = !(!d || "prod" !== d),
                    s = t.getBasePageUrl(),
                    o = t.getEncryptedCommonOauthState(),
                    c = null === (n = t.getAffiliate()) || void 0 === n ? void 0 : n.id,
                    m = t.getLanguage(),
                    u = t.getActionName(),
                    v = t.isInternalIp(),
                    {
                        isMDOT: k
                    } = (0, a.Z6)(),
                    {
                        componentId: g,
                        iframe: p,
                        experiments: _,
                        customParams: S,
                        devHosts: h
                    } = e,
                    N = null === s || void 0 === s ? void 0 : s.host.endsWith("booking.cn"),
                    E = S || {},
                    f = `https://${function(e,n,t){return e?"account.booking."+(n?"cn":"com"):t&&t.ap?t.ap:"account.dqs.booking.com"}(l,N,h)}/auth/oauth2`,
                    C = `https://${function(e,n,t){return e?"secure.booking."+(n?"cn":"com"):t&&t.book?t.book:"book.dqs.booking.com"}(l,N,h)}/login.html?op=oauth_return`,
                    T = new URL(f),
                    I = function(e) {
                        return e ? "vO1Kblk7xX9tUn2cpZLS" : "b_test_fe"
                    }(l);
                ((e, n, t, i) => {
                    e.searchParams.set("client_id", i), e.searchParams.set("redirect_uri", t), e.searchParams.set("response_type", n.anon ? "anon_session" : "code")
                })(T, e, C, I), p && (T.searchParams.set("iframe", k ? "2" : "1"), E.iframe = k ? "2" : "1"), ((e, n, t, i, a) => {
                    t && e.searchParams.set("lang", t), i && e.searchParams.set("aid", i.toString()), a && e.searchParams.set("bkng_action", a), n.popup && e.searchParams.set("popup", "1"), n.prompt && e.searchParams.set("prompt", n.prompt), n.experimentVariant && e.searchParams.set("variant", n.experimentVariant.toString()), n.canShowGeniusMessaging && e.searchParams.set("genius", "1")
                })(T, e, m, c, u), l && !v || function(e, n) {
                    n.searchParams.forEach(((n, t) => {
                        r.test(t) && e.searchParams.set(t, n)
                    }))
                }(T, s);
                const R = {
                    id: g
                };
                if (_ && (R.data = function(e) {
                        const n = {};
                        return Object.keys(e).forEach((t => {
                            var i, a, r, d;
                            const l = {};
                            null !== (i = e[t]) && void 0 !== i && i.variant && (l.v = e[t].variant), null !== (a = e[t]) && void 0 !== a && a.auth_request_goal && (l.g1 = e[t].auth_request_goal), null !== (r = e[t]) && void 0 !== r && r.auth_page_loaded_goal && (l.g2 = e[t].auth_page_loaded_goal), null !== (d = e[t]) && void 0 !== d && d.auth_page_interaction_goal && (l.g3 = e[t].auth_page_interaction_goal), n[t] = l
                        })), n
                    }(_)), Object.keys(E).length && (R.params = E), o) {
                    const e = function(e, n) {
                        try {
                            let t;
                            const i = JSON.stringify(n);
                            return t = btoa(i), `${e}*${t}`
                        } catch (t) {
                            return `${e}*`
                        }
                    }(o, R);
                    e && T.searchParams.set("state", e)
                }
                return T.toString()
            };
            let l = function(e) {
                    return e.BP_AUTH_CHECKBOX = "bp_auth_checkbox", e.BP_AUTH_CHECKBOX_GENIUS = "bp_auth_checkbox_genius", e.BP_AUTH_CHECKBOX_GENIUS_MDOT = "bp_auth_checkbox_genius_mdot", e.BP_AUTH_CHECKBOX_MDOT = "bp_auth_checkbox_mdot", e.BP_GENIUS_INLINE = "bp_genius_inline", e.BP_GENIUS_INLINE_MDOT = "bp_genius_inline_mdot", e.BP_INLINE = "bp_inline", e.BP_INLINE_MDOT = "bp_inline_mdot", e.BS2_AUTH_LOW = "bs2_auth_low", e.BS2_AUTH_LOW_MDOT = "bs2_auth_low_mdot", e.CARS_INDEX_LP = "cars_index_lp", e.CBCC_LANDING_PAGE = "cbcc_landing_page", e.CO_BRAND_PRODUCTS_SIGNUP = "co_brand_products_signup", e.GENIUSVIP_ENROLLMENT = "geniusvip_enrollment", e.GENIUS_INDEX_BANNER = "genius_index_banner", e.GENIUS_INDEX_CAROUSEL = "genius_index_carousel", e.GENIUS_INDEX_SHEET = "genius_index_sheet", e.GENIUS_LANDING_PAGE = "genius_landing_page", e.GENIUS_LANDING_PAGE_INCENTIVE_CAMPAIGN = "genius_lp_incentive_campaign", e.GENIUS_ROOM_TABLE_BANNER_MDOT = "genius_rt_mdot_banner", e.GENIUS_ROOM_TABLE_BANNER_WWW = "genius_room_table_banner_www", e.GENIUS_SEARCHRESULTS_SHEET = "genius_searchresults_sheet", e.GENIUS_SHEET = "genius_sheet", e.GENIUS_SIGN_IN_EMAIL_POPOVER = "genius_sign_in_email_popover", e.HELP_CENTER = "help_center", e.INDEX = "index", e.LANDING_PAGES = "landing_pages", e.LANDING_PAGES_HOLIDAYS = "landing_pages_holidays", e.LOGIN_CARD = "login_card", e.LOGIN_CARD_SOCIAL = "login_card_social", e.MEMBERSHIP_HUB_REDIRECT = "membership_hub_redirect", e.MERCH_PLATFORM_INDEX = "merch_platform_index", e.MERCH_PLATFORM_INDEX_CTA = "merch_platform_index_cta", e.MERCH_PLATFORM_PROPERTY_PAGE_CTA = "merch_platform_property_page_cta", e.MERCH_PLATFORM_SEARCH_RESULTS_PAGE_CTA = "merch_platform_search_results_page_cta", e.MERCH_PLATFORM_SR = "merch_platform_sr", e.PAYMENT_TRANSACTIONS = "payment_transactions", e.PROPERY_PAGE = "propery_page", e.REACT_SHELL_GOOGLE_ONE_TAP = "react_shell_google_one_tap", e.SEARCH_RESULTS = "search_results", e.SEARCH_RESULTS_MDOT_PROPERTY_LIST_CTA_MDOT = "search_results_mdot_property_list_cta", e.SEARCH_RESULTS_WWW_PROPERTY_LIST_CTA_MDOT = "search_results_www_property_list_cta", e.SELF_SERVICE_BANNER = "self_service_banner", e.TRAVELLER_HEADER = "traveller_header", e.WISHLIST_BTN = "wishlist_btn", e.WISHLIST_BTN_SR = "wishlist_btn_sr", e.WISHLIST_DETAILS = "wishlist_details", e
                }({}),
                s = function(e) {
                    return e.SIGN_IN = "signin", e.IFRAME_WITH_EMAIL = "iframe-with-email", e.REGISTER = "register", e.NONE = "none", e
                }({})
        },
        "77a90307": (e, n, t) => {
            "use strict";
            t.d(n, {
                C5: () => d,
                Wx: () => a,
                r8: () => r,
                sk: () => l
            });
            var i = t("dc6d28ff");
            const a = () => (0, i.getRequestContext)().getBPlatformEnvironment && "dqs" === (0, i.getRequestContext)().getBPlatformEnvironment(),
                r = () => (0, i.getRequestContext)().getBPlatformEnvironment && ("dev" === (0, i.getRequestContext)().getBPlatformEnvironment() || !(0, i.getRequestContext)().getBPlatformEnvironment());

            function d() {
                return "undefined" !== typeof window && "undefined" !== typeof window.document
            }

            function l() {
                return !d()
            }
        },
        af1e2b38: (e, n, t) => {
            "use strict";
            t.d(n, {
                NM: () => i.N,
                sv: () => r,
                Z6: () => d
            });
            var i = t("5245e060"),
                a = t("dc6d28ff");
            const r = () => (0, a.getRequestContext)().getSiteType() ? ? i.N.WWW,
                d = () => {
                    const e = r();
                    return {
                        isWWW: e === i.N.WWW,
                        isMDOT: e === i.N.MDOT,
                        isTDOT: e === i.N.TDOT
                    }
                }
        },
        "8cbf371c": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => a
            });
            var i = t("c44dcb0c");
            const a = function() {
                return (0, i.useI18n)().trans((0, i.t)("a11y_lp_spinner_loading_generic"))
            }
        },
        "43bedd84": (e, n, t) => {
            "use strict";
            t.d(n, {
                p: () => i
            });
            const i = 
        },
        aa1ede20: (e, n, t) => {
            "use strict";
            t.d(n, {
                M: () => i
            });
            let i = function(e) {
                return e.TILES = "squares", e.STARS = "stars", e.DOTS = "circles", e.DIAMONDS = "diamonds", e
            }({})
        },
        "235c3452": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => f
            });
            var i = t("3d054e81"),
                a = t("ead71eb0"),
                r = t.n(a),
                d = t("8521b397"),
                l = t.n(d),
                s = t("8cbf371c"),
                o = t("1d5b7a48"),
                c = t("a6b472cf"),
                m = t("6222292b"),
                u = t("c44dcb0c"),
                v = t("9f43804b"),
                k = t("644b25f8"),
                g = t("6356c4a8"),
                p = t("c91f1a4c"),
                _ = t("043433df");
            const S = e => {
                    let {
                        lastTileButtonLink: n
                    } = e;
                    return r().createElement(m.Actionable, {
                        href: n,
                        className: _.Z.linkCardWrapper
                    }, r().createElement(m.AspectRatio, {
                        ratio: "1:1",
                        className: _.Z.linkCardWrapper
                    }, r().createElement(m.Stack, {
                        justifyContent: "center",
                        alignItems: "center",
                        className: _.Z.linkCard
                    }, r().createElement("div", {
                        className: _.Z.textWrapper
                    }, r().createElement(u.Trans, {
                        tag: "more_destinations"
                    })))))
                },
                h = "f18284f809",
                N = "d98232f00a",
                E = "eb39cd5523",
                f = e => {
                    let {
                        items: n,
                        isLoading: t,
                        size: d,
                        nextButtonAriaLabel: _,
                        previousButtonAriaLabel: f,
                        onAfterNavigate: C,
                        onCardClick: T,
                        onCardView: I,
                        onCardImageError: R,
                        onReadMoreClick: b,
                        onGalleryNavigation: F,
                        title: y,
                        CardComponent: P,
                        showSkeletonTitle: A,
                        action: O,
                        lastTileButtonLink: w,
                        useBuiDefaultTopNavigationOffset: M,
                        useNavigationTop: L,
                        heading: x,
                        containerDomId: B
                    } = e;
                    const D = (0, u.useI18n)(),
                        [H] = (0, m.useRTL)(),
                        V = (0, a.useRef)(0),
                        [G, W] = (0, a.useState)("50%"),
                        [Y, U] = (0, a.useState)(!1),
                        [K, Z] = (0, a.useState)(!0),
                        q = (0, a.useRef)(null),
                        $ = (0, a.useRef)(null),
                        z = l()(h, L && N);
                    (0, a.useEffect)((() => {
                        var e;
                        const t = null === q || void 0 === q || null === (e = q.current) || void 0 === e ? void 0 : e.lastElementChild,
                            i = null === t || void 0 === t ? void 0 : t.lastElementChild,
                            a = null === i || void 0 === i ? void 0 : i.clientHeight,
                            r = a && a / 2,
                            l = null === t || void 0 === t ? void 0 : t.clientWidth,
                            s = (() => {
                                if (null !== n && void 0 !== n && n.length && n[0].aspectRatio) {
                                    const e = n[0].aspectRatio.split(":").map((e => Number(e)));
                                    return {
                                        horizontal: e[0],
                                        vertical: e[1]
                                    }
                                }
                                return null
                            })();
                        if (!M && l && s && r) {
                            const e = (l - (g.Gi[d] - 1) * g.QN) / g.Gi[d] * s.vertical / (2 * s.horizontal) + r / 2;
                            W(`${e}px`)
                        }
                    }), [q, d, t, n]);
                    const X = (0, s.Z)();
                    if (t) return r().createElement(k.Z, {
                        size: d,
                        showTitle: A
                    });
                    if (null === n || void 0 === n || !n.length) return null;
                    return r().createElement("div", {
                        ref: q
                    }, r().createElement(m.Carousel, {
                        ref: $,
                        size: d,
                        title: L ? r().createElement(m.Stack, {
                            direction: "row",
                            alignItems: "end",
                            attributes: {
                                "data-testid": p.G9
                            }
                        }, r().createElement(m.Stack.Item, {
                            grow: !0
                        }, y), r().createElement(m.Stack.Item, null, r().createElement(m.Button.Aligner, {
                            alignment: ["bottom", "end"]
                        }, Y && r().createElement(m.Button, {
                            variant: "elevated",
                            icon: r().createElement(o.default, null),
                            onClick: () => {
                                var e;
                                return null === (e = $.current) || void 0 === e ? void 0 : e.navigateBack()
                            }
                        }), K && r().createElement(m.Button, {
                            variant: "elevated",
                            icon: r().createElement(c.default, null),
                            onClick: () => {
                                var e;
                                return null === (e = $.current) || void 0 === e ? void 0 : e.navigateForward()
                            }
                        })))) : y,
                        nextButtonAriaLabel: _ || D.trans((0, u.t)("sxp_carousel_accessibility_next")),
                        previousButtonAriaLabel: f || D.trans((0, u.t)("sxp_carousel_accessibility_previous")),
                        attributes: {
                            "data-testid": p.Di,
                            id: B
                        },
                        onAfterNavigate: e => {
                            var n;
                            let {
                                index: t
                            } = e, i = t > V.current ? v.f.Right : v.f.Left;
                            H && (i = i === v.f.Left ? v.f.Right : v.f.Left), V.current = t, 0 === V.current ? U(!1) : U(!0), V.current === ((null === q || void 0 === q || null === (n = q.current) || void 0 === n ? void 0 : n.children.length) || 0) ? Z(!1) : Z(!0), C && C(i, t)
                        },
                        topNavigationOffset: G,
                        action: "footer" === (null === O || void 0 === O ? void 0 : O.position) || L ? void 0 : O,
                        className: z,
                        ariaLabel: x || void 0
                    }, n.map(((e, n) => r().createElement(P, (0, i.Z)({}, e, {
                        onViewHandler: I,
                        onClickHandler: T,
                        onImageErrorHandler: R,
                        onReadMoreClickHandler: b,
                        onGalleryNavigation: F,
                        itemIndex: n,
                        size: d,
                        key: e.id
                    })))), w && r().createElement(S, {
                        lastTileButtonLink: w
                    })), "footer" === (null === O || void 0 === O ? void 0 : O.position) ? r().createElement("div", {
                        className: E,
                        "data-testid": p.Gq
                    }, r().createElement(m.Button.Aligner, {
                        alignment: ["bottom", "start"]
                    }, r().createElement(m.Button, (0, i.Z)({}, O, {
                        variant: "tertiary",
                        loading: O.loading,
                        loadingAriaLabel: O.loadingAriaLabel ? ? X
                    })))) : null)
                }
        },
        d81ed3ea: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => l
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("6222292b"),
                d = t("c91f1a4c");
            const l = e => {
                let {
                    isMdot: n,
                    heading: t,
                    subHeading: i,
                    titleSize: l
                } = e, s = n ? "headline_3" : "headline_2";
                return l && (s = l), a().createElement(r.Title, {
                    variant: s,
                    title: t,
                    titleTagName: "h2",
                    subtitle: i,
                    titleAttributes: {
                        "data-testid": d.Tr
                    },
                    subtitleAttributes: {
                        "data-testid": d.yu
                    }
                })
            }
        },
        "9f43804b": (e, n, t) => {
            "use strict";
            t.d(n, {
                C: () => i,
                f: () => a
            });
            let i = function(e) {
                    return e.SMALL = "small", e.MEDIUM = "medium", e.LARGE = "large", e.LARGER = "larger", e
                }({}),
                a = function(e) {
                    return e.Left = "left", e.Right = "right", e
                }({})
        },
        "644b25f8": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => v
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("6222292b"),
                d = t("6356c4a8"),
                l = t("c91f1a4c");
            const s = "ac96e178e8",
                o = "cc1c383429",
                c = "d15cee2d02",
                m = "c024dac69c",
                u = (e, n) => a().createElement(i.Fragment, {
                    key: String(n)
                }, a().createElement(r.SkeletonLoader, {
                    variant: "box",
                    className: c,
                    attributes: {
                        "data-testid": l.Ao
                    },
                    aspectRatio: d.vr
                }), a().createElement(r.SkeletonLoader, {
                    variant: "title",
                    className: m,
                    attributes: {
                        "data-testid": l.zs
                    }
                }), a().createElement(r.SkeletonLoader, {
                    variant: "one-line",
                    className: m,
                    attributes: {
                        "data-testid": l.nU
                    }
                }), a().createElement(r.SkeletonLoader, {
                    variant: "title",
                    className: m,
                    attributes: {
                        "data-testid": l.dN
                    }
                })),
                v = e => {
                    let {
                        size: n,
                        showTitle: t
                    } = e;
                    const i = "small" === n ? [1, 2, 3, 4, 5, 6] : [1, 2, 3, 4];
                    return a().createElement(a().Fragment, null, !!t && a().createElement(a().Fragment, null, a().createElement(r.SkeletonLoader, {
                        variant: "title",
                        className: s,
                        attributes: {
                            "data-testid": l.TP
                        }
                    }), a().createElement(r.SkeletonLoader, {
                        variant: "one-line",
                        className: o,
                        attributes: {
                            "data-testid": l.Zu
                        }
                    })), a().createElement(r.Carousel, {
                        size: n,
                        previousButtonAriaLabel: "",
                        nextButtonAriaLabel: "",
                        attributes: {
                            "data-testid": l.kh
                        }
                    }, i.map(u)))
                }
        },
        "6356c4a8": (e, n, t) => {
            "use strict";
            t.d(n, {
                Gi: () => d,
                QN: () => l,
                Ze: () => r,
                vr: () => a
            });
            var i = t("9f43804b");
            const a = "5:4",
                r = "3:2",
                d = {
                    [i.C.SMALL]: 6,
                    [i.C.MEDIUM]: 4,
                    [i.C.LARGE]: 3,
                    [i.C.LARGER]: 3
                },
                l = 16
        },
        c91f1a4c: (e, n, t) => {
            "use strict";
            t.d(n, {
                AU: () => y,
                Ao: () => f,
                Di: () => i,
                G9: () => _,
                Gq: () => g,
                Mo: () => p,
                QR: () => v,
                Qc: () => c,
                TP: () => h,
                Tr: () => a,
                VR: () => P,
                Yq: () => d,
                Zu: () => N,
                dN: () => I,
                fn: () => b,
                hT: () => m,
                kh: () => E,
                kr: () => l,
                nU: () => T,
                oK: () => F,
                qI: () => R,
                r0: () => u,
                tg: () => S,
                tt: () => o,
                yt: () => k,
                yu: () => r,
                zs: () => C,
                zt: () => s
            });
            const i = "webcore-carousel",
                a = "webcore-carousel-heading",
                r = "webcore-carousel-sub-heading",
                d = "webcore-carousel-image",
                l = "webcore-carousel-title",
                s = "webcore-carousel-sub-title",
                o = "webcore-carousel-price-container",
                c = "webcore-carousel-price",
                m = "webcore-carousel-review",
                u = "webcore-carousel-card-rating",
                v = "webcore-carousel-genius-badge",
                k = "webcore-carousel-card-scrim",
                g = "webcore-carousel-footer",
                p = "webcore-carousel-dismiss",
                _ = "webcore-carousel-top-navigation",
                S = "webcore-carousel-gallery-of-images",
                h = "webcore-carousel-heading-skeleton",
                N = "webcore-carousel-sub-heading-skeleton",
                E = "webcore-carousel-skeleton",
                f = "webcore-carousel-image-skeleton",
                C = "webcore-carousel-title-skeleton",
                T = "webcore-carousel-sub-title-skeleton",
                I = "webcore-carousel-price-container-skeleton",
                R = "web-core-stacked-card",
                b = "web-core-property-card",
                F = "WebcoreOverlayCard",
                y = "WebcoreContentCard",
                P = "WebcoreImmersiveCard"
        },
        "20df4cd3": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => k
            });
            var i = t("3d054e81"),
                a = t("ead71eb0"),
                r = t.n(a),
                d = t("9a67ad93"),
                l = t("8521b397"),
                s = t.n(l),
                o = t("6222292b");
            const c = "ff29d350d4",
                m = "d73c9abe7b";
            var u = t("6229d898"),
                v = t("c91f1a4c");
            const k = e => {
                let {
                    aspectRatio: n,
                    img: t,
                    title: l,
                    subTitle: k,
                    context: g,
                    formattedPrice: p,
                    priceText: _,
                    url: S,
                    id: h,
                    itemIndex: N,
                    isMdot: E,
                    onClickHandler: f,
                    onViewHandler: C,
                    shouldAriaHideImages: T = !1
                } = e;
                const [I, R] = (0, d.YD)({
                    threshold: 0,
                    triggerOnce: !0
                });
                (0, a.useEffect)((() => {
                    R && C && C(h, N)
                }), [R]);
                return r().createElement(o.Actionable, {
                    href: S,
                    className: c,
                    onClick: () => {
                        f && f(h, N)
                    },
                    ref: I,
                    attributes: {
                        "data-testid": v.oK
                    }
                }, r().createElement(o.AspectRatio, {
                    ratio: n
                }, r().createElement(o.Image, (0, i.Z)({
                    src: null === t || void 0 === t ? void 0 : t.src,
                    fallback: "icon",
                    fallbackIcon: (0, u.uI)(null === t || void 0 === t ? void 0 : t.imageType)
                }, T && {
                    alt: ""
                })), g && r().createElement(o.Scrim, {
                    position: "top",
                    className: s()({
                        [m]: !E
                    })
                }, r().createElement(o.Text, {
                    variant: "body_2"
                }, g)), r().createElement(o.Scrim, {
                    position: "bottom"
                }, r().createElement(o.Stack, {
                    gap: .5
                }, r().createElement(o.Text, {
                    variant: "strong_1",
                    tagName: "h3"
                }, l), k && r().createElement(o.Text, {
                    variant: "body_2"
                }, k), p && r().createElement(o.Stack, {
                    alignItems: "center",
                    gap: 1,
                    direction: "row"
                }, r().createElement(o.Text, {
                    tagName: "span",
                    variant: "body_2"
                }, _), r().createElement(o.Text, {
                    variant: "strong_2",
                    tagName: "span"
                }, p))))))
            }
        },
        74702481: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => w
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("8521b397"),
                d = t.n(r),
                l = t("aa1ede20"),
                s = t("6222292b"),
                o = t("abab1afe"),
                c = t("c44dcb0c"),
                m = t("de4a3ce2"),
                u = t("0c68dce6");
            const v = "e5b0af413e",
                k = "f2c354f969",
                g = "d1903e422e",
                p = "f3b61bfed4",
                _ = "e31b5d02bf";
            const S = function(e) {
                let {
                    value: n,
                    symbol: t,
                    showAdditionalInfoIcon: i,
                    caption: r,
                    tocLinkContent: d,
                    tocLinkUrl: l,
                    size: o = "medium",
                    containerRef: c,
                    ratingAriaLabel: m
                } = e;
                const S = d ? a().createElement("p", null, a().createElement(s.Link, {
                        text: d,
                        href: l,
                        className: _
                    })) : null,
                    h = a().createElement("div", null, a().createElement("div", null, r), S),
                    N = "smaller" === (E = o) ? "smallest" : "small" === E ? "smaller" : "medium" === E ? "small" : "large" === E ? "medium" : "larger" === E ? "large" : "medium";
                var E;
                const f = a().createElement(a().Fragment, null, a().createElement(s.Rating, {
                    className: v,
                    value: n,
                    variant: t,
                    tagName: "span",
                    size: o,
                    attributes: {
                        "data-testid": `rating-${t}`,
                        "aria-label": m
                    }
                }), i ? a().createElement(s.Icon, {
                    svg: a().createElement(u.default, null),
                    size: N,
                    color: "neutral",
                    className: p,
                    attributes: {
                        "data-testid": "quality-rating-additional-info"
                    }
                }) : null);
                return a().createElement(a().Fragment, null, r ? a().createElement(s.Popover, {
                    triggerType: "hover",
                    containerRef: c
                }, a().createElement(s.Popover.Content, null, h), a().createElement(s.Popover.Trigger, {
                    className: g
                }, (e => a().createElement(s.Actionable, {
                    className: k,
                    attributes: {
                        "data-testid": "quality-rating",
                        "aria-label": m,
                        ...e
                    }
                }, f)))) : f)
            };
            var h = t("c91f1a4c"),
                N = t("3d054e81"),
                E = t("43bedd84");
            const f = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "-.1 0 32.1 18"
                }, i.createElement("path", {
                    fill: "#FFB700",
                    fillRule: "evenodd",
                    stroke: "#B38000",
                    strokeWidth: .2,
                    d: "M0 2.252A2.25 2.25 0 0 1 2.252 0h13.496q.104 0 .204.01.102-.01.205-.01h13.496a2.25 2.25 0 0 1 2.252 2.252v13.496A2.25 2.25 0 0 1 29.653 18H16.157q-.102 0-.204-.01-.101.01-.205.01H2.252A2.25 2.25 0 0 1 0 15.748zm7.335 11.293h4.801c1.413 0 1.413-1.129 1.413-1.129 1.13-.564.564-1.693.564-1.693.848-.847 0-1.694 0-1.694.565-.847 0-1.693-.847-1.693H9.594l.565-1.976c.565-1.693-1.13-2.258-1.694-.282l-1.13 3.387zM3.915 8.46v5.085h2.79V8.46zM21.99 6c0-.433 0-.65.064-.823.105-.284.329-.508.613-.613.173-.064.39-.064.823-.064s.65 0 .823.064c.284.105.509.329.613.613.064.173.064.39.064.823v1.5h1.5c.433 0 .65 0 .823.064.284.105.509.329.613.613.064.173.064.39.064.823s0 .65-.064.823a1.03 1.03 0 0 1-.613.613c-.173.064-.39.064-.823.064h-1.5V12c0 .433 0 .65-.064.823a1.03 1.03 0 0 1-.613.613c-.173.064-.39.064-.823.064s-.65 0-.823-.064a1.03 1.03 0 0 1-.613-.613c-.064-.174-.064-.39-.064-.823v-1.5h-1.5c-.433 0-.65 0-.823-.064a1.03 1.03 0 0 1-.613-.613c-.064-.173-.064-.39-.064-.823s0-.65.064-.823c.105-.284.329-.508.613-.613.173-.064.39-.064.823-.064h1.5z",
                    clipRule: "evenodd"
                }))
            };
            var C = t("3e394088");
            const T = "dbbae1c947",
                I = "de5b77f4e5",
                R = "preferred-badge-wrapper-trigger",
                b = "preferred-badge-wrapper",
                F = "preferred-badge-svg",
                y = "preferred-plus-badge-svg",
                P = e => {
                    let {
                        companyName: n = E.p,
                        isPreferredKoreaCopy: t,
                        isPreferredPlusProperty: i,
                        iconSize: r = "small"
                    } = e;
                    const d = (0, c.useI18n)(),
                        l = i ? a().createElement(f, null) : a().createElement(C.default, null),
                        m = t ? d.trans((0, o.t)("a11y_preferred_programme_new_tooltip_preferred", {
                            variables: {
                                b_companyname: n
                            }
                        })) : d.trans((0, o.t)("a11y_preferred_programme_tooltip"));
                    return a().createElement(s.Icon, {
                        svg: l,
                        "data-testid": i ? y : F,
                        ariaLabel: m.toString(),
                        size: r,
                        className: T
                    })
                },
                A = e => {
                    var n;
                    const {
                        companyName: t = E.p,
                        isPreferredKoreaCopy: r,
                        showPreferredPropertyPopup: d
                    } = e, l = (0, c.useI18n)(), m = (0, i.useRef)("undefined" !== typeof document ? null === (n = document.getElementsByTagName("body")) || void 0 === n ? void 0 : n[0] : null), u = r ? l.trans((0, o.t)("preferred_programme_new_tooltip_preferred", {
                        variables: {
                            b_companyname: t
                        }
                    })) : l.trans((0, o.t)("preferred_programme_tooltip"));
                    return d ? a().createElement(s.Popover, {
                        triggerType: "hover",
                        containerRef: m
                    }, a().createElement(s.Popover.Content, null, u), a().createElement(s.Popover.Trigger, null, (n => a().createElement("span", (0, N.Z)({}, n, {
                        tabIndex: 0,
                        role: "button",
                        "data-testid": R,
                        className: I,
                        onMouseEnter: e => {
                            "function" === typeof n.onMouseEnter && n.onMouseEnter(e)
                        }
                    }), a().createElement(P, e))))) : a().createElement("span", {
                        className: I,
                        "data-testid": b
                    }, a().createElement(P, e))
                };
            var O = t("c6ddcf1d");
            const w = e => {
                let {
                    starRating: n,
                    isPreferredProperty: t,
                    isPreferredPlusProperty: i,
                    isGenius: r,
                    propertyType: u,
                    isPreferredKoreaCopy: v,
                    showPreferredPropertyPopup: k = !0,
                    sizeRatingGeniusRow: g = "small",
                    sizePreferredIcon: p = "small"
                } = e;
                const _ = (0, c.useI18n)();
                let N = null;
                if (n || t || i || r) {
                    const e = e => e.symbol === l.M.STARS ? _.trans((0, o.t)("a11y_bp_star_rating_2", {
                        variables: {
                            num_stars: e.value
                        }
                    })) : _.trans((0, o.t)("a11y_bp_quality_rating", {
                        variables: {
                            num: e.value
                        }
                    }));
                    N = a().createElement(a().Fragment, null, n && a().createElement(s.Stack.Item, {
                        className: d()({
                            [O.Z.ratingWithPopover]: !!n.popoverContent
                        }),
                        attributes: {
                            "data-testid": h.r0
                        }
                    }, a().createElement(S, {
                        size: g,
                        value: n.value,
                        symbol: n.symbol,
                        caption: n.popoverContent,
                        ratingAriaLabel: e(n),
                        tocLinkContent: n.popoverContentCtaText,
                        tocLinkUrl: n.popoverContentCtaUrl
                    })), t || i ? a().createElement(A, {
                        iconSize: p,
                        isPreferredKoreaCopy: v,
                        isPreferredPlusProperty: i,
                        showPreferredPropertyPopup: k
                    }) : null, r && a().createElement(m.Z, {
                        attributes: {
                            "data-testid": h.QR
                        }
                    }))
                }
                return (u || N) && a().createElement(s.Stack, {
                    direction: "row",
                    gap: 1,
                    alignItems: "center"
                }, u && a().createElement(s.Text, {
                    variant: "small_1",
                    color: "neutral_alt"
                }, u), N)
            }
        },
        "72bf8c83": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => v
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("6222292b"),
                d = t.n(r),
                l = t("d16e9636"),
                s = t.n(l),
                o = t("2e4ef946");
            const c = {
                    GeoPinIcon: (0, l.loadable)({
                        resolved: {},
                        chunkName() {
                            return "bIndexLpWebMfe-bookingcom-bui-assets-react-streamline-GeoPinIcon"
                        },
                        isReady(e) {
                            const n = this.resolve(e);
                            return !0 === this.resolved[n] && !!t.m[n]
                        },
                        importAsync: () => Promise.resolve().then(t.bind(t, "1424d033")),
                        requireAsync(e) {
                            const n = this.resolve(e);
                            return this.resolved[n] = !1, this.importAsync(e).then((e => (this.resolved[n] = !0, e)))
                        },
                        requireSync(e) {
                            const n = this.resolve(e);
                            return t(n)
                        },
                        resolve() {
                            return "1424d033"
                        }
                    }),
                    WeatherSunIcon: (0, l.loadable)({
                        resolved: {},
                        chunkName() {
                            return "bIndexLpWebMfe-bookingcom-bui-assets-react-streamline-WeatherSunIcon"
                        },
                        isReady(e) {
                            const n = this.resolve(e);
                            return !0 === this.resolved[n] && !!t.m[n]
                        },
                        importAsync: () => t.e("12acd492").then(t.bind(t, "08d5295c")),
                        requireAsync(e) {
                            const n = this.resolve(e);
                            return this.resolved[n] = !1, this.importAsync(e).then((e => (this.resolved[n] = !0, e)))
                        },
                        requireSync(e) {
                            const n = this.resolve(e);
                            return t(n)
                        },
                        resolve() {
                            return "08d5295c"
                        }
                    }),
                    BeachIcon: (0, l.loadable)({
                        resolved: {},
                        chunkName() {
                            return "bIndexLpWebMfe-bookingcom-bui-assets-react-streamline-BeachIcon"
                        },
                        isReady(e) {
                            const n = this.resolve(e);
                            return !0 === this.resolved[n] && !!t.m[n]
                        },
                        importAsync: () => Promise.resolve().then(t.bind(t, "bca4b277")),
                        requireAsync(e) {
                            const n = this.resolve(e);
                            return this.resolved[n] = !1, this.importAsync(e).then((e => (this.resolved[n] = !0, e)))
                        },
                        requireSync(e) {
                            const n = this.resolve(e);
                            return t(n)
                        },
                        resolve() {
                            return "bca4b277"
                        }
                    }),
                    TravelSustainableIcon: (0, l.loadable)({
                        resolved: {},
                        chunkName() {
                            return "bIndexLpWebMfe-bookingcom-bui-assets-react-streamline-TravelSustainableIcon"
                        },
                        isReady(e) {
                            const n = this.resolve(e);
                            return !0 === this.resolved[n] && !!t.m[n]
                        },
                        importAsync: () => t.e("eb115e85").then(t.bind(t, "da8e9042")),
                        requireAsync(e) {
                            const n = this.resolve(e);
                            return this.resolved[n] = !1, this.importAsync(e).then((e => (this.resolved[n] = !0, e)))
                        },
                        requireSync(e) {
                            const n = this.resolve(e);
                            return t(n)
                        },
                        resolve() {
                            return "da8e9042"
                        }
                    }),
                    EyeIcon: (0, l.loadable)({
                        resolved: {},
                        chunkName() {
                            return "bIndexLpWebMfe-bookingcom-bui-assets-react-streamline-EyeIcon"
                        },
                        isReady(e) {
                            const n = this.resolve(e);
                            return !0 === this.resolved[n] && !!t.m[n]
                        },
                        importAsync: () => Promise.resolve().then(t.bind(t, "bd4a631a")),
                        requireAsync(e) {
                            const n = this.resolve(e);
                            return this.resolved[n] = !1, this.importAsync(e).then((e => (this.resolved[n] = !0, e)))
                        },
                        requireSync(e) {
                            const n = this.resolve(e);
                            return t(n)
                        },
                        resolve() {
                            return "bd4a631a"
                        }
                    }),
                    SortFiltersIcon: (0, l.loadable)({
                        resolved: {},
                        chunkName() {
                            return "bIndexLpWebMfe-bookingcom-bui-assets-react-streamline-SortFiltersIcon"
                        },
                        isReady(e) {
                            const n = this.resolve(e);
                            return !0 === this.resolved[n] && !!t.m[n]
                        },
                        importAsync: () => t.e("0be056c3").then(t.bind(t, "cb670354")),
                        requireAsync(e) {
                            const n = this.resolve(e);
                            return this.resolved[n] = !1, this.importAsync(e).then((e => (this.resolved[n] = !0, e)))
                        },
                        requireSync(e) {
                            const n = this.resolve(e);
                            return t(n)
                        },
                        resolve() {
                            return "cb670354"
                        }
                    }),
                    DistanceIcon: (0, l.loadable)({
                        resolved: {},
                        chunkName() {
                            return "bIndexLpWebMfe-bookingcom-bui-assets-react-streamline-DistanceIcon"
                        },
                        isReady(e) {
                            const n = this.resolve(e);
                            return !0 === this.resolved[n] && !!t.m[n]
                        },
                        importAsync: () => t.e("b038c3c7").then(t.bind(t, "1fadcf63")),
                        requireAsync(e) {
                            const n = this.resolve(e);
                            return this.resolved[n] = !1, this.importAsync(e).then((e => (this.resolved[n] = !0, e)))
                        },
                        requireSync(e) {
                            const n = this.resolve(e);
                            return t(n)
                        },
                        resolve() {
                            return "1fadcf63"
                        }
                    })
                },
                m = e => {
                    const n = c[e];
                    return a().createElement(n, null)
                },
                u = e => {
                    let n, {
                        iconName: t,
                        text: i,
                        textColor: d,
                        iconColor: l,
                        iconSize: s,
                        textVariant: u,
                        alignItems: v = "center",
                        iconLoadFailedCallback: k
                    } = e;
                    if ("string" !== typeof t && t) n = t;
                    else {
                        if (!(t in c)) return k && k(t), null;
                        n = m(t)
                    }
                    return a().createElement(r.Stack, {
                        gap: 2,
                        alignItems: v,
                        direction: "row"
                    }, a().createElement(r.Icon, {
                        svg: n,
                        color: l,
                        size: s,
                        className: "start" === v ? o.Z.iconAlignStart : void 0
                    }), a().createElement(r.Text, {
                        variant: u || "body_2",
                        tagName: "span",
                        className: o.Z.text,
                        color: d
                    }, i))
                },
                v = u
        },
        "6e8b4072": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => p
            });
            var i = t("3d054e81"),
                a = t("ead71eb0"),
                r = t.n(a),
                d = t("9a67ad93"),
                l = t("6222292b"),
                s = t("c44dcb0c"),
                o = t("abab1afe");
            const c = e => ((e, n) => e < 1 ? null : e >= 1 && e < 2 ? {
                ratingAdjective: n.trans((0, o.t)("review_adj_bad")),
                a11yRatingAdjective: n.trans((0, o.t)("a11y_adjective_rating", {
                    variables: {
                        rating_adjective: "1"
                    }
                }))
            } : e < 3 ? {
                ratingAdjective: n.trans((0, o.t)("review_adj_very_poor")),
                a11yRatingAdjective: n.trans((0, o.t)("a11y_adjective_rating", {
                    variables: {
                        rating_adjective: "2"
                    }
                }))
            } : e < 4 ? {
                ratingAdjective: n.trans((0, o.t)("review_adj_poor")),
                a11yRatingAdjective: n.trans((0, o.t)("a11y_adjective_rating", {
                    variables: {
                        rating_adjective: "3"
                    }
                }))
            } : e < 5 ? {
                ratingAdjective: n.trans((0, o.t)("review_adj_disappointing")),
                a11yRatingAdjective: n.trans((0, o.t)("a11y_adjective_rating", {
                    variables: {
                        rating_adjective: "4"
                    }
                }))
            } : e < 6 ? {
                ratingAdjective: n.trans((0, o.t)("review_adj_average_passable")),
                a11yRatingAdjective: n.trans((0, o.t)("a11y_adjective_rating", {
                    variables: {
                        rating_adjective: "5"
                    }
                }))
            } : e < 7 ? {
                ratingAdjective: n.trans((0, o.t)("review_adj_pleasant")),
                a11yRatingAdjective: n.trans((0, o.t)("a11y_adjective_rating", {
                    variables: {
                        rating_adjective: "6"
                    }
                }))
            } : e < 8 ? {
                ratingAdjective: n.trans((0, o.t)("review_adj_good")),
                a11yRatingAdjective: n.trans((0, o.t)("a11y_adjective_rating", {
                    variables: {
                        rating_adjective: "7"
                    }
                }))
            } : e < 8.6 ? {
                ratingAdjective: n.trans((0, o.t)("review_adj_very_good")),
                a11yRatingAdjective: n.trans((0, o.t)("a11y_adjective_rating", {
                    variables: {
                        rating_adjective: "8"
                    }
                }))
            } : e < 9 ? {
                ratingAdjective: n.trans((0, o.t)("review_adj_fabulous")),
                a11yRatingAdjective: n.trans((0, o.t)("a11y_adjective_rating", {
                    variables: {
                        rating_adjective: "9"
                    }
                }))
            } : e < 9.5 ? {
                ratingAdjective: n.trans((0, o.t)("review_adj_superb")),
                a11yRatingAdjective: n.trans((0, o.t)("a11y_adjective_rating", {
                    variables: {
                        rating_adjective: "10"
                    }
                }))
            } : e >= 9.5 ? {
                ratingAdjective: n.trans((0, o.t)("review_adj_exceptional")),
                a11yRatingAdjective: n.trans((0, o.t)("a11y_adjective_rating", {
                    variables: {
                        rating_adjective: "11"
                    }
                }))
            } : null)(e, (0, s.useI18n)());
            var m = t("6229d898"),
                u = t("7a54d755"),
                v = t("6356c4a8"),
                k = t("c91f1a4c"),
                g = t("043433df");
            const p = e => {
                let {
                    title: n,
                    subTitle: t,
                    subTitle2: o,
                    priceText: p,
                    url: _,
                    img: S,
                    formattedPrice: h,
                    reviewScore: N,
                    size: E,
                    id: f,
                    itemIndex: C,
                    aspectRatio: T,
                    onClickHandler: I,
                    onViewHandler: R,
                    onImageErrorHandler: b,
                    badge: F,
                    onClickOpenInSameTab: y = !1,
                    description: P,
                    shouldAriaHideImages: A = !1
                } = e;
                const O = (0, s.useI18n)(),
                    [w, M] = (0, d.YD)({
                        threshold: 0,
                        triggerOnce: !0
                    });
                (0, a.useEffect)((() => {
                    M && R && R(f, C)
                }), [M]);
                const L = c(Number(null === N || void 0 === N ? void 0 : N.score) || 0);
                return r().createElement(l.Actionable, {
                    href: P ? "" : _,
                    className: g.Z.card,
                    ref: w,
                    onClick: () => {
                        I && I(f, C)
                    },
                    attributes: {
                        target: y ? "" : "_blank",
                        "data-testid": k.qI
                    }
                }, r().createElement(l.Stack, {
                    gap: 1
                }, r().createElement(l.AspectRatio, {
                    ratio: T || v.vr,
                    attributes: {
                        "data-testid": k.Yq
                    }
                }, r().createElement(l.Image, (0, i.Z)({}, S, {
                    className: g.Z.image,
                    fallback: "icon",
                    fallbackIcon: (0, m.uI)(null === S || void 0 === S ? void 0 : S.imageType),
                    onError: () => {
                        b && b(f, C)
                    }
                }, A && {
                    alt: ""
                })), !!F && r().createElement(l.Badge, {
                    text: F,
                    className: g.Z.badge,
                    variant: "media"
                })), r().createElement(l.Title, {
                    className: g.Z.titleContainer,
                    variant: "strong_1",
                    title: n,
                    titleTagName: "h3",
                    subtitle: t,
                    titleAttributes: {
                        "data-testid": k.kr
                    },
                    subtitleAttributes: {
                        "data-testid": k.zt
                    }
                }), o && r().createElement(l.Text, {
                    variant: "body_2",
                    color: "neutral_alt",
                    tagName: "span"
                }, o), P && r().createElement(l.Text, {
                    variant: "body_2",
                    className: g.Z.description,
                    color: "neutral_alt",
                    tagName: "span"
                }, P), h && r().createElement(l.Stack, {
                    alignItems: "center",
                    gap: 1,
                    direction: "row",
                    attributes: {
                        "data-testid": k.tt
                    }
                }, r().createElement(l.Text, {
                    variant: "body_2",
                    color: "neutral_alt",
                    tagName: "span"
                }, p || O.trans((0, s.t)("m_sr_autoextend_carousel_starting_from"))), r().createElement(l.Text, {
                    variant: "strong_1",
                    color: "neutral",
                    tagName: "span",
                    attributes: {
                        "data-testid": k.Qc
                    }
                }, h)), N && r().createElement(l.ReviewScore, {
                    score: N.score,
                    scoreAriaLabel: null === L || void 0 === L ? void 0 : L.a11yRatingAdjective,
                    rating: N.rating,
                    reviewCount: N.reviewCount,
                    ratingReviewAriaLabel: null === L || void 0 === L ? void 0 : L.ratingAdjective,
                    size: "smaller",
                    inline: E === u.Cn.MEDIUM,
                    attributes: {
                        "data-testid": k.hT
                    }
                })))
            }
        },
        "6229d898": (e, n, t) => {
            "use strict";
            t.d(n, {
                __: () => g,
                uI: () => _
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("58ff1375"),
                d = t("814bd9d3"),
                l = t("0788da83"),
                s = t("a70d6b8e"),
                o = t("337dc83a"),
                c = t("bca4b277"),
                m = t("1c0fcf2b"),
                u = t("1424d033"),
                v = t("abe1c127"),
                k = t("73a0d57d");
            let g = function(e) {
                return e.City = "City", e.District = "District", e.Region = "Region", e.Country = "Country", e.Airport = "Airport", e.Hotel = "Hotel", e.Beach = "Beach", e.Landmark = "Landmark", e.LatLong = "LatLong", e.Landscape = "Landscape", e.Group = "Group", e
            }({});
            const p = {
                    City: a().createElement(r.default, null),
                    District: a().createElement(d.default, null),
                    Region: a().createElement(d.default, null),
                    Country: a().createElement(l.default, null),
                    Airport: a().createElement(s.default, null),
                    Hotel: a().createElement(o.default, null),
                    Beach: a().createElement(c.default, null),
                    Landmark: a().createElement(m.default, null),
                    LatLong: a().createElement(u.default, null),
                    Landscape: a().createElement(v.default, null),
                    Group: a().createElement(k.default, null)
                },
                _ = e => e && p[e] || a().createElement(v.default, null)
        },
        "017725b3": (e, n, t) => {
            "use strict";
            t.d(n, {
                HeM: () => d,
                ICm: () => p,
                SCr: () => u,
                TDH: () => S,
                XIF: () => k,
                cP1: () => s,
                cbr: () => v,
                ccX: () => _,
                fFi: () => o,
                i3w: () => c,
                leS: () => i,
                nN3: () => r,
                pNy: () => a,
                smO: () => m,
                z5K: () => l,
                zrT: () => g
            });
            let i = function(e) {
                    return e.APARTHOTEL = "APARTHOTEL", e.APARTMENT = "APARTMENT", e.BED_AND_BREAKFAST = "BED_AND_BREAKFAST", e.BOAT = "BOAT", e.CAMPING = "CAMPING", e.CAPSULE_HOTEL = "CAPSULE_HOTEL", e.CHALET = "CHALET", e.CONDO = "CONDO", e.COTTAGE = "COTTAGE", e.COUNTRY_HOUSE = "COUNTRY_HOUSE", e.CRUISE = "CRUISE", e.FARM_STAY = "FARM_STAY", e.GITE = "GITE", e.GUEST_ACCOMMODATION = "GUEST_ACCOMMODATION", e.GUEST_HOUSE = "GUEST_HOUSE", e.HOLIDAY_HOME = "HOLIDAY_HOME", e.HOLIDAY_PARK = "HOLIDAY_PARK", e.HOMESTAY = "HOMESTAY", e.HOSTEL = "HOSTEL", e.HOTEL = "HOTEL", e.INN = "INN", e.JAPANESE_STYLE_BUSINESS_HOTEL = "JAPANESE_STYLE_BUSINESS_HOTEL", e.LODGE = "LODGE", e.LOVE_HOTEL = "LOVE_HOTEL", e.MOTEL = "MOTEL", e.NO_ACCOMMODATION_TYPE = "NO_ACCOMMODATION_TYPE", e.RESIDENCE = "RESIDENCE", e.RESORT = "RESORT", e.RIAD = "RIAD", e.RYOKAN = "RYOKAN", e.SANATORIUM = "SANATORIUM", e.STUDENT_ACCOMMODATION = "STUDENT_ACCOMMODATION", e.TENTED_CAMP = "TENTED_CAMP", e.UNCERTAIN = "UNCERTAIN", e.VILLA = "VILLA", e
                }({}),
                a = function(e) {
                    return e.CABINCLASS_BUSINESS = "CABINCLASS_BUSINESS", e.CABINCLASS_CLASS_TYPE_UNKNOWN = "CABINCLASS_CLASS_TYPE_UNKNOWN", e.CABINCLASS_ECONOMY = "CABINCLASS_ECONOMY", e.CABINCLASS_FIRST = "CABINCLASS_FIRST", e.CABINCLASS_PREMIUM_BUSINESS = "CABINCLASS_PREMIUM_BUSINESS", e.CABINCLASS_PREMIUM_ECONOMY = "CABINCLASS_PREMIUM_ECONOMY", e.CABINCLASS_PREMIUM_FIRST = "CABINCLASS_PREMIUM_FIRST", e.ECONOMY = "ECONOMY", e
                }({}),
                r = function(e) {
                    return e.APP_LARGE = "APP_LARGE", e.APP_LARGER = "APP_LARGER", e.APP_MEDIUM = "APP_MEDIUM", e.DESKTOP_LARGE = "DESKTOP_LARGE", e.DESKTOP_MEDIUM = "DESKTOP_MEDIUM", e.DESKTOP_SMALL = "DESKTOP_SMALL", e.MDOT_LARGE = "MDOT_LARGE", e.MDOT_MEDIUM = "MDOT_MEDIUM", e.MDOT_SMALL = "MDOT_SMALL", e
                }({}),
                d = function(e) {
                    return e.INDEPENDENCE_DAY = "INDEPENDENCE_DAY", e
                }({}),
                l = function(e) {
                    return e.AIRPORT = "AIRPORT", e.BOUNDING_BOX = "BOUNDING_BOX", e.CHAIN = "CHAIN", e.CITY = "CITY", e.COUNTRY = "COUNTRY", e.DISTRICT = "DISTRICT", e.HOTEL = "HOTEL", e.IATA = "IATA", e.LANDMARK = "LANDMARK", e.LATLONG = "LATLONG", e.NO_DEST_TYPE = "NO_DEST_TYPE", e.REGION = "REGION", e.SUB_REGION = "SUB_REGION", e.UNRECOGNIZED = "UNRECOGNIZED", e
                }({}),
                s = function(e) {
                    return e.ELIGIBLE = "ELIGIBLE", e.EXPIRED = "EXPIRED", e.INELIGIBLE = "INELIGIBLE", e.REACH_UPPER_LIMIT = "REACH_UPPER_LIMIT", e
                }({}),
                o = function(e) {
                    return e.COMPONENT = "COMPONENT", e.COMPONENT_UNIT = "COMPONENT_UNIT", e.REGION = "REGION", e
                }({}),
                c = function(e) {
                    return e.LINK = "LINK", e.PRIMARY = "PRIMARY", e.SECONDARY = "SECONDARY", e.TERTIARY = "TERTIARY", e.WHITE = "WHITE", e
                }({}),
                m = function(e) {
                    return e.BRAND_PRIMARY = "BRAND_PRIMARY", e.CONSTRUCTIVE = "CONSTRUCTIVE", e.NEUTRAL = "NEUTRAL", e
                }({}),
                u = function(e) {
                    return e.CHARGE_INFO = "CHARGE_INFO", e.FREE_CANCELLATION = "FREE_CANCELLATION", e.NO_PREPAYMENT_REQUIRED = "NO_PREPAYMENT_REQUIRED", e.PAY_AT_PROPERTY = "PAY_AT_PROPERTY", e.PAY_WITH_WALLET = "PAY_WITH_WALLET", e.TAX_CHARGE_INCLUDED = "TAX_CHARGE_INCLUDED", e
                }({}),
                v = function(e) {
                    return e.DOTS = "DOTS", e.STARS = "STARS", e.TILES = "TILES", e
                }({}),
                k = function(e) {
                    return e.EU5 = "EU5", e.GLOBAL = "GLOBAL", e.ROW = "ROW", e.US = "US", e
                }({}),
                g = function(e) {
                    return e.Expired = "Expired", e.Running = "Running", e
                }({}),
                p = function(e) {
                    return e.ATTRACTIONS = "ATTRACTIONS", e.CARS = "CARS", e.FLIGHTS = "FLIGHTS", e.STAYS = "STAYS", e
                }({}),
                _ = function(e) {
                    return e.ATTRACTIONS_SR = "ATTRACTIONS_SR", e.BOOKING_DETAIL = "BOOKING_DETAIL", e.BOOKING_PROCESS_1 = "BOOKING_PROCESS_1", e.BOOKING_PROCESS_2 = "BOOKING_PROCESS_2", e.CONFIRMATION_EMAIL = "CONFIRMATION_EMAIL", e.CONFIRMATION_PAGE = "CONFIRMATION_PAGE", e.GENIUS_LANDING_PAGE = "GENIUS_LANDING_PAGE", e.INDEX = "INDEX", e.INVITATION_EMAIL = "INVITATION_EMAIL", e.LANDING_PAGE = "LANDING_PAGE", e.PROPERTY_DISPLAY = "PROPERTY_DISPLAY", e.PROPERTY_PAGE = "PROPERTY_PAGE", e.ROOM_DETAIL = "ROOM_DETAIL", e.ROOM_LIST = "ROOM_LIST", e.SEARCH_RESULTS = "SEARCH_RESULTS", e.WALLET = "WALLET", e
                }({}),
                S = function(e) {
                    return e.BRAND_PRIMARY = "BRAND_PRIMARY", e.CONSTRUCTIVE = "CONSTRUCTIVE", e.NEUTRAL = "NEUTRAL", e
                }({})
        },
        "36c60bcb": (e, n, t) => {
            "use strict";
            t.d(n, {
                W: () => z,
                _: () => X
            });
            var i = t("28dbd132"),
                a = t("fb62a8c9");
            const r = {
                    campaignId: "12443493-fe75-4d0d-8801-7fa6eded0a98",
                    campaignName: a._.AttractionsActiveBookingMdot,
                    queenMabId: 1047,
                    openCardLinkInNewTab: !1,
                    onCarouselView: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRWPHDDWe`, 1)
                    },
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRWPHDDWe`, 3)
                    },
                    onCardView: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRWPHDDWe`, 2)
                    },
                    onCtaClick: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRWPHDDWe`, 4)
                    }
                },
                d = {
                    prod: r,
                    dqs: { ...r
                    }
                },
                l = {
                    campaignId: "11791b5b-c27a-4cd4-a2f7-9cdcaeffdc8f",
                    campaignName: a._.AttractionsActiveBookingWww,
                    queenMabId: 53,
                    openCardLinkInNewTab: !1,
                    onCarouselView: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFRURURHe`, 1)
                    },
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFRURURHe`, 3)
                    },
                    onCardView: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFRURURHe`, 2)
                    },
                    onCtaClick: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFRURURHe`, 4)
                    }
                },
                s = {
                    prod: l,
                    dqs: { ...l
                    }
                },
                o = {
                    campaignId: "88011831-bd27-49ad-8aaa-f79f025874fd",
                    campaignName: a._.AttractionsTopCitiesMdot,
                    queenMabId: 1054,
                    openCardLinkInNewTab: !1,
                    onCarouselView: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFDEYScEUWBZEWaSdCDWOOC`, 1)
                    },
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFDEYScEUWBZEWaSdCDWOOC`, 3)
                    },
                    onCardView: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFDEYScEUWBZEWaSdCDWOOC`, 2)
                    },
                    onCtaClick: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFDEYScEUWBZEWaSdCDWOOC`, 4)
                    }
                },
                c = {
                    prod: o,
                    dqs: { ...o
                    }
                },
                m = {
                    campaignId: "4d041367-1c0b-4678-9a0e-b1bce43c6477",
                    campaignName: a._.AttractionsTopCitiesWww,
                    queenMabId: 60,
                    openCardLinkInNewTab: !1,
                    onCarouselView: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFDEYScEUWBZEWaSddKNKNKWe`, 1)
                    },
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFDEYScEUWBZEWaSddKNKNKWe`, 3)
                    },
                    onCardView: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFDEYScEUWBZEWaSddKNKNKWe`, 2)
                    },
                    onCtaClick: () => {
                        (0, i.trackCustomGoal)(i.exp `HWAJLGbbeLHAFPRFDEYScEUWBZEWaSddKNKNKWe`, 4)
                    }
                },
                u = {
                    prod: m,
                    dqs: { ...m
                    }
                },
                v = {
                    campaignId: "TODO",
                    campaignName: a._.BookingHomesMdot,
                    openCardLinkInNewTab: !0,
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `cCHObCcEIZEHbDNQGGFVIZdRJOOIBBO`, 1)
                    }
                },
                k = {
                    prod: v,
                    dqs: { ...v
                    }
                };
            var g = t("8ebac256"),
                p = t("dc6d28ff"),
                _ = t("6ff170fe");
            const S = {
                    campaignId: "995ed19b-1160-4c67-8d26-e4565f9f0ae6",
                    campaignName: a._.DomesticDestinationsMdot,
                    queenMabId: 1034,
                    openCardLinkInNewTab: !1,
                    onCardClick: () => {
                        (0, i.trackGoal)("mdot_index_domestic_destination_click"), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREScXQOVZQOQCXNWARfeSAATULHfNCDWOOC`, 1), (0, _.fR)()
                    },
                    onCarouselView() {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREScXQOVZQOQCXNWARfeSAATULHfNCDWOOC`, 2)
                    },
                    onCardImageError: e => {
                        const n = (0, p.getRequestContext)().getVisitorCountry();
                        g.Z.sendEvent({
                            action_name: "recommendations_ux.domestic_destinations_carousel_image_error",
                            action_version: "1.0.0",
                            content: {
                                ufi: parseInt(e),
                                country_code: n
                            }
                        }), (0, i.trackCustomGoal)(i.exp `HCRNQWARfeSAAINFPIWBcaWWCZEDEZRae`, 1)
                    }
                },
                h = {
                    prod: S,
                    dqs: { ...S
                    }
                },
                N = {
                    campaignId: "1b20dab5-f371-4259-9e9d-18b63e11a3f5",
                    campaignName: a._.DomesticDestinationsWww,
                    queenMabId: 27,
                    openCardLinkInNewTab: !1,
                    onCardClick: () => {
                        (0, i.trackGoal)("www_nearby_destination_click"), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRdZcNRbDfRFfaNbEYAbZZdKNKNKWe`, 1), (0, _.fR)()
                    },
                    onCardImageError: e => {
                        const n = (0, p.getRequestContext)().getVisitorCountry();
                        g.Z.sendEvent({
                            action_name: "recommendations_ux.domestic_destinations_carousel_image_error",
                            action_version: "1.0.0",
                            content: {
                                ufi: parseInt(e),
                                country_code: n
                            }
                        }), (0, i.trackCustomGoal)(i.exp `HCRNQWARfeSAAINFPIWBcaWWCZEDEZRae`, 1)
                    },
                    onCarouselViewWithData: () => {
                        "us" !== (0, p.getRequestContext)().getVisitorCountry() && (0, i.trackExperimentStage)(i.exp `OAYRKHMdReLDEZRdZcNRbDfRFfaNbEYAbZZdKNKNKWe`, 3), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRdZcNRbDfRFfaNbEYAbZZdKNKNKWe`, 2)
                    }
                },
                E = {
                    prod: N,
                    dqs: { ...N
                    }
                },
                f = {
                    campaignId: "49b424c2-4c48-47e0-bf44-242168721c61",
                    campaignName: a._.FlightsCrossSellMdot,
                    queenMabId: 1048,
                    openCardLinkInNewTab: !0,
                    onCarouselView: () => {
                        (0, i.trackCustomGoal)(i.exp `aWQOcbJfEDBOSMKdFEAeRRYDEZREBBVYYT`, 1)
                    },
                    onCardView: () => {
                        (0, i.trackCustomGoal)(i.exp `aWQOcbJfEDBOSMKdFEAeRRYDEZREBBVYYT`, 2)
                    },
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `aWQOcbJfEDBOSMKdFEAeRRYDEZREBBVYYT`, 3)
                    },
                    onAfterNavigate: () => {
                        (0, i.trackCustomGoal)(i.exp `aWQOcbJfEDBOSMKdFEAeRRYDEZREBBVYYT`, 4)
                    }
                },
                C = {
                    prod: f,
                    dqs: { ...f
                    }
                },
                T = {
                    campaignId: "878d2883-e78c-4ea7-8c2f-83c2fe27dbef",
                    campaignName: a._.FlightsCrossSellWww,
                    queenMabId: 54,
                    openCardLinkInNewTab: !0,
                    onCarouselView: () => {
                        (0, i.trackCustomGoal)(i.exp `aWQOcbJfEDBOSMKdFEAeRRYDEZRdLOLOLMO`, 1)
                    },
                    onCardView: () => {
                        (0, i.trackCustomGoal)(i.exp `aWQOcbJfEDBOSMKdFEAeRRYDEZRdLOLOLMO`, 2)
                    },
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `aWQOcbJfEDBOSMKdFEAeRRYDEZRdLOLOLMO`, 3)
                    },
                    onAfterNavigate: () => {
                        (0, i.trackCustomGoal)(i.exp `aWQOcbJfEDBOSMKdFEAeRRYDEZRdLOLOLMO`, 4)
                    }
                },
                I = {
                    prod: T,
                    dqs: { ...T
                    }
                },
                R = {
                    campaignId: "e681313d-90d4-4c54-b394-13e60cae2496",
                    campaignName: a._.HotelHistoryWww,
                    openCardLinkInNewTab: !0,
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `cCHObCcEIZEHaOAXSPIfIKdFHfdKNKNKWe`, 1)
                    }
                },
                b = {
                    prod: R,
                    dqs: { ...R
                    }
                },
                F = {
                    campaignId: "02cb1d88-b3ac-4a9a-92cb-a1b7711e8fcd",
                    campaignName: a._.PropertyTypesLoginMdot,
                    queenMabId: 1061,
                    onCardClick() {
                        (0, i.trackGoal)("mdot_property_type_click"), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREbOMFcZSbcOOIBBO`, 2)
                    },
                    onAfterNavigate() {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREbOMFcZSbcOOIBBO`, 3)
                    },
                    onCarouselView() {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREbOMFcZSbcOOIBBO`, 1)
                    }
                },
                y = {
                    prod: F,
                    dqs: { ...F
                    }
                },
                P = {
                    campaignId: "dd5958b7-9f4e-498c-b394-691f494babee",
                    campaignName: a._.PropertyTypesLogoutMdot,
                    queenMabId: 1061,
                    onCardClick() {
                        (0, i.trackGoal)("mdot_property_type_click"), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREbOMFcZSbcOOIBBO`, 2)
                    },
                    onAfterNavigate() {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREbOMFcZSbcOOIBBO`, 3)
                    },
                    onCarouselView() {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREbOMFcZSbcOOIBBO`, 1)
                    }
                },
                A = {
                    prod: P,
                    dqs: { ...P
                    }
                },
                O = {
                    campaignId: "a928d9f8-e4fe-4954-9085-fad1950455f2",
                    campaignName: a._.PropertyTypesWww,
                    queenMabId: 5,
                    onCardClick() {
                        (0, i.trackGoal)("www_property_type_click"), (0, i.trackCustomGoal)(i.exp `OAYRKHMADDbddZQNAHTQLOLOLMO`, 1), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREbOMFcZSbccCcCcCC`, 2)
                    },
                    onAfterNavigate() {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMADDbddZQNAHTQLOLOLMO`, 2), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREbOMFcZSbccCcCcCC`, 3)
                    },
                    onCarouselView() {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREbOMFcZSbccCcCcCC`, 1)
                    }
                },
                w = {
                    prod: O,
                    dqs: { ...O
                    }
                };
            var M = t("9f43804b");
            const L = {
                    campaignId: "3c636621-7111-4889-9e40-93bfcc45141d",
                    campaignName: a._.SimilarPropertiesMdot,
                    queenMabId: 1023,
                    openCardLinkInNewTab: !0,
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `cCHObCBWaEdIPPSfDcISQZDdMMNIRHZSJOOIBBO`, 1), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbCWUZOdKNKNKHYYfPHe`, 1), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREbOMFcZGNVMYCKbUZdcLTQLOLOLOCDWOOC`, 2), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbWDDZQYaYYfPHe`, 1), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbYHUWPHDDWe`, 2)
                    },
                    onCardView: () => {
                        (0, i.trackCustomGoal)(i.exp `cCHObCBWaEdIPPSfDcISQZDdMMNIRHZSJOOIBBO`, 2)
                    },
                    onCarouselView: () => {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbCWUZOdKNKNKHYYfPHe`, 2), (0, i.trackExperimentStage)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbWDDZQYaYYfPHe`, 3), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbWDDZQYaYYfPHe`, 2), (0, i.trackExperimentStage)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbYHUWPHDDWe`, 4), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbYHUWPHDDWe`, 1)
                    },
                    onAfterNavigate(e) {
                        e === M.f.Right ? (0, i.trackCustomGoal)(i.exp `cCHObCBWaEdIPPSfDcISQZDdMMNIRHZSJOOIBBO`, 3) : e === M.f.Left && (0, i.trackCustomGoal)(i.exp `cCHObCBWaEdIPPSfDcISQZDdMMNIRHZSJOOIBBO`, 4), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbCWUZOdKNKNKHYYfPHe`, 3)
                    },
                    carouselTestId: "similar-properties-carousel"
                },
                x = {
                    prod: L,
                    dqs: { ...L
                    }
                },
                B = {
                    campaignId: "2e1d1e44-692c-4e96-98f4-3f02831ee551",
                    campaignName: a._.SimilarPropertiesWww,
                    queenMabId: 32,
                    openCardLinkInNewTab: !0,
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `cCHObCBWaEdIPPSfDcISQZDdMMNIRHZSJcCcCcCC`, 1), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbCWUZOdKNKNKHYYfPHe`, 1), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREbOMFcZGNVMYCKbUZdcLTQLOLOLOCDWOOC`, 2), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbWDDZQYbaTaTaET`, 1), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbYHUFRURURHe`, 2)
                    },
                    onCardView: () => {
                        (0, i.trackCustomGoal)(i.exp `cCHObCBWaEdIPPSfDcISQZDdMMNIRHZSJcCcCcCC`, 2)
                    },
                    onCarouselView: () => {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbCWUZOdKNKNKHYYfPHe`, 2), (0, i.trackExperimentStage)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbWDDZQYbaTaTaET`, 3), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbWDDZQYbaTaTaET`, 2), (0, i.trackExperimentStage)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbYHUFRURURHe`, 4), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbOMNMTbYHUFRURURHe`, 1)
                    },
                    onAfterNavigate(e) {
                        e === M.f.Right ? (0, i.trackCustomGoal)(i.exp `cCHObCBWaEdIPPSfDcISQZDdMMNIRHZSJcCcCcCC`, 3) : e === M.f.Left && (0, i.trackCustomGoal)(i.exp `cCHObCBWaEdIPPSfDcISQZDdMMNIRHZSJcCcCcCC`, 4), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZREdcAKWLbCWUZOdKNKNKHYYfPHe`, 3)
                    },
                    carouselTestId: "similar-properties-carousel"
                },
                D = {
                    prod: B,
                    dqs: { ...B
                    }
                },
                H = e => {
                    const n = (0, p.getRequestContext)().getLanguage();
                    return e.has(n)
                },
                V = new Set(["en-us", "en-gb"]),
                G = {
                    campaignId: "2372b8ab-c724-4212-8164-c6e4dc5e163b",
                    campaignName: a._.TripTypesMdot,
                    queenMabId: 1062,
                    openCardLinkInNewTab: !0,
                    onCarouselView: () => {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMaXbSbcVIZdRJbYTceMaCTPCDWOOC`, 1), H(V) && (0, i.trackExperimentStage)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBEBBVYYT`, 8)
                    },
                    onCarouselViewWithData: () => {
                        H(V) && ((0, i.trackExperimentStage)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBEBBVYYT`, 9), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBEBBVYYT`, 1))
                    },
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMaXbSbcVIZdRJbYTceMaCTPCDWOOC`, 2), H(V) && (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBEBBVYYT`, 3)
                    },
                    onAfterNavigate() {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMaXbSbcVIZdRJbYTceMaCTPCDWOOC`, 3)
                    },
                    onFilterChange() {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMaXbSbcVIZdRJbYTceMaCTPCDWOOC`, 4), H(V) && (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBEBBVYYT`, 2)
                    },
                    onCtaClick() {
                        H(V) && (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBEBBVYYT`, 4)
                    },
                    onCarouselDataError: () => {
                        H(V) && (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBEBBVYYT`, 5)
                    }
                },
                W = {
                    prod: G,
                    dqs: { ...G
                    }
                },
                Y = new Set(["en-us", "en-gb"]),
                U = {
                    campaignId: "abb158bf-e7ac-4c7e-bbcd-46f0a513f7fa",
                    campaignName: a._.TripTypesWww,
                    queenMabId: 66,
                    openCardLinkInNewTab: !0,
                    onCarouselView: () => {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMaXbSbcVIZdRJbYTceMaCTPdKNKNKWe`, 1), H(Y) && (0, i.trackExperimentStage)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBdLOLOLMO`, 8)
                    },
                    onCarouselViewWithData: () => {
                        H(Y) && ((0, i.trackExperimentStage)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBdLOLOLMO`, 9), (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBdLOLOLMO`, 1))
                    },
                    onCardClick: () => {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMaXbSbcVIZdRJbYTceMaCTPdKNKNKWe`, 2), H(Y) && (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBdLOLOLMO`, 3)
                    },
                    onAfterNavigate() {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMaXbSbcVIZdRJbYTceMaCTPdKNKNKWe`, 3)
                    },
                    onFilterChange() {
                        (0, i.trackCustomGoal)(i.exp `OAYRKHMaXbSbcVIZdRJbYTceMaCTPdKNKNKWe`, 4), H(Y) && (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBdLOLOLMO`, 2)
                    },
                    onCtaClick() {
                        H(Y) && (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBdLOLOLMO`, 4)
                    },
                    onCarouselDataError: () => {
                        H(Y) && (0, i.trackCustomGoal)(i.exp `OAYRKHMdReLDEZRERXSBSLKMBdLOLOLMO`, 5)
                    }
                },
                K = [E, h, w, y, A, s, d, I, C, k, b, u, c, D, x, {
                    prod: U,
                    dqs: { ...U
                    }
                }, W];
            var Z = t("3d486da1");
            const q = K.reduce(((e, n) => ({ ...e,
                    [n.prod.campaignName]: n
                })), {}),
                $ = K.reduce(((e, n) => ({ ...e,
                    [n.prod.campaignId]: n
                })), {});

            function z(e) {
                const n = (0, Z.dU)();
                if (!q[e]) throw new Error(`Config for campaign with name ${e} is not found. Check if it was added to configRegistry.`);
                return q[e][n]
            }

            function X(e) {
                const n = (0, Z.dU)();
                if (!$[e]) throw new Error(`Config for campaign with ID ${e} is not found. Check if it was added to configRegistry.`);
                return $[e][n]
            }
        },
        fb62a8c9: (e, n, t) => {
            "use strict";
            t.d(n, {
                _: () => i
            });
            let i = function(e) {
                return e.PropertyTypesWww = "PropertyTypesWww", e.PropertyTypesLoginMdot = "PropertyTypesLoginMdot", e.PropertyTypesLogoutMdot = "PropertyTypesLogoutMdot", e.DomesticDestinationsMdot = "DomesticDestinationsMdot", e.DomesticDestinationsWww = "DomesticDestinationsWww", e.JapanGoldenWeekWww = "JapanGoldenWeekWww", e.JapanGoldenWeekMdot = "JapanGoldenWeekMdot", e.JapanObonWww = "JapanObonWww", e.JapanObonMdot = "JapanObonMdot", e.AttractionsActiveBookingWww = "AttractionsActiveBookingWww", e.AttractionsActiveBookingMdot = "AttractionsActiveBookingMdot", e.FlightsCrossSellWww = "FlightsCrossSellWww", e.FlightsCrossSellMdot = "FlightsCrossSellMdot", e.BookingHomesMdot = "BookingHomesMdot", e.HotelHistoryWww = "HotelHistoryWww", e.AttractionsTopCitiesWww = "AttractionsTopCitiesWww", e.AttractionsTopCitiesMdot = "AttractionsTopCitiesMdot", e.SimilarPropertiesWww = "SimilarPropertiesWww", e.SimilarPropertiesMdot = "SimilarPropertiesMdot", e.TripTypesMdot = "TripTypesMdot", e.TripTypesWww = "TripTypesWww", e
            }({})
        },
        dc9c2eaa: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => Ee
            });
            var i = t("3d054e81"),
                a = t("ead71eb0"),
                r = t.n(a),
                d = t("36c60bcb"),
                l = t("8521b397"),
                s = t.n(l),
                o = t("9a67ad93"),
                c = t("f3c8bee5"),
                m = t("af1e2b38");
            const u = "98a40736-4843-456e-a0f3-7db54322fc0e";
            var v = t("20df4cd3"),
                k = t("e908bbd3"),
                g = t("51a388c3"),
                p = t("28dbd132");
            let _ = function(e) {
                return e.StackedCard = "StackedCard", e.OverlayCard = "OverlayCard", e.PropertyCard = "PropertyCard", e
            }({});
            var S = t("23b1c2ae");

            function h(e) {
                let {
                    cardDesignVariant: n,
                    ...t
                } = e;
                const a = p.exp `OAYRKHMdReLDEZREbOMFcZGNVMYCKbUZdcLTQLOLOLOCDWOOC`,
                    d = !!(0, p.trackExperiment)(a) ? k.o : k.Z;
                switch (n) {
                    case _.StackedCard:
                        return r().createElement(S.Z, (0, i.Z)({}, t, {
                            CardComponent: g.Z
                        }));
                    case _.OverlayCard:
                        return r().createElement(S.Z, (0, i.Z)({}, t, {
                            CardComponent: v.Z
                        }));
                    case _.PropertyCard:
                        return r().createElement(S.Z, (0, i.Z)({}, t, {
                            CardComponent: d
                        }));
                    default:
                        throw new Error(`MerchCarousel does not support design variant ${n}`)
                }
            }
            var N = t("52ffbfd1");
            const E = "a29523f495",
                f = "dcbb25ca0e",
                C = "bd318d6853",
                T = "beed942bdc",
                I = e => {
                    var n, t;
                    let {
                        campaignId: i,
                        campaignName: d,
                        queenMabId: l,
                        regionId: v,
                        onCarouselView: k,
                        onCarouselViewWithData: g,
                        items: p,
                        filtersInfo: _,
                        onFilterChange: S,
                        carouselTestId: I,
                        ...R
                    } = e;
                    const {
                        isWWW: b,
                        isMDOT: F
                    } = (0, m.Z6)(), y = {
                        carouselName: d,
                        componentId: i
                    }, P = e => null === p || void 0 === p ? void 0 : p.filter((n => n.filterValues.includes(e))), A = null === _ || void 0 === _ || null === (n = _.filters.find((e => e.isDefault))) || void 0 === n ? void 0 : n.id, O = () => A ? P(A) : p, [w, M] = (0, a.useState)(O), [L, x] = (0, a.useState)(!1);
                    p && !w && M(O);
                    const B = { ...R,
                            containerClassName: s()({
                                [C]: F,
                                [E]: b,
                                [f]: v === u,
                                [T]: (0, N.XA)()
                            }),
                            c360Tracking: y,
                            onTabChange: e => {
                                M(P(e)), S && S(e)
                            },
                            items: w,
                            filters: null === _ || void 0 === _ ? void 0 : _.filters,
                            testId: I
                        },
                        D = (null === (t = B.items) || void 0 === t ? void 0 : t.length) && !B.isLoading;
                    (0, a.useEffect)((() => {
                        L && D && g && g()
                    }), [L, D, g]);
                    const H = !(0, N.XA)() && l;
                    return r().createElement(o.df, {
                        onChange: e => {
                            var n;
                            e && ((null === (n = B.items) || void 0 === n ? void 0 : n.length) || B.isLoading) && k && k(), x(e)
                        },
                        "data-testid": "merch-carousel"
                    }, H ? r().createElement(c.Z, {
                        queenMabId: l,
                        "data-testid": "merch-queen-mab-widget-id",
                        role: "none"
                    }, r().createElement(h, B)) : r().createElement(h, B))
                };
            var R = t("dc6d28ff"),
                b = t("41c6c66e"),
                F = t("c44dcb0c"),
                y = t("9f43804b"),
                P = t("43a4d203"),
                A = t("2db41414"),
                O = t("d1e54a96"),
                w = t("01be079e"),
                M = t("dd6086f7");
            const L = e => {
                var n;
                const t = (0, R.getRequestContext)();
                switch (e.__typename) {
                    case "DirectLinkLanding":
                        const i = new URLSearchParams;
                        for (const n of e.queryParams ? ? []) i.set(n.name, n.value);
                        return (0, O.constructUrl)({
                            pathname: e.urlPath,
                            searchParams: i
                        }).toString();
                    case "SearchResultsLanding":
                        return (0, M.d)({ ...e,
                            nbAdults: e.nrAdults,
                            nbChildren: e.nrChildren,
                            nbRooms: e.nrRooms,
                            selectedFilters: e.filters && (null === (n = e.filters[0]) || void 0 === n ? void 0 : n.value)
                        }).toString();
                    case "PropertyPageLanding":
                        return (0, w.y)(t.getBasePageUrl(), { ...e,
                            countryCode: e.countryCode,
                            lang: e.lang || t.getLanguage(),
                            pageViewId: t.getPageviewId(),
                            dates: {
                                checkin: e.checkin,
                                checkout: e.checkout
                            },
                            group: {
                                nbAdults: null === e || void 0 === e ? void 0 : e.nrAdults,
                                nbChildren: null === e || void 0 === e ? void 0 : e.nrChildren,
                                nbRooms: null === e || void 0 === e ? void 0 : e.nrRooms,
                                childrenAges: null === e || void 0 === e ? void 0 : e.childrenAges
                            }
                        }).toString();
                    case "ResolvedLinkLanding":
                        return e.url;
                    default:
                        return ""
                }
            };

            function x(e, n, t, i) {
                var a, r;
                if (e.filters && e.filters.length > 1) throw Error("Not implemented. MerchCarousel does not support multi-dimension filter");
                return {
                    filterValues: (null === (a = e.filters) || void 0 === a ? void 0 : a[0].filterValues) || [],
                    title: e.title,
                    subTitle: e.subtitle || void 0,
                    img: {
                        src: null === (r = (0, A.X)(e.image.urlTemplate, t, n, i)) || void 0 === r ? void 0 : r["1x"]
                    },
                    url: L(e.targetLanding),
                    id: e.itemId,
                    aspectRatio: n
                }
            }
            var B = t("aa1ede20"),
                D = t("427ac7ba"),
                H = t("3d486da1"),
                V = t("017725b3");
            const G = {
                [V.cbr.DOTS]: B.M.DOTS,
                [V.cbr.STARS]: B.M.STARS,
                [V.cbr.TILES]: B.M.TILES
            };

            function W(e) {
                if (e && e.symbol) return {
                    symbol: G[e.symbol],
                    value: e.value,
                    popoverContentCtaUrl: e.popOverContentCtaUrl ? L(e.popOverContentCtaUrl) : void 0,
                    popoverContentCtaText: e.popOverContentCtaText || void 0,
                    popoverContent: e.popOverContent || void 0
                }
            }

            function Y(e) {
                if (e) return e.map((e => {
                    let {
                        value: n,
                        ariaLabel: t,
                        badgeVariation: i
                    } = e;
                    return {
                        text: n,
                        variant: i === V.smO.BRAND_PRIMARY ? "brand-primary" : "constructive",
                        ariaLabel: t
                    }
                }))
            }

            function U(e) {
                if (e) return {
                    text: e.value,
                    iconName: e.icon
                }
            }

            function K(e) {
                if (e && e.length) return e.filter((e => e.pricingPolicyType !== V.SCr.TAX_CHARGE_INCLUDED)).map((e => ({
                    text: e.value,
                    variant: "constructive"
                })))
            }

            function Z(e) {
                var n;
                if (e) return {
                    formattedPrice: e.regularPrice.formattedPrice,
                    formattedCrossedOutPrice: null === (n = e.strikeThroughPrice) || void 0 === n ? void 0 : n.formattedPrice,
                    priceText: e.prefixPriceText || void 0,
                    priceTextEnd: e.suffixPriceText || void 0
                }
            }

            function q(e) {
                var n;
                if (!e || !e.featurePrefix && (!e.features || !e.features.length)) return;
                const t = e.featurePrefix && e.features && e.features.length ? ": " : "";
                return `${e.featurePrefix||""}${t}${(null===(n=e.features)||void 0===n?void 0:n.join(" \xb7 "))||""}`
            }

            function $(e, n, t, i, a, r, d, l, s) {
                return null === r || void 0 === r ? void 0 : r.map((r => {
                    const o = r.__typename;
                    switch (o) {
                        case "MerchCarouselOverlayItem":
                            return function(e, n, t, i, a, r) {
                                var d;
                                return { ...x(e, n, t, i),
                                    context: e.contextualInformation || void 0,
                                    isMdot: a,
                                    formattedPrice: null === (d = e.price) || void 0 === d ? void 0 : d.formattedPrice,
                                    priceText: r,
                                    shouldAriaHideImages: !0
                                }
                            }(r, e, n, t, i, d);
                        case "MerchCarouselStackedItem":
                            return function(e, n, t, i, a, r) {
                                var d;
                                return { ...x(e, n, t, i),
                                    subTitle2: e.extraSubtitle || void 0,
                                    onClickOpenInSameTab: !a,
                                    reviewScore: e.reviewScore ? {
                                        reviewCount: e.reviewScore.reviewCount ? String(e.reviewScore.reviewCount) : void 0,
                                        score: String(e.reviewScore.score),
                                        rating: e.reviewScore.rating || void 0
                                    } : void 0,
                                    formattedPrice: null === (d = e.price) || void 0 === d ? void 0 : d.formattedPrice,
                                    priceText: r,
                                    shouldAriaHideImages: !0
                                }
                            }(r, e, n, t, a, d);
                        case "MerchCarouselWebPropertyStackedItem":
                            return function(e, n, t, i, a, r, d) {
                                var l, s, o;
                                const c = r && null !== e && void 0 !== e && e.reviewScore && e.reviewScore.reviewCount ? (0, H.Ie)(r, e.reviewScore.score, e.reviewScore.reviewCount) : void 0;
                                return { ...x(e, n, t, i),
                                    propertyType: e.accommodationType || void 0,
                                    roomType: (null === (l = e.feature) || void 0 === l ? void 0 : l.roomType) || void 0,
                                    isPreferredProperty: !!e.isPreferred,
                                    isGenius: !!e.isGenius,
                                    onClickOpenInSameTab: !a,
                                    urgencyTag: e.urgencyText ? {
                                        text: e.urgencyText,
                                        variant: "destructive"
                                    } : void 0,
                                    starRating: W(e.rating),
                                    roomFeature: q(e.feature),
                                    badges: Y(e.badges),
                                    iconField1: U(e.iconField1),
                                    iconField2: U(e.iconField2),
                                    iconField3: U(e.iconField3),
                                    footer: U(e.lastSeenIconField),
                                    price: Z(e.priceInfo),
                                    reviewScore: {
                                        formattedScore: (null === c || void 0 === c ? void 0 : c.score) || "",
                                        formattedReviewCount: null === c || void 0 === c ? void 0 : c.reviewCount,
                                        rating: (null === c || void 0 === c ? void 0 : c.rating) || "",
                                        ariaLabel: (null === c || void 0 === c ? void 0 : c.score) || "",
                                        ratingReviewAriaLabel: (null === c || void 0 === c ? void 0 : c.rating) || ""
                                    },
                                    priceSubtext: null === (s = e.priceInfo) || void 0 === s || null === (s = s.pricingPolicies) || void 0 === s || null === (s = s.find((e => e.pricingPolicyType === V.SCr.TAX_CHARGE_INCLUDED))) || void 0 === s ? void 0 : s.value,
                                    pricingTags: K(null === (o = e.priceInfo) || void 0 === o ? void 0 : o.pricingPolicies),
                                    shouldAriaHideImages: !0,
                                    wishlistWidget: d ? (0, D.e)({
                                        propertyId: parseInt(e.itemId)
                                    }, e.numOfWishlists ? ? void 0) : void 0
                                }
                            }(r, e, n, t, a, l, s);
                        default:
                            throw new Error(`carouselCardDataAdapter does not support the item type ${o}`)
                    }
                }))
            }
            const z = "DesktopCarouselStackedCards",
                X = "DesktopCarouselOverlayCards",
                j = "MdotCarouselOverlayCards",
                Q = "MdotCarouselStackedCards",
                J = "DesktopCarouselPropertyCards",
                ee = "MdotCarouselPropertyCards";
            var ne = t("75c11388");
            var te = t("5c4eda5e");
            const ie = {
                [Q]: _.StackedCard,
                [z]: _.StackedCard,
                [j]: _.OverlayCard,
                [X]: _.OverlayCard,
                [J]: _.PropertyCard,
                [ee]: _.PropertyCard
            };
            const ae = e => {
                    let {
                        carouselData: n,
                        isLoading: t,
                        i18n: i,
                        regionId: a,
                        shouldRenderWishlistWidget: r
                    } = e;
                    const {
                        designVariant: l,
                        filtersInfo: s
                    } = n || {}, o = (0, R.getRequestContext)().getSiteType() === P.SiteType.MDOT, c = o ? te.y.IndexQmabMdot : te.y.IndexQmabDesktop;
                    if (!n || !l) return {
                        isLoading: t,
                        items: void 0,
                        heading: "",
                        subHeading: void 0,
                        size: y.C.SMALL,
                        isMdot: o,
                        cardDesignVariant: _.StackedCard
                    };
                    if (l.__typename === z || l.__typename === X || l.__typename === j || l.__typename === Q || l.__typename === J || l.__typename === ee) {
                        const e = (m = l.carouselLayout, {
                                [V.nN3.DESKTOP_LARGE]: y.C.LARGE,
                                [V.nN3.DESKTOP_MEDIUM]: y.C.MEDIUM,
                                [V.nN3.DESKTOP_SMALL]: y.C.SMALL,
                                [V.nN3.MDOT_LARGE]: y.C.LARGE,
                                [V.nN3.MDOT_MEDIUM]: y.C.MEDIUM,
                                [V.nN3.MDOT_SMALL]: y.C.SMALL,
                                [V.nN3.APP_LARGE]: y.C.MEDIUM,
                                [V.nN3.APP_MEDIUM]: y.C.MEDIUM,
                                [V.nN3.APP_LARGER]: y.C.LARGE
                            }[m]),
                            v = n.carouselCampaignId,
                            {
                                openCardLinkInNewTab: k,
                                onCtaClick: g
                            } = (0, d._)(v);
                        let p;
                        l.__typename !== z && l.__typename !== X && l.__typename !== j && l.__typename !== Q || (p = l.priceText || void 0);
                        const _ = $(l.aspectRatio, e, c, o, k, l.items, p, i, r),
                            S = l.heading || "",
                            h = l.subHeading || void 0,
                            N = ((e, n) => {
                                if (!e) return;
                                const t = (0, ne.zD)(e.targetLanding);
                                return t ? {
                                    text: e.text,
                                    href: t,
                                    onClick: n
                                } : void 0
                            })(l.carouselCta, g),
                            E = ie[l.__typename];
                        if (s && s.filters.length > 1) throw Error("Not implemented. Multple filters is supported by MerchCarousel");
                        return {
                            isLoading: t,
                            items: _,
                            heading: S,
                            subHeading: h,
                            action: N,
                            size: e,
                            isMdot: o,
                            filtersInfo: s ? {
                                isClientSideFiltering: s.isClientSideFiltering,
                                filters: s.filters[0].values.map((e => ({
                                    id: e.value,
                                    icon: e.icon || void 0,
                                    text: e.title,
                                    isDefault: e.isDefault
                                })))
                            } : void 0,
                            cardDesignVariant: E,
                            titleSize: a === u ? "strong_1" : void 0,
                            regionId: a
                        }
                    }
                    var m;
                    throw new Error(`Data adapter doesn't support deprecated type ${l.__typename}`)
                },
                re = e => {
                    const n = {};
                    return e.filter((e => {
                        if ("FragmentDefinition" !== e.kind) return !0;
                        const t = e.name.value;
                        return !n[t] && (n[t] = !0, !0)
                    }))
                },
                de = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "Price"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "MerchCarouselItemPrice"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "formattedPrice"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                le = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "SearchResultsLanding"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "SearchResultsLanding"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "destType"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "destId"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "checkin"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "checkout"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "nrAdults"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "nrChildren"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "childrenAges"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "nrRooms"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "filters"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "value"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                se = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "ResolvedLinkLanding"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ResolvedLinkLanding"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "url"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                oe = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "DirectLinkLanding"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "DirectLinkLanding"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "urlPath"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "role"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "hash"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "queryParams"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "value"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                ce = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "Image"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "MerchCarouselItemImage"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "url"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "imageWidth"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "height"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "imageHeight"
                                    }
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "urlTemplate"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "alt"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                me = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "Filter"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "MerchCarouselItemFilter"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "filterId"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "filterValues"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                ue = [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "ReviewScore"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "MerchCarouselItemReview"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "score"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "rating"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "reviewCount"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                ve = {
                    kind: "Document",
                    definitions: re([{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "MerchCarouselDesignVariantFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "MerchCarousel"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "designVariant"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "DesktopCarouselStackedCards"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "heading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subHeading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "priceText"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cardType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselLayout"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "aspectRatio"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselCta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "MerchCarouselCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "items"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "StackedCardItem"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "MdotCarouselStackedCards"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "heading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subHeading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "priceText"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cardType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselLayout"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "aspectRatio"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselCta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "MerchCarouselCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "items"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "StackedCardItem"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "DesktopCarouselOverlayCards"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "heading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subHeading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "priceText"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cardType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselLayout"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "aspectRatio"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselCta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "MerchCarouselCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "items"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "OverlayCardItem"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "MdotCarouselOverlayCards"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "heading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subHeading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "priceText"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cardType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselLayout"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "aspectRatio"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselCta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "MerchCarouselCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "items"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "OverlayCardItem"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "DesktopCarouselPropertyCards"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "heading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subHeading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselLayout"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "aspectRatio"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselCta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "MerchCarouselCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "items"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PropertyCardItem"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "MdotCarouselPropertyCards"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "heading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subHeading"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselLayout"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "aspectRatio"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "carouselCta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "MerchCarouselCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "items"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PropertyCardItem"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }].concat([{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "MerchCarouselCTAFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "MerchCTA"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ariaLabel"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "targetLanding"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "DirectLinkLanding"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "urlPath"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "role"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hash"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "queryParams"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "value"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "LoginLanding"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "stub"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "DeeplinkLanding"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "urlPath"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "queryParams"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "value"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "ResolvedLinkLanding"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "OpenContextSheet"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sheet"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "WebContextSheet"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "body"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "items"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "InlineFragment",
                                                                                typeCondition: {
                                                                                    kind: "NamedType",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "ContextSheetTextItem"
                                                                                    }
                                                                                },
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "text"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }, {
                                                                                kind: "InlineFragment",
                                                                                typeCondition: {
                                                                                    kind: "NamedType",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "ContextSheetList"
                                                                                    }
                                                                                },
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "items"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "text"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }]
                                                                                        }
                                                                                    }]
                                                                                }
                                                                            }, {
                                                                                kind: "InlineFragment",
                                                                                typeCondition: {
                                                                                    kind: "NamedType",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "ContextSheetIllustratedTextList"
                                                                                    }
                                                                                },
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "items"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "text"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "illustration"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }]
                                                                                        }
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "buttons"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "variant"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "cta"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "text"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "ariaLabel"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "targetLanding"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "InlineFragment",
                                                                                        typeCondition: {
                                                                                            kind: "NamedType",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "DirectLinkLanding"
                                                                                            }
                                                                                        },
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "urlPath"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "role"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "hash"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "queryParams"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: {
                                                                                                    kind: "SelectionSet",
                                                                                                    selections: [{
                                                                                                        kind: "Field",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "name"
                                                                                                        },
                                                                                                        arguments: [],
                                                                                                        directives: []
                                                                                                    }, {
                                                                                                        kind: "Field",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "value"
                                                                                                        },
                                                                                                        arguments: [],
                                                                                                        directives: []
                                                                                                    }]
                                                                                                }
                                                                                            }]
                                                                                        }
                                                                                    }, {
                                                                                        kind: "InlineFragment",
                                                                                        typeCondition: {
                                                                                            kind: "NamedType",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "LoginLanding"
                                                                                            }
                                                                                        },
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "stub"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }]
                                                                                        }
                                                                                    }, {
                                                                                        kind: "InlineFragment",
                                                                                        typeCondition: {
                                                                                            kind: "NamedType",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "DeeplinkLanding"
                                                                                            }
                                                                                        },
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "urlPath"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "queryParams"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: {
                                                                                                    kind: "SelectionSet",
                                                                                                    selections: [{
                                                                                                        kind: "Field",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "name"
                                                                                                        },
                                                                                                        arguments: [],
                                                                                                        directives: []
                                                                                                    }, {
                                                                                                        kind: "Field",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "value"
                                                                                                        },
                                                                                                        arguments: [],
                                                                                                        directives: []
                                                                                                    }]
                                                                                                }
                                                                                            }]
                                                                                        }
                                                                                    }, {
                                                                                        kind: "InlineFragment",
                                                                                        typeCondition: {
                                                                                            kind: "NamedType",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "ResolvedLinkLanding"
                                                                                            }
                                                                                        },
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "url"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }]
                                                                                        }
                                                                                    }, {
                                                                                        kind: "InlineFragment",
                                                                                        typeCondition: {
                                                                                            kind: "NamedType",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "ScrollToAnchor"
                                                                                            }
                                                                                        },
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "anchor"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }]
                                                                                        }
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "ScrollToAnchor"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "anchor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], {
                        kind: "Document",
                        definitions: re([{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "StackedCardItem"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "MerchCarouselStackedItem"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "itemId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subtitle"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "extraSubtitle"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "price"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Price"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "targetLanding"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "SearchResultsLanding"
                                            },
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "ResolvedLinkLanding"
                                            },
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "DirectLinkLanding"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "image"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Image"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "filters"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Filter"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "reviewScore"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "ReviewScore"
                                            },
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }].concat(de, le, se, oe, ce, me, ue)),
                        loc: {
                            start: 0,
                            end: 394,
                            source: {
                                body: "\n  fragment StackedCardItem on MerchCarouselStackedItem {\n    itemId\n    title\n    subtitle\n    extraSubtitle\n    price {\n      ...Price\n    }\n    targetLanding {\n      ...SearchResultsLanding\n      ...ResolvedLinkLanding\n      ...DirectLinkLanding\n    }\n    image {\n      ...Image\n    }\n    filters {\n      ...Filter\n    }\n    reviewScore {\n      ...ReviewScore\n    }\n  }\n  \n  \n  \n  \n  \n  \n  \n",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    }.definitions, {
                        kind: "Document",
                        definitions: re([{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "OverlayCardItem"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "MerchCarouselOverlayItem"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "itemId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subtitle"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "price"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Price"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "targetLanding"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "SearchResultsLanding"
                                            },
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "ResolvedLinkLanding"
                                            },
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "DirectLinkLanding"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "image"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Image"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "filters"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Filter"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "contextualInformation"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }].concat(de, le, se, oe, ce, me)),
                        loc: {
                            start: 0,
                            end: 354,
                            source: {
                                body: "\n  fragment OverlayCardItem on MerchCarouselOverlayItem {\n    itemId\n    title\n    subtitle\n    price {\n      ...Price\n    }\n    targetLanding {\n      ...SearchResultsLanding\n      ...ResolvedLinkLanding\n      ...DirectLinkLanding\n    }\n    image {\n      ...Image\n    }\n    filters {\n      ...Filter\n    }\n    contextualInformation\n  }\n  \n  \n  \n  \n  \n  \n",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    }.definitions, {
                        kind: "Document",
                        definitions: re([{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "PropertyCardItem"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "MerchCarouselWebPropertyStackedItem"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "itemId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subtitle"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "accommodationType"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "reviewScore"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "ReviewScore"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "rating"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Rating"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isPreferred"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isGenius"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "iconField1"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Icon"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "iconField2"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Icon"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "iconField3"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Icon"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "lastSeenIconField"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Icon"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "badges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "value"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "ariaLabel"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "badgeVariation"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "feature"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "roomType"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "featurePrefix"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "features"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "priceInfo"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "regularPrice"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "Price"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "strikeThroughPrice"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "Price"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "pricingPolicies"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "value"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "prefixPriceText"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "suffixPriceText"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "targetLanding"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "SearchResultsLanding"
                                            },
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "ResolvedLinkLanding"
                                            },
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "DirectLinkLanding"
                                            },
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "PropertyPageLanding"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "image"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "Image"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "urgencyText"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "numOfWishlists"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "shouldFetchNumOfWishlists"
                                                }
                                            }
                                        }]
                                    }]
                                }]
                            }
                        }].concat(ue, {
                            kind: "Document",
                            definitions: re([{
                                kind: "FragmentDefinition",
                                name: {
                                    kind: "Name",
                                    value: "Rating"
                                },
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "MerchCarouselRating"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "value"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "symbol"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "popOverContent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "popOverContentCtaText"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "popOverContentCtaUrl"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "SearchResultsLanding"
                                                },
                                                directives: []
                                            }, {
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "ResolvedLinkLanding"
                                                },
                                                directives: []
                                            }, {
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "DirectLinkLanding"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }].concat(le, se, oe)),
                            loc: {
                                start: 0,
                                end: 242,
                                source: {
                                    body: "\n  fragment Rating on MerchCarouselRating {\n    value\n    symbol\n    popOverContent\n    popOverContentCtaText\n    popOverContentCtaUrl {\n      ...SearchResultsLanding\n      ...ResolvedLinkLanding\n      ...DirectLinkLanding\n    }\n  }\n  \n  \n  \n",
                                    name: "GraphQL request",
                                    locationOffset: {
                                        line: 1,
                                        column: 1
                                    }
                                }
                            }
                        }.definitions, [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "Icon"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "MerchCarouselIconField"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "icon"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "value"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }], de, le, se, oe, [{
                            kind: "FragmentDefinition",
                            name: {
                                kind: "Name",
                                value: "PropertyPageLanding"
                            },
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "PropertyPageLanding"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "checkin"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "checkout"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "childrenAges"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "countryCode"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "lang"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "nrAdults"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "nrChildren"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "nrRooms"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "pageName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "urlParams"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "value"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }], ce)),
                        loc: {
                            start: 0,
                            end: 1019,
                            source: {
                                body: "\n  fragment PropertyCardItem on MerchCarouselWebPropertyStackedItem {\n    itemId\n    title\n    subtitle\n    accommodationType\n    reviewScore {\n      ...ReviewScore\n    }\n    rating {\n      ...Rating\n    }\n    isPreferred\n    isGenius\n    iconField1 {\n      ...Icon\n    }\n    iconField2 {\n      ...Icon\n    }\n    iconField3 {\n      ...Icon\n    }\n    lastSeenIconField {\n      ...Icon\n    }\n    badges {\n      value\n      ariaLabel\n      badgeVariation\n    }\n    feature {\n      roomType\n      featurePrefix\n      features\n    }\n    priceInfo {\n      regularPrice {\n        ...Price\n      }\n      strikeThroughPrice {\n        ...Price\n      }\n      pricingPolicies {\n        value\n      }\n      prefixPriceText\n      suffixPriceText\n    }\n    targetLanding {\n      ...SearchResultsLanding\n      ...ResolvedLinkLanding\n      ...DirectLinkLanding\n      ...PropertyPageLanding\n    }\n    image {\n      ...Image\n    }\n    urgencyText\n    numOfWishlists @include(if: $shouldFetchNumOfWishlists)\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n",
                                name: "GraphQL request",
                                locationOffset: {
                                    line: 1,
                                    column: 1
                                }
                            }
                        }
                    }.definitions)),
                    loc: {
                        start: 0,
                        end: 1767,
                        source: {
                            body: "\n  fragment MerchCarouselDesignVariantFragment on MerchCarousel {\n    designVariant {\n      ... on DesktopCarouselStackedCards {\n        heading\n        subHeading\n        priceText\n        cardType\n        carouselLayout\n        aspectRatio\n        carouselCta {\n          ...MerchCarouselCTAFragment\n        }\n        items {\n          ...StackedCardItem\n        }\n      }\n      ... on MdotCarouselStackedCards {\n        heading\n        subHeading\n        priceText\n        cardType\n        carouselLayout\n        aspectRatio\n        carouselCta {\n          ...MerchCarouselCTAFragment\n        }\n        items {\n          ...StackedCardItem\n        }\n      }\n      ... on DesktopCarouselOverlayCards {\n        heading\n        subHeading\n        priceText\n        cardType\n        carouselLayout\n        aspectRatio\n        carouselCta {\n          ...MerchCarouselCTAFragment\n        }\n        items {\n          ...OverlayCardItem\n        }\n      }\n      ... on MdotCarouselOverlayCards {\n        heading\n        subHeading\n        priceText\n        cardType\n        carouselLayout\n        aspectRatio\n        carouselCta {\n          ...MerchCarouselCTAFragment\n        }\n        items {\n          ...OverlayCardItem\n        }\n      }\n      ... on DesktopCarouselPropertyCards {\n        heading\n        subHeading\n        carouselLayout\n        aspectRatio\n        carouselCta {\n          ...MerchCarouselCTAFragment\n        }\n        items {\n          ...PropertyCardItem\n        }\n      }\n      ... on MdotCarouselPropertyCards {\n        heading\n        subHeading\n        carouselLayout\n        aspectRatio\n        carouselCta {\n          ...MerchCarouselCTAFragment\n        }\n        items {\n          ...PropertyCardItem\n        }\n      }\n    }\n  }\n  \n  \n  \n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };
            var ke = t("cedcabf9");
            const ge = {},
                pe = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "MerchComponentsData"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "MerchComponentsDataInput"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "imageWidth"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            },
                            defaultValue: {
                                kind: "IntValue",
                                value: "320"
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "imageHeight"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            },
                            defaultValue: {
                                kind: "IntValue",
                                value: "400"
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "shouldFetchNumOfWishlists"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            },
                            defaultValue: {
                                kind: "BooleanValue",
                                value: !1
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "merchComponentsData"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "input"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "components"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "MerchCarousel"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "carouselCampaignId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "heading"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "subHeading"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "filtersInfo"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "filters"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "__typename"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "MerchCarouselTabFilter"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "filterId"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "values"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "title"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "icon"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "isDefault"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isClientSideFiltering"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "MerchCarouselDesignVariantFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }].concat(ve.definitions)),
                    loc: {
                        start: 0,
                        end: 793,
                        source: {
                            body: "\n  query MerchComponentsData(\n    $input: MerchComponentsDataInput\n    $imageWidth: Int = 320\n    $imageHeight: Int = 400\n    $shouldFetchNumOfWishlists: Boolean = false\n  ) {\n    merchComponentsData(input: $input) {\n      components {\n        __typename\n        ... on MerchCarousel {\n          carouselCampaignId\n          heading\n          subHeading\n          filtersInfo {\n            filters {\n              __typename\n              ... on MerchCarouselTabFilter {\n                filterId\n                values {\n                  value\n                  title\n                  icon\n                  isDefault\n                }\n              }\n            }\n            isClientSideFiltering\n          }\n          ...MerchCarouselDesignVariantFragment\n        }\n      }\n    }\n  }\n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };
            var _e = t("2bb3685b"),
                Se = t("4933a3e7"),
                he = t("5db8920d");

            function Ne(e) {
                var n;
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                    i = arguments.length > 2 ? arguments[2] : void 0,
                    r = arguments.length > 3 ? arguments[3] : void 0,
                    d = arguments.length > 4 ? arguments[4] : void 0,
                    l = arguments.length > 5 ? arguments[5] : void 0,
                    s = arguments.length > 6 ? arguments[6] : void 0,
                    o = arguments.length > 7 ? arguments[7] : void 0;
                const c = {
                        input: {
                            testCampaignIds: (0, R.getRequestContext)().getBasePageUrl().searchParams.getAll(_e.nh),
                            campaignIds: [e],
                            carouselInput: {
                                campaignInput: [{
                                    campaignId: e,
                                    parameters: i
                                }]
                            },
                            ...r && {
                                pageInput: {
                                    searchResultsPageInput: r
                                }
                            }
                        },
                        shouldFetchNumOfWishlists: o ? ? !1
                    },
                    m = (0, F.useI18n)(),
                    [u, {
                        loading: v,
                        data: k,
                        error: g
                    }] = function(e) {
                        const n = { ...ge,
                            ...e
                        };
                        return ke.useLazyQuery(pe, n)
                    }({
                        context: {
                            headers: { ...(0, he.l)(!1, l)
                            }
                        },
                        variables: c
                    });
                (0, a.useEffect)((() => {
                    !t && u()
                }), [u, t]), g && ((0, Se.z)(g), (0, b.reportError)(g), s && s(g));
                const p = null === k || void 0 === k || null === (n = k.merchComponentsData) || void 0 === n || null === (n = n.components) || void 0 === n ? void 0 : n.find((n => "MerchCarousel" === n.__typename && n.carouselCampaignId === e));
                return ae({
                    carouselData: p,
                    isLoading: v,
                    i18n: m,
                    regionId: d,
                    shouldRenderWishlistWidget: o
                })
            }
            const Ee = e => {
                let {
                    campaignName: n,
                    campaignParameters: t,
                    isEligibleToRender: a,
                    searchResultsPageInput: l,
                    regionId: s,
                    shouldRenderWishlistWidget: o
                } = e;
                const c = (0, d.W)(n),
                    m = Ne(c.campaignId, !a, t, l, s, c.timeout, c.onCarouselDataError, o);
                return a ? r().createElement(I, (0, i.Z)({}, m, c)) : null
            }
        },
        "0fc8afc9": (e, n, t) => {
            "use strict";
            t.d(n, {
                et: () => Y
            });
            var i = t("43a4d203"),
                a = t("dc6d28ff"),
                r = t("239beb17"),
                d = t("41c6c66e"),
                l = t("017725b3");
            l.pNy.ECONOMY;
            var s = t("d1e54a96");
            const o = () => {
                    const e = "prod" === (0, a.getRequestContext)().getBPlatformEnvironment();
                    return {
                        flightsHostname: e ? "flights.booking.com" : "flights.dqs.booking.com",
                        flightsSearchAutocompleteBaseUrl: e ? "https://flights.booking.com" : "https://flights.dqs.booking.com"
                    }
                },
                c = "ViewFlight",
                m = "Anywhere",
                u = (e, n, t, i, r, l) => {
                    let u;
                    const v = (0, a.getRequestContext)(),
                        k = v.getAffiliate();
                    null !== k && void 0 !== k && k.id || ((0, d.reportWarning)("Flights LP: adding default aid as there was no aid present"), i.set("aid", "304142"));
                    const g = t.includes("COUNTRY"),
                        p = t.includes(m);
                    if (p && (i.set("to", m), i.set("toCountryCode", m)), g) {
                        const e = t.split(".")[0];
                        i.set("toCountryCode", e), i.set("to", t)
                    }
                    return p || g ? (l && i.set("ca_source", l), u = (0, s.constructUrl)({
                        pathname: "fly-anywhere/",
                        searchParams: i
                    })) : u = e === c ? (0, s.constructUrl)({
                        pathname: `flights/${n}-${t}/${r}/`,
                        searchParams: i
                    }) : (0, s.constructUrl)({
                        pathname: `flights/${n}-${t}/`,
                        searchParams: i
                    }), v.isRobotRequest() && function(e, n) {
                        const t = new Set;
                        null === n || void 0 === n || n.forEach((function(n, i) {
                            t.has(i) ? e.append(i, n) : (e.set(i, n), t.add(i))
                        }))
                    }(u.searchParams, i), u.host = o().flightsHostname, u.port = "", u.toString()
                };
            var v = t("28dbd132"),
                k = t("dd6086f7"),
                g = t("2db41414"),
                p = t("b7559b80"),
                _ = t("2e53aec9"),
                S = t("eef1968a"),
                h = t("11a12aca");
            const N = "https://paste.booking.com/data/images/g/gvgokh.gif",
                E = (e, n) => e.cards.flatMap((e => f(e, n))).filter((e => L(e))),
                f = (e, n) => {
                    var t, i;
                    const a = e.searchHistoryItem;
                    if (!a) return [];
                    const r = A(a),
                        d = P(a),
                        s = (null === (t = a.destinations) || void 0 === t || null === (t = t[0]) || void 0 === t ? void 0 : t.type) ? ? l.z5K.CITY,
                        {
                            subTitle: o,
                            groupOccupancy: c
                        } = I(e.uxLabels || []);
                    return [{
                        id: a.originalId,
                        vertical: a.vertical,
                        title: r,
                        subTitle: o,
                        groupComposition: c,
                        createdAt: a.createdAt,
                        flightsInfo: d,
                        searchParams: a.searchParams ? ? "",
                        img: {
                            src: n({
                                destType: s,
                                imageUrl: null === a || void 0 === a || null === (i = a.mainImage) || void 0 === i ? void 0 : i.genericUrl
                            })
                        },
                        countryCode: (null === a || void 0 === a ? void 0 : a.countryCode) ? ? "",
                        aspectRatio: h.Lz["1:1"],
                        url: C(a, d)
                    }]
                },
                C = (e, n) => e.vertical === l.ICm.FLIGHTS ? w(e, n) : M(e),
                T = e => {
                    var n;
                    return (null === e || void 0 === e || null === (n = e[0]) || void 0 === n || null === (n = n.uxLabels) || void 0 === n || null === (n = n.find((e => "title" === (null === e || void 0 === e ? void 0 : e.name)))) || void 0 === n ? void 0 : n.value) ? ? ""
                },
                I = e => {
                    var n;
                    if ((0, _.bZ)()) {
                        var t, i;
                        return {
                            subTitle: (null === e || void 0 === e || null === (t = e.find((e => "subtitle_dates" === (null === e || void 0 === e ? void 0 : e.name)))) || void 0 === t ? void 0 : t.value) ? ? "",
                            groupOccupancy: (null === e || void 0 === e || null === (i = e.find((e => "subtitle_occupancy" === (null === e || void 0 === e ? void 0 : e.name)))) || void 0 === i ? void 0 : i.value) ? ? ""
                        }
                    }
                    return {
                        subTitle: (null === e || void 0 === e || null === (n = e.find((e => "subtitle" === (null === e || void 0 === e ? void 0 : e.name)))) || void 0 === n ? void 0 : n.value) ? ? "",
                        groupOccupancy: ""
                    }
                },
                R = e => {
                    var n, t;
                    const i = (0, _.bZ)(),
                        a = (null === e || void 0 === e || null === (n = e.recommendationPlatform) || void 0 === n || null === (n = n.flightsRecommendations) || void 0 === n ? void 0 : n.recommendations) || [],
                        r = (null === e || void 0 === e || null === (t = e.recommendationPlatform) || void 0 === t || null === (t = t.staysRecommendations) || void 0 === t ? void 0 : t.recommendations) || [],
                        d = O(r),
                        l = a.length > 0;
                    return i && l ? {
                        recentSearches: [...r, ...a],
                        lastSearch: d,
                        hasFlightsData: l
                    } : {
                        recentSearches: r,
                        lastSearch: d,
                        hasFlightsData: l
                    }
                },
                b = () => {
                    const e = (0, a.getRequestContext)().getCDNOrigin(),
                        n = (0, _.bZ)() ? "256x256" : "64x64";
                    return t => {
                        const i = (t ? (0, g.Z)(t, n, e) : N) ? ? N;
                        return i === N && (0, p.qe)(), i
                    }
                },
                F = () => {
                    const e = b();
                    return n => (null === n || void 0 === n ? void 0 : n.destType) === l.z5K.AIRPORT ? "https://paste.booking.com/data/images/e/e7uinl.jpg" : e(null === n || void 0 === n ? void 0 : n.imageUrl)
                },
                y = () => {
                    var e;
                    const n = (0, a.getRequestContext)(),
                        t = n.getSiteType() === i.SiteType.MDOT,
                        r = "tablet" === (null === (e = n.getUserAgent()) || void 0 === e ? void 0 : e.deviceType);
                    return t && !r ? h.B.MEDIUM : h.B.LARGE
                },
                P = e => {
                    var n, t;
                    if (e.vertical !== l.ICm.FLIGHTS) return;
                    const i = null === e || void 0 === e || null === (n = e.origins) || void 0 === n ? void 0 : n[0],
                        a = null === e || void 0 === e || null === (t = e.destinations) || void 0 === t ? void 0 : t[0];
                    return i && a && null !== i && void 0 !== i && i.id && null !== a && void 0 !== a && a.id && null !== i && void 0 !== i && i.name && null !== a && void 0 !== a && a.name ? {
                        isRoundTrip: "ROUNDTRIP" === (null === e || void 0 === e ? void 0 : e.type),
                        origin: {
                            title: null === i || void 0 === i ? void 0 : i.name,
                            airports: null === i || void 0 === i ? void 0 : i.id,
                            type: l.z5K.AIRPORT
                        },
                        destination: {
                            title: null === a || void 0 === a ? void 0 : a.name,
                            airports: null === a || void 0 === a ? void 0 : a.id,
                            type: l.z5K.AIRPORT
                        }
                    } : void 0
                },
                A = e => {
                    var n;
                    return e.vertical !== l.ICm.STAYS ? "" : (null === (n = e.destinations) || void 0 === n || null === (n = n[0]) || void 0 === n ? void 0 : n.name) ? ? ""
                },
                O = e => {
                    var n, t, i, a, r, d, l;
                    if (!e || 0 === e.length) return;
                    const s = e[0].cards;
                    if (!s || 0 === s.length) return;
                    const o = s[0].searchHistoryItem;
                    return o ? {
                        checkin: null === o || void 0 === o || null === (n = o.bookingWindow) || void 0 === n ? void 0 : n.checkinDate,
                        checkout: null === o || void 0 === o || null === (t = o.bookingWindow) || void 0 === t ? void 0 : t.checkoutDate,
                        nbAdults: null === o || void 0 === o || null === (i = o.guests) || void 0 === i ? void 0 : i.adults,
                        nbChildren: (null === o || void 0 === o || null === (a = o.guests) || void 0 === a || null === (a = a.children) || void 0 === a ? void 0 : a.length) ? ? 0,
                        nbRooms: null === o || void 0 === o || null === (r = o.rooms) || void 0 === r ? void 0 : r.total,
                        childrenAges: null === o || void 0 === o || null === (d = o.guests) || void 0 === d ? void 0 : d.children,
                        destType: null === o || void 0 === o || null === (l = o.destinations) || void 0 === l || null === (l = l[0]) || void 0 === l ? void 0 : l.type,
                        createdAt: null === o || void 0 === o ? void 0 : o.createdAt
                    } : void 0
                },
                w = (e, n) => {
                    var t;
                    if (!n) return "";
                    const i = new URLSearchParams;
                    null === (t = e.searchParams) || void 0 === t || t.split("&").forEach((e => {
                        const [n, t] = e.split("=");
                        i.set(n, t)
                    })), i.set("locale", (0, a.getRequestContext)().getLanguage()), i.set("sort", "BEST"), i.set("showLoader", "1"), i.set("cabinClass", "ECONOMY");
                    const r = n.origin.airports.replace(/,/g, "_"),
                        d = n.destination.airports.replace(/,/g, "_");
                    return u("SearchResults", `${r}.${n.origin.type}`, `${d}.${n.destination.type}`, i, void 0, void 0)
                },
                M = e => {
                    var n, t, i, a, r, d, l, s, o, c;
                    const m = (null === (n = e.guests) || void 0 === n || null === (n = n.children) || void 0 === n ? void 0 : n.filter((e => "number" === typeof e))) || [];
                    return (0, k.d)({
                        checkin: null === (t = e.bookingWindow) || void 0 === t ? void 0 : t.checkinDate,
                        checkout: null === (i = e.bookingWindow) || void 0 === i ? void 0 : i.checkoutDate,
                        nbAdults: null === (a = e.guests) || void 0 === a ? void 0 : a.adults,
                        nbChildren: null === (r = e.guests) || void 0 === r || null === (r = r.children) || void 0 === r ? void 0 : r.length,
                        nbRooms: null === (d = e.rooms) || void 0 === d ? void 0 : d.total,
                        childrenAges: m,
                        destId: null !== (l = e.destinations) && void 0 !== l && null !== (l = l[0]) && void 0 !== l && l.id ? parseInt(null === (s = e.destinations) || void 0 === s || null === (s = s[0]) || void 0 === s ? void 0 : s.id, 10) : void 0,
                        destType: null === (o = e.destinations) || void 0 === o || null === (o = o[0]) || void 0 === o ? void 0 : o.type,
                        highlightedPropertyId: null !== (c = e.highlightedProducts) && void 0 !== c && c[0] ? parseInt(e.highlightedProducts[0]) : void 0,
                        sorter: e.order ? ? "popularity",
                        selectedFilters: void 0
                    }).toString()
                },
                L = e => !!e.subTitle && (!(e.vertical === l.ICm.STAYS && !e.title) && !(e.vertical === l.ICm.FLIGHTS && (!e.flightsInfo || !e.groupComposition))),
                x = e => e.sort(((e, n) => e.createdAt && n.createdAt ? n.createdAt - e.createdAt : 0));
            var B = t("cedcabf9");
            const D = {},
                H = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "RecentSearchesCarousel"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "staysRecommendationInput"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "RecommendationElementCardsInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "flightsRecommendationInput"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "RecommendationElementCardsInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "includeRecommendations"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "includeFlights"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "recommendationPlatform"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "includeRecommendations"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: {
                                            kind: "Name",
                                            value: "staysRecommendations"
                                        },
                                        name: {
                                            kind: "Name",
                                            value: "recommendationElementCards"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "input"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "staysRecommendationInput"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recommendations"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "uxLabels"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "value"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cards"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "searchHistoryItem"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "originalId"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "vertical"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "destinations"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "type"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "countryCode"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "countryName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "highlightedProducts"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "searchParams"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "order"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "bookingWindow"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkinDate"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkoutDate"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "guests"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "adults"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "children"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "mainImage"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "genericUrl"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "rooms"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "total"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "createdAt"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "uxLabels"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "value"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: {
                                            kind: "Name",
                                            value: "flightsRecommendations"
                                        },
                                        name: {
                                            kind: "Name",
                                            value: "recommendationElementCards"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "input"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "flightsRecommendationInput"
                                                }
                                            }
                                        }],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "includeFlights"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recommendations"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "uxLabels"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "value"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cards"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "searchHistoryItem"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "originalId"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "vertical"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "createdAt"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "type"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "origins"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "type"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "destinations"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "type"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "bookingWindow"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkinDate"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkoutDate"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "guests"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "adults"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "children"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "searchParams"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "uxLabels"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "value"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "recentSearches"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "skip"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "includeRecommendations"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "campaignId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "carouselName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "searches"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subtitle"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subtitle2"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "numFilters"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "destType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "destId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "countryCode"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbRooms"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkin"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "checkout"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbAdults"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nbChildren"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "childrenAges"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "imageUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "highlightedHotel"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "order"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nflt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "previousSearchId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "filters"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "value"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "createdAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 2786,
                        source: {
                            body: "\n  query RecentSearchesCarousel(\n    $staysRecommendationInput: RecommendationElementCardsInput!\n    $flightsRecommendationInput: RecommendationElementCardsInput!\n    $includeRecommendations: Boolean!\n    $includeFlights: Boolean!\n  ) {\n    recommendationPlatform @include(if: $includeRecommendations) {\n      staysRecommendations: recommendationElementCards(\n        input: $staysRecommendationInput\n      ) {\n        recommendations {\n          uxLabels {\n            name\n            value\n          }\n          cards {\n            searchHistoryItem {\n              originalId\n              vertical\n              destinations {\n                id\n                name\n                type\n              }\n              countryCode\n              countryName\n              highlightedProducts\n              searchParams\n              order\n              bookingWindow {\n                checkinDate\n                checkoutDate\n              }\n              guests {\n                adults\n                children\n              }\n              mainImage {\n                genericUrl\n                id\n              }\n              rooms {\n                total\n              }\n              createdAt\n            }\n            uxLabels {\n              name\n              value\n            }\n          }\n        }\n      }\n      flightsRecommendations: recommendationElementCards(\n        input: $flightsRecommendationInput\n      ) @include(if: $includeFlights) {\n        recommendations {\n          uxLabels {\n            name\n            value\n          }\n          cards {\n            searchHistoryItem {\n              originalId\n              vertical\n              createdAt\n              type\n              origins {\n                id\n                name\n                type\n              }\n              destinations {\n                id\n                name\n                type\n              }\n              bookingWindow {\n                checkinDate\n                checkoutDate\n              }\n              guests {\n                adults\n                children\n              }\n              searchParams\n            }\n            uxLabels {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n    recentSearches @skip(if: $includeRecommendations) {\n      campaignId\n      carouselName\n      title\n      searches {\n        title\n        subtitle\n        subtitle2\n        numFilters\n        destType\n        destId\n        countryCode\n        nbRooms\n        checkin\n        checkout\n        nbAdults\n        nbChildren\n        childrenAges\n        imageUrl\n        highlightedHotel\n        order\n        nflt\n        previousSearchId\n        filters {\n          name\n          value\n        }\n        createdAt\n      }\n    }\n  }\n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };
            var V = t("e36d8828");
            const G = {
                    source: "index",
                    medium: "web",
                    campaign: "recent_searches_carousel"
                },
                W = function() {
                    const e = !!(!(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]) && (0, p.Hg)(),
                        n = (0, r.isFeatureRunning)(r.feature `OABBaJePefWJaWQOcPIQDNYRMeRT`),
                        t = (0, a.getRequestContext)().getSiteType() === i.SiteType.MDOT;
                    return {
                        staysRecommendationInput: {
                            useCase: t ? "mvsf_mdot_stays_recent_searches" : "mvsf_www_stays_recent_searches",
                            strategyIds: ["901"],
                            tracking: G,
                            pagination: {
                                limit: 10
                            }
                        },
                        flightsRecommendationInput: {
                            useCase: t ? "mvsf_mdot_flights_recent_searches" : "mvsf_www_flights_recent_searches",
                            strategyIds: ["902"],
                            tracking: G,
                            pagination: {
                                limit: 10
                            }
                        },
                        includeRecommendations: e,
                        includeFlights: n
                    }
                },
                Y = () => {
                    const e = U(),
                        {
                            loading: n,
                            data: t,
                            error: r
                        } = function(e) {
                            const n = { ...D,
                                ...e
                            };
                            return B.useQuery(H, n)
                        }({
                            variables: W(),
                            skip: e,
                            fetchPolicy: "cache-first",
                            errorPolicy: "all"
                        });
                    return n || t || e || (0, d.reportWarning)("No result for recent searches data query"), r && (0, d.reportError)(r), (0, p.Hg)() ? (e => {
                        let {
                            carouselDML: n,
                            isLoading: t
                        } = e;
                        const r = (0, a.getRequestContext)().getSiteType() === i.SiteType.MDOT,
                            {
                                recentSearches: d,
                                lastSearch: l,
                                hasFlightsData: s
                            } = R(n),
                            o = T(d),
                            c = F(),
                            m = d.flatMap((e => E(e, c)));
                        return {
                            isLoading: t,
                            items: s ? x(m) : m,
                            heading: o,
                            size: y(),
                            isMdot: r,
                            componentId: "4d22cffe-4332-4c0e-ba0e-656240f7ebd8",
                            carouselName: "recent_searches_carousel",
                            hasFlightsData: s,
                            lastSearch: l
                        }
                    })({
                        carouselDML: t,
                        isLoading: n
                    }) : (e => {
                        let {
                            carouselDML: n,
                            isLoading: t
                        } = e;
                        const r = (0, a.getRequestContext)().getSiteType() === i.SiteType.MDOT,
                            d = F(),
                            s = null === n || void 0 === n ? void 0 : n.recentSearches,
                            o = null === s || void 0 === s ? void 0 : s.searches,
                            c = null === s || void 0 === s ? void 0 : s.title,
                            m = [],
                            u = (0, v.trackExperiment)((0, S.uE)());
                        return null === o || void 0 === o || o.forEach((e => {
                            m.push({
                                id: String(e.previousSearchId),
                                title: e.title,
                                subTitle: e.subtitle,
                                vertical: l.ICm.STAYS,
                                createdAt: e.createdAt,
                                groupComposition: e.subtitle2 || "",
                                numFilters: e.numFilters ? ? "",
                                searchParams: u > 0 && e.nflt || void 0,
                                img: {
                                    src: d(e)
                                },
                                countryCode: e.countryCode || "",
                                aspectRatio: h.Lz["1:1"],
                                url: (0, k.d)({
                                    checkin: e.checkin,
                                    checkout: e.checkout,
                                    nbAdults: e.nbAdults,
                                    nbChildren: e.nbChildren,
                                    nbRooms: e.nbRooms,
                                    childrenAges: e.childrenAges,
                                    destId: e.destId,
                                    destType: e.destType,
                                    highlightedPropertyId: e.highlightedHotel,
                                    sorter: e.order,
                                    selectedFilters: u > 0 ? e.nflt : void 0,
                                    previousSearchId: e.previousSearchId
                                }).toString()
                            })
                        })), {
                            isLoading: t,
                            items: m.length ? m : void 0,
                            heading: c || "",
                            size: y(),
                            isMdot: r,
                            componentId: (null === s || void 0 === s ? void 0 : s.campaignId) || "",
                            carouselName: (null === s || void 0 === s ? void 0 : s.carouselName) || "",
                            lastSearch: o && (null === o || void 0 === o ? void 0 : o.length) > 0 ? o[0] : void 0
                        }
                    })({
                        carouselDML: t,
                        isLoading: n
                    })
                },
                U = () => !(!(0, p.Hg)() || (0, V.CR)())
        },
        b7559b80: (e, n, t) => {
            "use strict";
            t.d(n, {
                DZ: () => c,
                Hg: () => s,
                OE: () => o,
                qe: () => u
            });
            var i = t("af1e2b38"),
                a = t("28dbd132");
            let r = function(e) {
                    return e[e.ON_RENDER = 1] = "ON_RENDER", e[e.ON_VIEW = 2] = "ON_VIEW", e[e.ON_VIEW_WWW = 3] = "ON_VIEW_WWW", e[e.ON_VIEW_MDOT = 4] = "ON_VIEW_MDOT", e[e.ON_VIEW_ANON = 5] = "ON_VIEW_ANON", e[e.ON_VIEW_GENIUS = 6] = "ON_VIEW_GENIUS", e[e.ON_VIEW_RS_1_3 = 7] = "ON_VIEW_RS_1_3", e[e.ON_VIEW_RS_4_PLUS = 8] = "ON_VIEW_RS_4_PLUS", e
                }({}),
                d = function(e) {
                    return e[e.ONE_RS = 1] = "ONE_RS", e[e.TWO_RS = 2] = "TWO_RS", e[e.THREE_RS = 3] = "THREE_RS", e[e.FOUR_PLUS_RS = 4] = "FOUR_PLUS_RS", e[e.MISSING_IMAGE = 5] = "MISSING_IMAGE", e
                }({});
            const l = () => a.exp `OABBaJXCeZVGFTSJXZUKe`,
                s = () => 1 === (0, a.trackExperiment)(l()),
                o = () => {
                    const e = l();
                    (0, a.trackExperimentStage)(e, r.ON_RENDER)
                },
                c = (e, n, t) => {
                    const d = l();
                    (0, a.trackExperimentStage)(d, r.ON_VIEW), m(n), t === i.NM.MDOT ? (0, a.trackExperimentStage)(d, r.ON_VIEW_MDOT) : (0, a.trackExperimentStage)(d, r.ON_VIEW_WWW), n > 0 && n < 4 && (0, a.trackExperimentStage)(d, r.ON_VIEW_RS_1_3), n >= 4 && (0, a.trackExperimentStage)(d, r.ON_VIEW_RS_4_PLUS), e ? (0, a.trackExperimentStage)(d, r.ON_VIEW_GENIUS) : (0, a.trackExperimentStage)(d, r.ON_VIEW_ANON)
                },
                m = e => {
                    const n = l();
                    1 === e ? (0, a.trackCustomGoal)(n, d.ONE_RS) : 2 === e ? (0, a.trackCustomGoal)(n, d.TWO_RS) : 3 === e ? (0, a.trackCustomGoal)(n, d.THREE_RS) : e > 3 && (0, a.trackCustomGoal)(n, d.FOUR_PLUS_RS)
                },
                u = () => {
                    const e = l();
                    (0, a.trackCustomGoal)(e, d.MISSING_IMAGE)
                }
        },
        "2e53aec9": (e, n, t) => {
            "use strict";
            t.d(n, {
                Xt: () => m,
                bZ: () => o,
                kd: () => c
            });
            var i = t("af1e2b38"),
                a = t("dc6d28ff"),
                r = t("28dbd132");
            let d = function(e) {
                    return e[e.RS_ONRENDER = 1] = "RS_ONRENDER", e[e.RS_ONRENDER_WITH_FLIGHTS = 2] = "RS_ONRENDER_WITH_FLIGHTS", e[e.RS_ONVIEW = 3] = "RS_ONVIEW", e
                }({}),
                l = function(e) {
                    return e[e.FLIGHT_CARD_CLICK = 1] = "FLIGHT_CARD_CLICK", e
                }({});
            const s = e => e === i.NM.MDOT ? r.exp `OABBaJePeaXTeEWGHWYWCGTLBBVYYT` : r.exp `OABBaJePeaXTeEWGHWYWCGTQLOLOLMO`,
                o = () => (e => (0, r.trackExperiment)(s(e)))((0, a.getRequestContext)().getSiteType() || i.NM.WWW) >= 1,
                c = function() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    const n = (0, a.getRequestContext)().getSiteType() || i.NM.WWW,
                        t = s(n);
                    (0, r.trackExperimentStage)(t, d.RS_ONRENDER), e && (0, r.trackExperimentStage)(t, d.RS_ONRENDER_WITH_FLIGHTS)
                },
                m = () => {
                    const e = (0, a.getRequestContext)().getSiteType() || i.NM.WWW,
                        n = s(e);
                    (0, r.trackCustomGoal)(n, l.FLIGHT_CARD_CLICK)
                }
        },
        eef1968a: (e, n, t) => {
            "use strict";
            t.d(n, {
                $_: () => c,
                uE: () => o,
                yY: () => m
            });
            var i = t("af1e2b38"),
                a = t("28dbd132");
            let r = function(e) {
                    return e[e.ON_VIEW = 1] = "ON_VIEW", e[e.ON_VIEW_ANON = 2] = "ON_VIEW_ANON", e[e.ON_VIEW_GENIUS = 3] = "ON_VIEW_GENIUS", e[e.ON_VIEW_RS_1_3 = 4] = "ON_VIEW_RS_1_3", e[e.ON_VIEW_RS_4_PLUS = 5] = "ON_VIEW_RS_4_PLUS", e[e.ON_VIEW_US_VISITOR = 6] = "ON_VIEW_US_VISITOR", e
                }({}),
                d = function(e) {
                    return e[e.ON_CLICK_WITH_FILTER = 1] = "ON_CLICK_WITH_FILTER", e
                }({});
            const l = a.exp `cCHObKdPHMXCeZVWQIORe`,
                s = a.exp `cCHObKdPHMXCeZVWQIOLBBVYYT`,
                o = () => (0, i.sv)() === i.NM.MDOT ? s : l,
                c = ((0, a.trackExperiment)(o()), (e, n, t) => {
                    const i = o();
                    (0, a.trackExperimentStage)(i, r.ON_VIEW), t > 0 && t < 4 && (0, a.trackExperimentStage)(i, r.ON_VIEW_RS_1_3), t >= 4 && (0, a.trackExperimentStage)(i, r.ON_VIEW_RS_4_PLUS), n && (0, a.trackExperimentStage)(i, r.ON_VIEW_US_VISITOR), e ? (0, a.trackExperimentStage)(i, r.ON_VIEW_GENIUS) : (0, a.trackExperimentStage)(i, r.ON_VIEW_ANON)
                }),
                m = () => {
                    const e = o();
                    (0, a.trackCustomGoal)(e, d.ON_CLICK_WITH_FILTER)
                }
        },
        "11a12aca": (e, n, t) => {
            "use strict";
            t.d(n, {
                B: () => a,
                Lz: () => i,
                fE: () => r
            });
            let i = function(e) {
                    return e["5:4"] = "5:4", e["1:1"] = "1:1", e["3:4"] = "3:4", e["3:2"] = "3:2", e["2:3"] = "2:3", e["4:3"] = "4:3", e["2:1"] = "2:1", e["16:9"] = "16:9", e["21:9"] = "21:9", e["4:5"] = "4:5", e["9:16"] = "9:16", e
                }({}),
                a = function(e) {
                    return e.SMALL = "small", e.MEDIUM = "medium", e.LARGE = "large", e.LARGER = "larger", e.LARGEST = "largest", e
                }({}),
                r = function(e) {
                    return e.Left = "left", e.Right = "right", e
                }({})
        },
        "148bb00d": (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => m
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("dc6d28ff"),
                d = t("52ffbfd1"),
                l = t("2ea30c97"),
                s = t("36c60bcb"),
                o = t("fb62a8c9"),
                c = t("dc9c2eaa");
            const m = () => {
                const e = "MDOT" === (0, r.getRequestContext)().getSiteType() ? o._.TripTypesMdot : o._.TripTypesWww,
                    n = (0, s.W)(e),
                    t = (0, l.Z)(n.campaignId, !1),
                    i = a().createElement(c.Z, {
                        isEligibleToRender: t,
                        campaignName: e
                    });
                return (0, d.Y$)() ? a().createElement("div", {
                    className: "trip-types-carousel-more-workaround keep"
                }, i) : i
            }
        },
        "19e7f7bf": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => r
            });
            var i = t("d16e9636"),
                a = t.n(i);
            const r = (0, i.loadable)({
                resolved: {},
                chunkName() {
                    return "bIndexLpWebMfe-GenericCarouselComponent"
                },
                isReady(e) {
                    const n = this.resolve(e);
                    return !0 === this.resolved[n] && !!t.m[n]
                },
                importAsync: () => t.e("782ad794").then(t.bind(t, "3b265b07")),
                requireAsync(e) {
                    const n = this.resolve(e);
                    return this.resolved[n] = !1, this.importAsync(e).then((e => (this.resolved[n] = !0, e)))
                },
                requireSync(e) {
                    const n = this.resolve(e);
                    return t(n)
                },
                resolve() {
                    return "3b265b07"
                }
            })
        },
        "23b1c2ae": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => i
            });
            const i = t("19e7f7bf").Z
        },
        "427ac7ba": (e, n, t) => {
            "use strict";
            t.d(n, {
                e: () => s
            });
            var i = t("ead71eb0"),
                a = t.n(i),
                r = t("d16e9636"),
                d = t.n(r);
            const l = (0, r.loadable)({
                    resolved: {},
                    chunkName() {
                        return "bWishlistWishlistCs-WishlistWidgetIndex"
                    },
                    isReady(e) {
                        const n = this.resolve(e);
                        return !0 === this.resolved[n] && !!t.m[n]
                    },
                    importAsync: () => t.e("18232cf9").then(t.t.bind(t, "de4adc7c", 23)),
                    requireAsync(e) {
                        const n = this.resolve(e);
                        return this.resolved[n] = !1, this.importAsync(e).then((e => (this.resolved[n] = !0, e)))
                    },
                    requireSync(e) {
                        const n = this.resolve(e);
                        return t(n)
                    },
                    resolve() {
                        return "de4adc7c"
                    }
                }),
                s = (e, n, t) => a().createElement(l, {
                    property: e,
                    nbWishlists: n,
                    containerRef: t
                })
        },
        "52ffbfd1": (e, n, t) => {
            "use strict";
            t.d(n, {
                Bb: () => v,
                W$: () => l,
                XA: () => o,
                Y$: () => s,
                _0: () => u,
                zz: () => m
            });
            var i = t("af1e2b38"),
                a = t("28dbd132");
            const r = a.exp `OABBaJcBHQQWcGHVHNEIMUKVBBVYYT`,
                d = a.exp `OABBaJcBHQQWcGHVHNEIMUKALOLOLMO`,
                l = () => (0, a.trackExperiment)(r) > 0,
                s = () => (0, a.trackExperiment)(d) > 0,
                o = () => {
                    const {
                        isMDOT: e
                    } = (0, i.Z6)();
                    return e ? l() : s()
                },
                c = () => {
                    const {
                        isMDOT: e
                    } = (0, i.Z6)();
                    return e ? r : d
                },
                m = () => {
                    (0, a.trackCustomGoal)(c(), 1)
                },
                u = () => {
                    (0, a.trackCustomGoal)(c(), 2)
                },
                v = () => {
                    if ("undefined" === typeof window || "undefined" === typeof document) return;
                    const e = "js_index_queenmab_rendered_components_count",
                        n = o();
                    setTimeout((function() {
                        n ? t() : i()
                    }), 5e3);
                    const t = () => {
                            const n = Array.from(document.querySelectorAll("[data-widgetid]")).map((e => {
                                var n;
                                return (null === e || void 0 === e || null === (n = e.textContent) || void 0 === n ? void 0 : n.trim()) || ""
                            })).filter((e => e.length > 0)).length;
                            (0, a.trackGoalWithValue)(e, n)
                        },
                        i = () => {
                            const n = Array.from(document.querySelectorAll("[data-qmab-component-id]")).map((e => {
                                var n;
                                return (null === e || void 0 === e || null === (n = e.textContent) || void 0 === n ? void 0 : n.trim()) || ""
                            })).filter((e => e.length > 0)).length;
                            (0, a.trackGoalWithValue)(e, n)
                        }
                }
        },
        "6ff170fe": (e, n, t) => {
            "use strict";
            t.d(n, {
                F0: () => S,
                Ht: () => p,
                M5: () => v,
                UE: () => g,
                fR: () => _,
                rU: () => k
            });
            var i = t("af1e2b38"),
                a = t("dc6d28ff"),
                r = t("28dbd132"),
                d = t("e36d8828");
            const l = () => "us" === (0, a.getRequestContext)().getVisitorCountry(),
                s = r.exp `OABBaJdUBfUaRIfMPePcAFRFGUNTBBSSUFRURURHe`,
                o = r.exp `OABBaJdUBfUaRIfMPePcAFRFGUNTBBSSUWPHDDWe`;
            let c = function(e) {
                    return e[e.NON_BOT_US_USER = 1] = "NON_BOT_US_USER", e[e.COLD_START_US_USER = 2] = "COLD_START_US_USER", e[e.WARM_START_US_USER = 3] = "WARM_START_US_USER", e[e.DIRECT_TRAFFIC = 4] = "DIRECT_TRAFFIC", e[e.PAID_TRAFFIC = 5] = "PAID_TRAFFIC", e[e.GENIUS_USER = 6] = "GENIUS_USER", e[e.QMAB_ON_VIEW = 7] = "QMAB_ON_VIEW", e[e.ELIGIBLE_US_USERS = 8] = "ELIGIBLE_US_USERS", e[e.HAS_UPCOMING_BOOKINGS = 9] = "HAS_UPCOMING_BOOKINGS", e
                }({}),
                m = function(e) {
                    return e[e.ON_CLICK_HOMES_GUESTS_LOVE = 1] = "ON_CLICK_HOMES_GUESTS_LOVE", e[e.ON_CLICK_TRENDING_DESTINATION = 2] = "ON_CLICK_TRENDING_DESTINATION", e[e.ON_CLICK_DOMESTIC_DESTINATION = 3] = "ON_CLICK_DOMESTIC_DESTINATION", e[e.ON_CLICK_WEEKEND_DEALS = 4] = "ON_CLICK_WEEKEND_DEALS", e[e.ON_CLICK_SIGNUP = 5] = "ON_CLICK_SIGNUP", e
                }({});
            const u = () => {
                    const {
                        isWWW: e
                    } = (0, i.Z6)();
                    return e ? s : o
                },
                v = () => (0, r.trackExperiment)(u()) > 0,
                k = (e, n, t) => {
                    const i = u();
                    l() && ((0, r.trackExperimentStage)(i, c.NON_BOT_US_USER), (0, d.jl)() && (0, r.trackExperimentStage)(i, c.GENIUS_USER), n && ((0, r.trackExperimentStage)(i, c.ELIGIBLE_US_USERS), t ? (0, r.trackExperimentStage)(i, c.COLD_START_US_USER) : (0, r.trackExperimentStage)(i, c.WARM_START_US_USER)), (() => {
                        const {
                            partnerChannelId: e
                        } = (0, a.getRequestContext)().getAffiliate() ? ? {};
                        return e && [4, 14].includes(e)
                    })() ? (0, r.trackExperimentStage)(i, c.PAID_TRAFFIC) : (0, r.trackExperimentStage)(i, c.DIRECT_TRAFFIC), e && (0, r.trackExperimentStage)(i, c.HAS_UPCOMING_BOOKINGS))
                },
                g = () => {
                    l() && (0, r.trackCustomGoal)(u(), m.ON_CLICK_HOMES_GUESTS_LOVE)
                },
                p = () => {
                    l() && (0, r.trackCustomGoal)(u(), m.ON_CLICK_TRENDING_DESTINATION)
                },
                _ = () => {
                    l() && (0, r.trackCustomGoal)(u(), m.ON_CLICK_DOMESTIC_DESTINATION)
                },
                S = () => {
                    l() && (0, r.trackCustomGoal)(u(), m.ON_CLICK_WEEKEND_DEALS)
                }
        },
        "2ea30c97": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => r
            });
            var i = t("27fe0528");
            const a = e => {
                var n;
                const t = new Set;
                return null === e || void 0 === e || null === (n = e.merchComponents) || void 0 === n || null === (n = n.components) || void 0 === n || n.forEach((e => {
                    "MerchCarousel" === e.__typename && t.add(e.carouselCampaignId)
                })), [t, e]
            };

            function r(e, n) {
                const [t] = (0, i.Z)(a, n);
                return t.has(e)
            }
        },
        "27fe0528": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => N
            });
            var i = t("dc6d28ff"),
                a = t("41c6c66e"),
                r = t("c9d78bdd"),
                d = t("017725b3");
            var l = t("011fe5de");
            const s = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "HeroCTAFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "HeroCTA"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ariaLabel"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "targetLanding"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "CTATargetLandingFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }].concat(l.u.definitions)),
                    loc: {
                        start: 0,
                        end: 131,
                        source: {
                            body: "\n  fragment HeroCTAFragment on HeroCTA {\n    ariaLabel\n    text\n    targetLanding {\n      ...CTATargetLandingFragment\n    }\n  }\n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                },
                o = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "HeroBannerFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "HeroBanner"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "heroCampaignId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "designVariant"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "DesktopHeroIllustration"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "titleFirstLine"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "titleSecondLine"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subtitle"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "HeroCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "caption"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroTextCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroCountdownCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "campaignEnd"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "signature"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "illustration"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "300"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "300"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "alt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "colorScheme"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "DesktopHeroFullImage"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "titleFirstLine"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "titleSecondLine"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subtitle"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "HeroCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "caption"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroTextCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroCountdownCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "campaignEnd"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "signature"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "backgroundImage"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "smallImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "720"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "217"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "mediumImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "1440"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "434"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "bigImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "2880"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "868"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "alt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "colorScheme"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "DesktopHeroSolidBg"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "titleFirstLine"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "titleSecondLine"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subtitle"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "HeroCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "caption"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroTextCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroCountdownCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "campaignEnd"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "signature"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "colorScheme"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "MdotHeroIllustration"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "titleFirstLine"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "HeroCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "caption"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroTextCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroCountdownCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "campaignEnd"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "signature"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "illustration"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "300"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "300"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "alt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "colorScheme"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "MdotHeroImageFullAlignTop"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "titleFirstLine"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "HeroCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "caption"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroTextCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroCountdownCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "campaignEnd"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "signature"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "backgroundImage"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "900"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "900"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "smallImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "400"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "400"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "mediumImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "600"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "600"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "bigImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "800"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "800"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "alt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "colorScheme"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "MdotHeroImageFullAlignBottom"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "titleFirstLine"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "HeroCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "caption"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroTextCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroCountdownCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "campaignEnd"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "signature"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "backgroundImage"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "900"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "900"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "smallImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "400"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "400"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "mediumImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "600"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "600"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "bigImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "800"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "800"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "alt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "colorScheme"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "MdotHeroImageFullAlignLeft"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "titleFirstLine"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cta"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "HeroCTAFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "caption"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroTextCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "HeroCountdownCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "campaignEnd"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "signature"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "backgroundImage"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "900"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "900"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "smallImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "400"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "400"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "mediumImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "600"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "600"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "bigImageUrl"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "800"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "800"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "alt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "colorScheme"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }].concat(s.definitions)),
                    loc: {
                        start: 0,
                        end: 3762,
                        source: {
                            body: "\n  fragment HeroBannerFragment on HeroBanner {\n    heroCampaignId\n    designVariant {\n      ... on DesktopHeroIllustration {\n        titleFirstLine\n        titleSecondLine\n        subtitle\n        cta {\n          ...HeroCTAFragment\n        }\n        caption {\n          ... on HeroTextCaption {\n            text\n          }\n          ... on HeroCountdownCaption {\n            campaignEnd\n          }\n        }\n        signature\n        illustration {\n          id\n          url: url(width: 300, height: 300)\n          alt\n        }\n        colorScheme\n      }\n      ... on DesktopHeroFullImage {\n        titleFirstLine\n        titleSecondLine\n        subtitle\n        cta {\n          ...HeroCTAFragment\n        }\n        caption {\n          ... on HeroTextCaption {\n            text\n          }\n          ... on HeroCountdownCaption {\n            campaignEnd\n          }\n        }\n        signature\n        backgroundImage {\n          id\n          smallImageUrl: url(width: 720, height: 217)\n          mediumImageUrl: url(width: 1440, height: 434)\n          bigImageUrl: url(width: 2880, height: 868)\n          alt\n        }\n        colorScheme\n      }\n      ... on DesktopHeroSolidBg {\n        titleFirstLine\n        titleSecondLine\n        subtitle\n        cta {\n          ...HeroCTAFragment\n        }\n        caption {\n          ... on HeroTextCaption {\n            text\n          }\n          ... on HeroCountdownCaption {\n            campaignEnd\n          }\n        }\n        signature\n        colorScheme\n      }\n      ... on MdotHeroIllustration {\n        titleFirstLine\n        cta {\n          ...HeroCTAFragment\n        }\n        caption {\n          ... on HeroTextCaption {\n            text\n          }\n          ... on HeroCountdownCaption {\n            campaignEnd\n          }\n        }\n        signature\n        illustration {\n          id\n          url: url(width: 300, height: 300)\n          alt\n        }\n        colorScheme\n      }\n      ... on MdotHeroImageFullAlignTop {\n        titleFirstLine\n        cta {\n          ...HeroCTAFragment\n        }\n        caption {\n          ... on HeroTextCaption {\n            text\n          }\n          ... on HeroCountdownCaption {\n            campaignEnd\n          }\n        }\n        signature\n        backgroundImage {\n          id\n          url: url(width: 900, height: 900)\n          smallImageUrl: url(width: 400, height: 400)\n          mediumImageUrl: url(width: 600, height: 600)\n          bigImageUrl: url(width: 800, height: 800)\n          alt\n        }\n        colorScheme\n      }\n      ... on MdotHeroImageFullAlignBottom {\n        titleFirstLine\n        cta {\n          ...HeroCTAFragment\n        }\n        caption {\n          ... on HeroTextCaption {\n            text\n          }\n          ... on HeroCountdownCaption {\n            campaignEnd\n          }\n        }\n        signature\n        backgroundImage {\n          id\n          url: url(width: 900, height: 900)\n          smallImageUrl: url(width: 400, height: 400)\n          mediumImageUrl: url(width: 600, height: 600)\n          bigImageUrl: url(width: 800, height: 800)\n          alt\n        }\n        colorScheme\n      }\n      ... on MdotHeroImageFullAlignLeft {\n        titleFirstLine\n        cta {\n          ...HeroCTAFragment\n        }\n        caption {\n          ... on HeroTextCaption {\n            text\n          }\n          ... on HeroCountdownCaption {\n            campaignEnd\n          }\n        }\n        signature\n        backgroundImage {\n          id\n          url: url(width: 900, height: 900)\n          smallImageUrl: url(width: 400, height: 400)\n          mediumImageUrl: url(width: 600, height: 600)\n          bigImageUrl: url(width: 800, height: 800)\n          alt\n        }\n        colorScheme\n      }\n    }\n  }\n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                },
                c = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PromotionalBannerCTAFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "MerchCTA"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ariaLabel"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "targetLanding"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "CTATargetLandingFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }].concat(l.u.definitions)),
                    loc: {
                        start: 0,
                        end: 145,
                        source: {
                            body: "\n  fragment PromotionalBannerCTAFragment on MerchCTA {\n    ariaLabel\n    text\n    targetLanding {\n      ...CTATargetLandingFragment\n    }\n  }\n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                },
                m = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PromotionalBannersCarouselFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "PromotionalBannersCarousel"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "promotionalBanners"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "promotionalBannerCampaignId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "contentArea"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "caption"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "PromotionalBannerSimpleCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "value"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "PromotionalBannerCountdownCaption"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "campaignEnd"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "PromotionalBannerSimpleTitle"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "value"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "subTitle"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "PromotionalBannerSimpleSubTitle"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "value"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "buttons"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "variant"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cta"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "PromotionalBannerCTAFragment"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: {
                                            kind: "Name",
                                            value: "designVariantPromotional"
                                        },
                                        name: {
                                            kind: "Name",
                                            value: "designVariant"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "DesktopPromotionalFullBleedImage"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "fullBleedImage"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "image"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "814"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "138"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "alt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "colorScheme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "signature"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "DesktopPromotionalImageLeft"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "image"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "248"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "248"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "alt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "colorScheme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "signature"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "DesktopPromotionalImageRight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "image"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "248"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "248"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "alt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "colorScheme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "signature"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "MdotPromotionalFullBleedImage"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "fullBleedImage"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "image"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "358"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "136"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "alt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "colorScheme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "signature"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "MdotPromotionalImageLeft"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "image"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "128"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "128"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "alt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "colorScheme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "signature"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "MdotPromotionalImageRight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "image"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "128"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "128"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "alt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "colorScheme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "signature"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "MdotPromotionalIllustrationLeft"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "image"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "128"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "128"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "alt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "colorScheme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "signature"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "MdotPromotionalIllustrationRight"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "image"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "128"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "128"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "alt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "colorScheme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "signature"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }].concat(c.definitions)),
                    loc: {
                        start: 0,
                        end: 2400,
                        source: {
                            body: "\n  fragment PromotionalBannersCarouselFragment on PromotionalBannersCarousel {\n    promotionalBanners {\n      promotionalBannerCampaignId\n      contentArea {\n        caption {\n          ... on PromotionalBannerSimpleCaption {\n            value\n          }\n          ... on PromotionalBannerCountdownCaption {\n            campaignEnd\n          }\n        }\n        title {\n          ... on PromotionalBannerSimpleTitle {\n            value\n          }\n        }\n        subTitle {\n          ... on PromotionalBannerSimpleSubTitle {\n            value\n          }\n        }\n        buttons {\n          variant\n          cta {\n            ...PromotionalBannerCTAFragment\n          }\n        }\n      }\n      designVariantPromotional: designVariant {\n        ... on DesktopPromotionalFullBleedImage {\n          fullBleedImage: image {\n            id\n            url(width: 814, height: 138)\n            alt\n          }\n          colorScheme\n          signature\n        }\n        ... on DesktopPromotionalImageLeft {\n          image {\n            id\n            url(width: 248, height: 248)\n            alt\n          }\n          colorScheme\n          signature\n        }\n        ... on DesktopPromotionalImageRight {\n          image {\n            id\n            url(width: 248, height: 248)\n            alt\n          }\n          colorScheme\n          signature\n        }\n        ... on MdotPromotionalFullBleedImage {\n          fullBleedImage: image {\n            id\n            url(width: 358, height: 136)\n            alt\n          }\n          colorScheme\n          signature\n        }\n        ... on MdotPromotionalImageLeft {\n          image {\n            id\n            url(width: 128, height: 128)\n            alt\n          }\n          colorScheme\n          signature\n        }\n        ... on MdotPromotionalImageRight {\n          image {\n            id\n            url(width: 128, height: 128)\n            alt\n          }\n          colorScheme\n          signature\n        }\n        ... on MdotPromotionalIllustrationLeft {\n          image {\n            id\n            url(width: 128, height: 128)\n            alt\n          }\n          colorScheme\n          signature\n        }\n        ... on MdotPromotionalIllustrationRight {\n          image {\n            id\n            url(width: 128, height: 128)\n            alt\n          }\n          colorScheme\n          signature\n        }\n      }\n    }\n  }\n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };
            var u = t("cedcabf9");
            const v = {},
                k = {
                    kind: "Document",
                    definitions: (e => {
                        const n = {};
                        return e.filter((e => {
                            if ("FragmentDefinition" !== e.kind) return !0;
                            const t = e.name.value;
                            return !n[t] && (n[t] = !0, !0)
                        }))
                    })([{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "MerchComponents"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "MerchComponentsInput"
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "merchComponents"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "input"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "components"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "MerchCarouselFragment"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "regions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "components"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "HeroBannerFragment"
                                                        },
                                                        directives: []
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "GlobalAlertsMerchComponents"
                                                        },
                                                        directives: []
                                                    }, {
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PromotionalBannersCarouselFragment"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "experimentationTracking"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "ExperimentationTrackingFragment"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }].concat([{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "MerchCarouselFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "MerchCarousel"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "carouselCampaignId"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }], o.definitions, [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "GlobalAlertsMerchComponents"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "GlobalAlerts"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "alerts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "alertCampaignId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "designVariant"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "DesktopAlertDefault"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "firstParagraph"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "secondParagraph"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "thirdParagraph"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "icon"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "category"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "severity"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "expanded"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "firstCta"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "ariaLabel"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "targetLanding"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "SearchResultsLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destType"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destId"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkin"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkout"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrAdults"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrChildren"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "childrenAges"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrRooms"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "filters"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DirectLinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "role"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DeeplinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "LoginLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "stub"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "secondCta"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "ariaLabel"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "targetLanding"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "SearchResultsLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destType"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destId"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkin"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkout"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrAdults"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrChildren"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "childrenAges"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrRooms"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "filters"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DirectLinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "role"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DeeplinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "LoginLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "stub"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "thirdCta"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "ariaLabel"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "targetLanding"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "SearchResultsLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destType"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destId"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkin"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkout"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrAdults"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrChildren"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "childrenAges"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrRooms"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "filters"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DirectLinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "role"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DeeplinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "LoginLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "stub"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "MdotAlertDefault"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "firstParagraph"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "secondParagraph"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "thirdParagraph"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "icon"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "category"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "severity"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "expanded"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "firstCta"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "ariaLabel"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "targetLanding"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "SearchResultsLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destType"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destId"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkin"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkout"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrAdults"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrChildren"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "childrenAges"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrRooms"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "filters"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DirectLinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "role"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DeeplinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "LoginLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "stub"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "secondCta"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "ariaLabel"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "targetLanding"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "SearchResultsLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destType"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destId"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkin"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkout"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrAdults"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrChildren"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "childrenAges"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrRooms"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "filters"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DirectLinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "role"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DeeplinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "LoginLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "stub"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "thirdCta"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "ariaLabel"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "text"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "targetLanding"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "SearchResultsLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destType"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "destId"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkin"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "checkout"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrAdults"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrChildren"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "childrenAges"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "nrRooms"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "filters"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DirectLinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "role"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "DeeplinkLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "urlPath"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "queryParams"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "value"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "InlineFragment",
                                                                        typeCondition: {
                                                                            kind: "NamedType",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "LoginLanding"
                                                                            }
                                                                        },
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "stub"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }], m.definitions, [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "ExperimentationTrackingFragment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ExperimentationTracking"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "etStateBlob"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "trackingInRegions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "regionId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "trackingData"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sourceId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sourceType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "stages"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "experimentHashTag"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "stageNumber"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "lifecycleEvent"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "goals"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "goalNumber"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "experimentHashTag"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "lifecycleEvent"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }])),
                    loc: {
                        start: 0,
                        end: 487,
                        source: {
                            body: "\n  query MerchComponents($input: MerchComponentsInput) {\n    merchComponents(input: $input) {\n      components {\n        __typename\n        ...MerchCarouselFragment\n      }\n      regions {\n        id\n        components {\n          ...HeroBannerFragment\n          ...GlobalAlertsMerchComponents\n          ...PromotionalBannersCarouselFragment\n        }\n      }\n      experimentationTracking {\n        __typename\n        ...ExperimentationTrackingFragment\n      }\n    }\n  }\n  \n  \n  \n  \n  \n",
                            name: "GraphQL request",
                            locationOffset: {
                                line: 1,
                                column: 1
                            }
                        }
                    }
                };
            var g = t("2bb3685b"),
                p = t("4933a3e7");
            const _ = () => ["index_global_alerts", "index_main"];
            var S = t("5db8920d"),
                h = t("dfb9cb18");

            function N(e, n, t) {
                var l, s;
                const o = (0, i.getRequestContext)(),
                    c = o.getBasePageUrl(),
                    m = c.toString(),
                    N = c.searchParams,
                    E = N.getAll(g.nh),
                    f = t ? [t] : _(),
                    C = (0, r.Y2)() ? [d.HeM.INDEPENDENCE_DAY] : [],
                    T = (0, h.m)(N),
                    I = {
                        input: {
                            regionsIds: f,
                            testCampaignIds: E,
                            clientEligibility: C
                        }
                    };
                n || (0, p.z)("Calling Merch Platform with variables ", {
                    queryVariables: I
                });
                const {
                    error: R,
                    loading: b,
                    data: F,
                    ...y
                } = function(e) {
                    const n = { ...v,
                        ...e
                    };
                    return u.useQuery(k, n)
                }({
                    skip: n,
                    context: {
                        headers: { ...(0, S.l)(!0),
                            ...(0, h.j)(T)
                        }
                    },
                    variables: I
                });
                return n || (0, p.$)(F, I, {
                    error: R,
                    loading: b,
                    data: F,
                    ...y
                }), n || (0, p.z)("Response from Merch Platform ", {
                    error: R,
                    loading: b,
                    data: F
                }), n || b || "MerchComponentsResult" === (null === F || void 0 === F || null === (l = F.merchComponents) || void 0 === l ? void 0 : l.__typename) || (0, a.reportGrumble)("No result from merch platform", {
                    requestUrl: m
                }), R && (0, a.reportError)(R), "MerchComponentsResult" === (null === F || void 0 === F || null === (s = F.merchComponents) || void 0 === s ? void 0 : s.__typename) ? e(F, {
                    requestContext: o,
                    loading: b,
                    error: R,
                    regionId: t
                }) : e(void 0, {
                    requestContext: o,
                    loading: b,
                    error: R,
                    regionId: t
                })
            }
        },
        c9d78bdd: (e, n, t) => {
            "use strict";
            t.d(n, {
                Ds: () => o,
                J1: () => l,
                Y2: () => s
            });
            var i = t("d0989236"),
                a = t("4f475142"),
                r = t("0fc8afc9"),
                d = t("6ff170fe");
            const l = () => {
                    var e, n, t;
                    const {
                        visitorCountry: d,
                        basePageUrl: l,
                        isInternalIp: s
                    } = (0, i.B)(), o = (0, r.et)();
                    if (s && "1" === (null === l || void 0 === l || null === (e = l.searchParams) || void 0 === e ? void 0 : e.get("debug_us_independence"))) return !0;
                    if ("us" !== d) return !1;
                    if (!o.isLoading && (null === o || void 0 === o || null === (n = o.items) || void 0 === n || !n.length)) return !0;
                    const c = null === o || void 0 === o || null === (t = o.items) || void 0 === t ? void 0 : t[0];
                    if ("us" === (null === c || void 0 === c ? void 0 : c.countryCode)) {
                        const e = new URL(c.url || "https://www.booking.com"),
                            n = (0, a.Xk)(e.searchParams);
                        if (n) {
                            const {
                                checkin: e
                            } = n;
                            return 5 === e.getMonth() && e.getDate() >= 6 || 6 === e.getMonth() && e.getDate() <= 6
                        }
                    }
                    return !1
                },
                s = () => l() && (0, d.M5)(),
                o = () => {
                    var e;
                    const {
                        visitorCountry: n
                    } = (0, i.B)(), t = (0, r.et)();
                    return "us" === n && !(t.isLoading || null !== t && void 0 !== t && null !== (e = t.items) && void 0 !== e && e.length)
                }
        },
        "3d486da1": (e, n, t) => {
            "use strict";
            t.d(n, {
                D6: () => k,
                YV: () => v,
                al: () => u,
                Ie: () => m,
                dU: () => c
            });
            var i = t("dc6d28ff"),
                a = t("c44dcb0c");
            const r = {
                    ar: 1,
                    bg: 1,
                    en: 1,
                    "en-gb": 1,
                    "en-us": 1,
                    "es-mx": 1,
                    he: 1,
                    ja: 1,
                    ko: 1,
                    ms: 1,
                    th: 1,
                    tl: 1,
                    zh: 1,
                    "zh-cn": 1,
                    "zh-tw": 1
                },
                d = {
                    bg: 1,
                    cs: 1,
                    et: 1,
                    fi: 1,
                    fr: 1,
                    hu: 1,
                    lv: 1,
                    lt: 1,
                    no: 1,
                    pl: 1,
                    "pt-pt": 1,
                    ru: 1,
                    sk: 1,
                    sr: 1,
                    sv: 1,
                    uk: 1
                },
                l = /(\d)(?=(\d{3})+(?!\d))/g;

            function s(e, n) {
                let t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                if (isNaN(e)) return "";
                const i = n in r,
                    a = i ? "." : ",";
                let s = i ? "," : ".";
                n in d && (s = " ");
                const o = Math.pow(10, t),
                    c = (Math.round(e * o) / o).toFixed(t),
                    m = c.split(".")[0],
                    u = c.split(".")[1];
                return m.replace(l, `$1${s}`) + (u ? a + u : "")
            }
            const o = e => {
                    const n = [{
                        from: null,
                        to: 3,
                        copy: (0, a.t)("review_adj_very_poor")
                    }, {
                        from: 3,
                        to: 4,
                        copy: (0, a.t)("review_adj_poor")
                    }, {
                        from: 4,
                        to: 5,
                        copy: (0, a.t)("review_adj_disappointing")
                    }, {
                        from: 5,
                        to: 5.6,
                        copy: (0, a.t)("review_adj_average")
                    }, {
                        from: 5.6,
                        to: 6,
                        copy: (0, a.t)("review_adj_above_average")
                    }, {
                        from: 6,
                        to: 7,
                        copy: (0, a.t)("review_adj_pleasant")
                    }, {
                        from: 7,
                        to: 8,
                        copy: (0, a.t)("review_adj_good")
                    }, {
                        from: 8,
                        to: 8.6,
                        copy: (0, a.t)("review_adj_very_good")
                    }, {
                        from: 8.6,
                        to: 9,
                        copy: (0, a.t)("review_adj_fabulous")
                    }, {
                        from: 9,
                        to: 9.5,
                        copy: (0, a.t)("review_adj_superb")
                    }, {
                        from: 9.5,
                        to: null,
                        copy: (0, a.t)("review_adj_exceptional")
                    }];
                    for (const t of n)
                        if (!(t.from && t.from > e) && !(t.to && t.to <= e)) return {
                            ratingAdjective: t.copy
                        };
                    throw new Error("score range is missed")
                },
                c = () => {
                    const e = (0, i.getRequestContext)().getBPlatformEnvironment();
                    return e && "dev" !== e && "dqs" !== e ? "prod" : "dqs"
                },
                m = (e, n, t) => {
                    if (void 0 !== n && void 0 !== t) return {
                        score: n.toFixed(1),
                        rating: e.trans(o(n).ratingAdjective),
                        reviewCount: e.trans((0, a.t)("num_reviews_sr_page", {
                            variables: {
                                num_reviews: s(t, e.language),
                                num_exception: t || ""
                            }
                        }))
                    }
                },
                u = e => ({
                    formattedScore: (null === e || void 0 === e ? void 0 : e.score) || "",
                    formattedReviewCount: null === e || void 0 === e ? void 0 : e.reviewCount,
                    rating: (null === e || void 0 === e ? void 0 : e.rating) || "",
                    ariaLabel: (null === e || void 0 === e ? void 0 : e.score) || "",
                    ratingReviewAriaLabel: (null === e || void 0 === e ? void 0 : e.rating) || ""
                }),
                v = (e, n) => {
                    if (e) return {
                        text: n.trans((0, a.t)("m_sr_distance_from_centre", {
                            variables: {
                                distanceInKmFromCentre: e
                            }
                        })) || "",
                        iconName: "GeoPinIcon"
                    }
                },
                k = e => [null === e || void 0 === e ? void 0 : e.translatedCityName, null === e || void 0 === e ? void 0 : e.translatedDistrictName].filter(Boolean).join(", ") || ""
        },
        "2bb3685b": (e, n, t) => {
            "use strict";
            t.d(n, {
                Jv: () => d,
                gh: () => r,
                nh: () => i,
                q$: () => a
            });
            const i = "b_merch_test_campaign_id",
                a = "b_genius_data_debug",
                r = ["b-webcore-transactional-content-service", "b-merch-platform-campaign-serving-api"],
                d = {
                    threshold: .2,
                    triggerOnce: !0
                }
        },
        "2db41414": (e, n, t) => {
            "use strict";
            t.d(n, {
                X: () => a,
                Z: () => r
            });
            var i = t("5c4eda5e");
            const a = (e, n, t, a) => {
                    const r = i.J[a][n][t];
                    return e ? {
                        "1x": e.replace("<SIZE>", r["1x"]),
                        "2x": e.replace("<SIZE>", r["2x"])
                    } : null
                },
                r = (e, n, t) => e && t + e.replace("<SIZE>", n)
        },
        "5c4eda5e": (e, n, t) => {
            "use strict";
            t.d(n, {
                J: () => a,
                y: () => i
            });
            let i = function(e) {
                return e.IndexQmabDesktop = "IndexQmabDesktop", e.IndexQmabMdot = "IndexQmabMdot", e
            }({});
            const a = {
                IndexQmabDesktop: {
                    small: {
                        "1:1": {
                            "1x": "170x170",
                            "2x": "340x340"
                        },
                        "16:9": {
                            "1x": "170x96",
                            "2x": "340x192"
                        },
                        "9:16": {
                            "1x": "96x170",
                            "2x": "192x340"
                        },
                        "21:9": {
                            "1x": "170x73",
                            "2x": "340x146"
                        },
                        "2:1": {
                            "1x": "170x85",
                            "2x": "340x170"
                        },
                        "3:4": {
                            "1x": "170x227",
                            "2x": "340x454"
                        },
                        "4:3": {
                            "1x": "170x128",
                            "2x": "340x256"
                        },
                        "5:4": {
                            "1x": "170x136",
                            "2x": "340x272"
                        },
                        "3:2": {
                            "1x": "170x113",
                            "2x": "340x226"
                        },
                        "2:3": {
                            "1x": "170x255",
                            "2x": "340x510"
                        },
                        "4:5": {
                            "1x": "170x212",
                            "2x": "340x424"
                        }
                    },
                    medium: {
                        "1:1": {
                            "1x": "263x263",
                            "2x": "526x526"
                        },
                        "16:9": {
                            "1x": "263x148",
                            "2x": "526x296"
                        },
                        "9:16": {
                            "1x": "148x263",
                            "2x": "296x526"
                        },
                        "21:9": {
                            "1x": "263x113",
                            "2x": "526x226"
                        },
                        "2:1": {
                            "1x": "263x132",
                            "2x": "526x264"
                        },
                        "3:4": {
                            "1x": "263x351",
                            "2x": "526x702"
                        },
                        "4:3": {
                            "1x": "263x197",
                            "2x": "526x394"
                        },
                        "5:4": {
                            "1x": "263x210",
                            "2x": "526x420"
                        },
                        "3:2": {
                            "1x": "263x175",
                            "2x": "526x350"
                        },
                        "2:3": {
                            "1x": "263x394",
                            "2x": "526x789"
                        },
                        "4:5": {
                            "1x": "263x329",
                            "2x": "526x658"
                        }
                    },
                    large: {
                        "1:1": {
                            "1x": "356x356",
                            "2x": "712x712"
                        },
                        "16:9": {
                            "1x": "356x200",
                            "2x": "712x400"
                        },
                        "9:16": {
                            "1x": "200x356",
                            "2x": "400x712"
                        },
                        "21:9": {
                            "1x": "356x153",
                            "2x": "712x306"
                        },
                        "2:1": {
                            "1x": "356x178",
                            "2x": "712x356"
                        },
                        "3:4": {
                            "1x": "356x475",
                            "2x": "712x950"
                        },
                        "4:3": {
                            "1x": "356x267",
                            "2x": "712x534"
                        },
                        "5:4": {
                            "1x": "356x285",
                            "2x": "712x570"
                        },
                        "3:2": {
                            "1x": "356x237",
                            "2x": "712x474"
                        },
                        "2:3": {
                            "1x": "356x534",
                            "2x": "712x1068"
                        },
                        "4:5": {
                            "1x": "356x445",
                            "2x": "712x890"
                        }
                    },
                    larger: {
                        "1:1": {
                            "1x": "356x356",
                            "2x": "712x712"
                        },
                        "16:9": {
                            "1x": "356x200",
                            "2x": "712x400"
                        },
                        "9:16": {
                            "1x": "200x356",
                            "2x": "400x712"
                        },
                        "21:9": {
                            "1x": "356x153",
                            "2x": "712x306"
                        },
                        "2:1": {
                            "1x": "356x178",
                            "2x": "712x356"
                        },
                        "3:4": {
                            "1x": "356x475",
                            "2x": "712x950"
                        },
                        "4:3": {
                            "1x": "356x267",
                            "2x": "712x534"
                        },
                        "5:4": {
                            "1x": "356x285",
                            "2x": "712x570"
                        },
                        "3:2": {
                            "1x": "356x237",
                            "2x": "712x474"
                        },
                        "2:3": {
                            "1x": "356x534",
                            "2x": "712x1068"
                        },
                        "4:5": {
                            "1x": "356x445",
                            "2x": "712x890"
                        }
                    }
                },
                IndexQmabMdot: {
                    small: {
                        "1:1": {
                            "1x": "170x170",
                            "2x": "340x340"
                        },
                        "16:9": {
                            "1x": "170x96",
                            "2x": "340x192"
                        },
                        "9:16": {
                            "1x": "96x170",
                            "2x": "192x340"
                        },
                        "21:9": {
                            "1x": "170x73",
                            "2x": "340x146"
                        },
                        "2:1": {
                            "1x": "170x85",
                            "2x": "340x170"
                        },
                        "3:4": {
                            "1x": "170x227",
                            "2x": "340x454"
                        },
                        "4:3": {
                            "1x": "170x128",
                            "2x": "340x256"
                        },
                        "5:4": {
                            "1x": "170x136",
                            "2x": "340x272"
                        },
                        "3:2": {
                            "1x": "170x113",
                            "2x": "340x226"
                        },
                        "2:3": {
                            "1x": "170x255",
                            "2x": "340x510"
                        },
                        "4:5": {
                            "1x": "170x212",
                            "2x": "340x424"
                        }
                    },
                    medium: {
                        "1:1": {
                            "1x": "263x263",
                            "2x": "526x526"
                        },
                        "16:9": {
                            "1x": "263x148",
                            "2x": "526x296"
                        },
                        "9:16": {
                            "1x": "148x263",
                            "2x": "296x526"
                        },
                        "21:9": {
                            "1x": "263x113",
                            "2x": "526x226"
                        },
                        "2:1": {
                            "1x": "263x132",
                            "2x": "526x264"
                        },
                        "3:4": {
                            "1x": "263x351",
                            "2x": "526x702"
                        },
                        "4:3": {
                            "1x": "263x197",
                            "2x": "526x394"
                        },
                        "5:4": {
                            "1x": "263x210",
                            "2x": "526x420"
                        },
                        "3:2": {
                            "1x": "263x175",
                            "2x": "526x350"
                        },
                        "2:3": {
                            "1x": "263x394",
                            "2x": "526x789"
                        },
                        "4:5": {
                            "1x": "263x329",
                            "2x": "526x658"
                        }
                    },
                    large: {
                        "1:1": {
                            "1x": "356x356",
                            "2x": "712x712"
                        },
                        "16:9": {
                            "1x": "356x200",
                            "2x": "712x400"
                        },
                        "9:16": {
                            "1x": "200x356",
                            "2x": "400x712"
                        },
                        "21:9": {
                            "1x": "356x153",
                            "2x": "712x306"
                        },
                        "2:1": {
                            "1x": "356x178",
                            "2x": "712x356"
                        },
                        "3:4": {
                            "1x": "356x475",
                            "2x": "712x950"
                        },
                        "4:3": {
                            "1x": "356x267",
                            "2x": "712x534"
                        },
                        "5:4": {
                            "1x": "356x285",
                            "2x": "712x570"
                        },
                        "3:2": {
                            "1x": "356x237",
                            "2x": "712x474"
                        },
                        "2:3": {
                            "1x": "356x534",
                            "2x": "712x1068"
                        },
                        "4:5": {
                            "1x": "356x445",
                            "2x": "712x890"
                        }
                    },
                    larger: {
                        "1:1": {
                            "1x": "356x356",
                            "2x": "712x712"
                        },
                        "16:9": {
                            "1x": "356x200",
                            "2x": "712x400"
                        },
                        "9:16": {
                            "1x": "200x356",
                            "2x": "400x712"
                        },
                        "21:9": {
                            "1x": "356x153",
                            "2x": "712x306"
                        },
                        "2:1": {
                            "1x": "356x178",
                            "2x": "712x356"
                        },
                        "3:4": {
                            "1x": "356x475",
                            "2x": "712x950"
                        },
                        "4:3": {
                            "1x": "356x267",
                            "2x": "712x534"
                        },
                        "5:4": {
                            "1x": "356x285",
                            "2x": "712x570"
                        },
                        "3:2": {
                            "1x": "356x237",
                            "2x": "712x474"
                        },
                        "2:3": {
                            "1x": "356x534",
                            "2x": "712x1068"
                        },
                        "4:5": {
                            "1x": "356x445",
                            "2x": "712x890"
                        }
                    }
                }
            }
        },
        "4933a3e7": (e, n, t) => {
            "use strict";
            t.d(n, {
                $: () => d,
                z: () => a
            });
            var i = t("dc6d28ff");
            const a = function() {
                const e = (0, i.getRequestContext)(),
                    n = e.getBPlatformEnvironment(),
                    t = e.getBasePageUrl(),
                    a = e.isInternalUser() && "1" === t.searchParams.get("debug");
                if ((!n || "dev" === n || "dqs" === n) && a) {
                    for (var r = arguments.length, d = new Array(r), l = 0; l < r; l++) d[l] = arguments[l];
                    console.log(d)
                }
            };
            let r;

            function d(e, n, t) {
                const a = (0, i.getRequestContext)(),
                    d = a.getBasePageUrl();
                a.isInternalUser() && "1" === d.searchParams.get("debug_merch") && null !== e && void 0 !== e && e.merchComponents && e !== r && (console.groupCollapsed("Merch Platform debug info"), console.log("Merch Platform request variables:", n), console.log("Merch Platform response data:", e), console.log("Metadata:", t), console.groupEnd(), r = e)
            }
        },
        "75c11388": (e, n, t) => {
            "use strict";
            t.d(n, {
                zD: () => r,
                CO: () => d
            });
            var i = t("30190550"),
                a = (t("41c6c66e"), t("d1e54a96"));
            t("ead71eb0"), t("84451606"), t("43a4d203"), t("dc6d28ff");
            t("017725b3");
            const r = e => "LoginLanding" === (null === e || void 0 === e ? void 0 : e.__typename) ? l() : "DeeplinkLanding" === (null === e || void 0 === e ? void 0 : e.__typename) ? s(e) : "DirectLinkLanding" === (null === e || void 0 === e ? void 0 : e.__typename) ? o(e) : "ResolvedLinkLanding" === (null === e || void 0 === e ? void 0 : e.__typename) ? c(e) : "ScrollToAnchor" === (null === e || void 0 === e ? void 0 : e.__typename) ? m(e) : void 0,
                d = e => {
                    switch (e) {
                        case "ADMIN":
                            return "admin";
                        case "APP":
                            return "app";
                        case "BOOK":
                            return "book";
                        case "JOIN":
                            return "join";
                        case "CRUISES":
                            return "cruises";
                        default:
                            return
                    }
                },
                l = () => (0, i.wd)({
                    componentId: i.au.MERCH_PLATFORM_INDEX_CTA,
                    prompt: i.L4.SIGN_IN
                }),
                s = e => {
                    let {
                        urlPath: n,
                        queryParams: t
                    } = e;
                    const i = new URL(n);
                    for (const a of t || []) i.searchParams.set(a.name, a.value);
                    return i.toString()
                },
                o = e => {
                    let {
                        urlPath: n,
                        queryParams: t,
                        role: i,
                        hash: r
                    } = e;
                    const l = new URLSearchParams;
                    for (const a of t || []) l.set(a.name, a.value);
                    return (0, a.constructUrl)({
                        host: i ? d(i) : void 0,
                        pathname: n,
                        searchParams: l,
                        hash: r ? ? void 0
                    }).toString()
                },
                c = e => {
                    let {
                        url: n
                    } = e;
                    return n
                },
                m = e => {
                    let {
                        anchor: n
                    } = e;
                    return `#${n}`
                }
        },
        e36d8828: (e, n, t) => {
            "use strict";
            t.d(n, {
                CR: () => l,
                Tz: () => s,
                jl: () => d
            });
            var i = t("43a4d203"),
                a = t("dc6d28ff");
            const r = () => (0, a.getRequestContext)().getUnpackedGuestAccessToken(),
                d = () => {
                    var e;
                    const n = null === (e = r()) || void 0 === e ? void 0 : e.authenticatorAssuranceLevel;
                    return !!n && n >= i.AuthenticatorAssuranceLevel.AAL1
                },
                l = () => {
                    var e;
                    return !(null === (e = r()) || void 0 === e || !e.isMarketingTrackingAllowed)
                },
                s = () => !d()
        },
        "5db8920d": (e, n, t) => {
            "use strict";
            t.d(n, {
                l: () => a
            });
            var i = t("3d486da1");
            const a = function() {
                let e = arguments.length > 1 ? arguments[1] : void 0;
                const n = "dqs" === (0, i.dU)() ? 3e4 : 1500;
                return {
                    "X-Booking-Timeout-Ms": e ? ? n,
                    "X-Envoy-Expected-Rq-Timeout-Ms": e ? ? n,
                    "X-Booking-Timeout-Budget-Ms": e ? ? n
                }
            }
        },
        dfb9cb18: (e, n, t) => {
            "use strict";
            t.d(n, {
                j: () => r,
                m: () => d
            });
            var i = t("3d486da1"),
                a = t("2bb3685b");
            const r = e => 0 === Object.keys(e).length || "prod" === (0, i.dU)() ? {} : {
                    "X-Booking-Dev-Service-Override": JSON.stringify(e)
                },
                d = e => {
                    const n = {};
                    return a.gh.forEach((t => {
                        const i = e.get(`dev_${t}`);
                        i && (n[t] = i)
                    })), n
                }
        },
        "8ebac256": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => s
            });

            function i(e, n, t, i) {
                return new(t || (t = Promise))((function(a, r) {
                    function d(e) {
                        try {
                            s(i.next(e))
                        } catch (n) {
                            r(n)
                        }
                    }

                    function l(e) {
                        try {
                            s(i.throw(e))
                        } catch (n) {
                            r(n)
                        }
                    }

                    function s(e) {
                        var n;
                        e.done ? a(e.value) : (n = e.value, n instanceof t ? n : new t((function(e) {
                            e(n)
                        }))).then(d, l)
                    }
                    s((i = i.apply(e, n || [])).next())
                }))
            }
            Object.create;
            Object.create;
            class a {
                constructor(e) {
                    this.config = e, this.headers = this.config.API.HEADERS
                }
                get(e, n) {
                    return new Promise(((t, a) => i(this, void 0, void 0, (function*() {
                        try {
                            const i = yield fetch(e, {
                                method: "GET",
                                headers: (null === n || void 0 === n ? void 0 : n.withHeaders) ? this.headers : void 0,
                                credentials: !1 === (null === n || void 0 === n ? void 0 : n.withCredentials) ? "omit" : "include"
                            }), a = yield i.text();
                            t(a ? JSON.parse(a) : null)
                        } catch (i) {
                            return a(i)
                        }
                    }))))
                }
                post(e, n, t) {
                    return new Promise(((a, r) => i(this, void 0, void 0, (function*() {
                        try {
                            const i = yield fetch(e, {
                                method: "POST",
                                headers: (null === t || void 0 === t ? void 0 : t.withHeaders) ? this.headers : void 0,
                                credentials: !1 === (null === t || void 0 === t ? void 0 : t.withCredentials) ? "omit" : "include",
                                body: JSON.stringify(n)
                            }), r = yield i.text();
                            a(r ? JSON.parse(r) : null)
                        } catch (i) {
                            return r(i)
                        }
                    }))))
                }
            }
            var r = new class {
                init(e) {
                    this.client = new a(e)
                }
                get(e) {
                    return i(this, void 0, void 0, (function*() {
                        return this.client.get(e)
                    }))
                }
                post(e) {
                    let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                        t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    return i(this, void 0, void 0, (function*() {
                        return this.client.post(e, n, t)
                    }))
                }
            };
            const d = e => {
                var n = void 0;
                e.platform || (e.platform = ""), e.platform = e.platform.toLowerCase(), "mdot" == e.platform && (n = 2), "ddot" != e.platform && "www" != e.platform || (n = 1);
                return {
                    "Content-Type": "application/json",
                    "X-Booking-Platform": e.platform,
                    "X-Booking-SiteType-Id": n,
                    "X-Booking-Pageview-Id": e.pageviewId,
                    "X-Booking-Session-Id": e.sessionId,
                    "X-Booking-ET-Seed": e.etSeed,
                    "X-Booking-AID": e.aid,
                    "X-Booking-Label": e.label,
                    "X-Booking-CSRF": e.csrfToken,
                    "X-Booking-Language-Code": e.lang
                }
            };
            class l {
                constructor(e, n, t) {
                    this.batchSize = e, this.queueLimit = n, this.queue = [], this.timeoutId = null, this.sendBatchFn = t
                }
                enqueue(e) {
                    this.queue.push(e), this.queue.length >= this.batchSize ? this.flush() : 1 !== this.queue.length || this.timeoutId || (this.timeoutId = setTimeout((() => {
                        this.processQueue()
                    }), this.queueLimit))
                }
                flush(e) {
                    clearTimeout(this.timeoutId), this.processQueue(e)
                }
                processQueue(e) {
                    let n = [];
                    n = this.queue.length >= this.queueLimit ? this.queue.splice(0) : this.queue.splice(0, this.batchSize), this.sendBatchFn(n), this.queue.length > 0 ? this.processQueue() : this.timeoutId = null
                }
            }
            const s = new class {
                constructor() {
                    this.trackBatch = e => i(this, void 0, void 0, (function*() {
                        this.track({
                            events: e.map((e => function(e, n, t) {
                                const i = {
                                    local: {
                                        currency: n.currency,
                                        language: n.language
                                    },
                                    page: {},
                                    web: {}
                                };
                                "undefined" != typeof window && (i.page = {
                                    page_referrer: document.referrer,
                                    page_url: window.location.href,
                                    page_title: document.title
                                }, i.web = {
                                    browser_language: window.navigator.language
                                });
                                const a = {
                                    tracker_name: "C360ReactTracker",
                                    tracker_type: "Client",
                                    tracker_version: "0.1.0"
                                };
                                return t && (a.tracker_version = "0.1.1"), Object.assign(Object.assign({}, e), {
                                    context: i,
                                    tracker: a
                                })
                            }(e, this.c360Config, !0)))
                        })
                    }))
                }
                init(e) {
                    this.c360Config = (e => {
                        const n = e.hostname || (e.isDev ? "app.dqs.booking.com" : "www.booking.com");
                        return {
                            IS_DEV: Boolean(e.isDev),
                            API: {
                                HEADERS: d(e)
                            },
                            TRACK_BASE_URL: `https://${n}/c360/v1/track`,
                            language: e.lang,
                            currency: e.currency
                        }
                    })(e), this.httpClient = r, this.c360url = this.c360Config.TRACK_BASE_URL, this.props = e, this.batchQueue = this.batchQueue || new l(10, 1e3, this.trackBatch), r.init(this.c360Config)
                }
                track(e) {
                    return i(this, void 0, void 0, (function*() {
                        this.httpClient.post(this.c360url, e, {
                            withHeaders: !0
                        }).catch((e => {
                            this.props.onErrorCallback && this.props.onErrorCallback(new Error(e))
                        }))
                    }))
                }
                sendEvent(e, n) {
                    return i(this, void 0, void 0, (function*() {
                        this.batchQueue.enqueue(e), n && this.batchQueue.flush()
                    }))
                }
            }
        },
        b1f34e95: (e, n, t) => {
            "use strict";
            t.d(n, {
                $O: () => r,
                G1: () => o,
                Oq: () => l,
                RS: () => u,
                _Q: () => c,
                _g: () => s,
                ge: () => a,
                jP: () => d,
                mT: () => i,
                yn: () => m
            });
            const i = "nflt",
                a = ";",
                r = "ac_meta",
                d = "previous_search_id",
                l = {
                    FILTER_CLASS: "class",
                    FILTER_HOTEL_TYPE: "ht_id",
                    FILTER_24HR_RECEPTION: "hr_24",
                    FILTER_FACILITIES: "hotelfacility",
                    FILTER_ROOM_FACILITIES: "roomfacility",
                    FILTER_DISTRICT: "di",
                    FILTER_CHAINS: "chaincode",
                    FILTER_CHAIN: "chain",
                    FILTER_DEALS: "any_deal",
                    FILTER_DEALS_V2: "deals_filter_v2",
                    FILTER_FREE_CANCELLATION: "fc",
                    FILTER_PAYMENT_METHOD: "pmt",
                    FILTER_MEALPLAN: "mealplan",
                    FILTER_PRICE_SLIDER: "price",
                    FILTER_HT_BEACH: "ht_beach",
                    FILTER_TWIN_DOUBLE: "tdb",
                    FILTER_POPULAR_ACTIVITIES: "popular_activities",
                    FILTER_REVIEW_SCORE: "review_score",
                    FILTER_FAMILY_FRIENDLY_PROPERTY: "family_friendly_property",
                    FILTER_OUT_OF_STOCK: "oos",
                    FILTER_PRIVATE_BRAND: "ibr",
                    FILTER_ACCESSIBLE_FACILITIES: "accessible_facilities",
                    FILTER_ACCESSIBLE_ROOM_FACILITIES: "accessible_room_facilities",
                    FILTER_DISTANCE_TO_SKI_LIFT_FILTER: "distanceToSkiliftFilter",
                    FILTER_MIN_BATHROOMS: "min_bathrooms",
                    FILTER_UFI: "uf",
                    FILTER_POPULAR_NEARBY_LANDMARKS: "popular_nearby_landmarks",
                    FILTER_DISTANCE: "distance",
                    FILTER_SEO_THEME: "sth",
                    FILTER_HEALTH_AND_HYGIENE: "health_and_hygiene",
                    FILTER_NUM_BEDS: "num_beds",
                    FILTER_TOP_DESTINATIONS: "top_destinations",
                    FILTER_POPULAR: "popular",
                    FILTER_POPULAR_STICKY: "popular_sticky",
                    FILTER_NO_DORMS: "rpt",
                    FILTER_PRIVACY_TYPE: "privacy_type",
                    FILTER_PRIVACY_TYPE_NO_DATE: "privacy_type_no_date",
                    FILTER_GENIUS_BENEFITS: "genius_benefits",
                    FILTER_PREVIOUSLY_USED: "used_filters",
                    FILTER_BEACH_ACCESS_FACILITY: "BeachAccessFacilityFilter",
                    FILTER_SUSTAINABLE_PROPERTY: "SustainablePropertyFilter",
                    FILTER_SUSTAINABLE_LEVEL_PROPERTY: "SustainablePropertyLevelFilter",
                    FILTER_THAI_PASS: "thai_pass",
                    FILTER_UNIT_CONFIG: "unit_config_grouped",
                    FILTER_RATED_HIGH: "rated_high",
                    FILTER_DISTANCE_TO_POI: "distance_to_poi",
                    FILTER_EPU_BEDROOM_COUNT: "entire_place_bedroom_count",
                    FILTER_DISTRICT_THEME: "dti"
                },
                s = ["offset", "activeTab", "sb", "src_elem", "hstrmdl"],
                o = "min",
                c = "max",
                m = new RegExp(`^.+-(${o}|[0-9]+)-(${c}|[0-9]+)-1`, "i"),
                u = "sr_sfu"
        },
        dfbd7c7c: (e, n, t) => {
            "use strict";
            t.d(n, {
                z5: () => i
            });
            let i = function(e) {
                return e.AIRPORT = "AIRPORT", e.BOUNDING_BOX = "BOUNDING_BOX", e.CHAIN = "CHAIN", e.CITY = "CITY", e.COUNTRY = "COUNTRY", e.DISTRICT = "DISTRICT", e.HOTEL = "HOTEL", e.IATA = "IATA", e.LANDMARK = "LANDMARK", e.LATLONG = "LATLONG", e.NO_DEST_TYPE = "NO_DEST_TYPE", e.REGION = "REGION", e.SUB_REGION = "SUB_REGION", e.UNRECOGNIZED = "UNRECOGNIZED", e
            }({})
        },
        "01be079e": (e, n, t) => {
            "use strict";
            t.d(n, {
                y: () => R
            });
            var i = t("28dbd132"),
                a = t("d1e54a96"),
                r = t("4f475142"),
                d = t("9c64ac31");
            const l = {
                    DEFAULT: 1,
                    MIN: 1,
                    MAX: 30
                },
                s = {
                    DEFAULT: 2,
                    MIN: 1,
                    MAX: 30
                },
                o = {
                    DEFAULT: 0,
                    MIN: 0,
                    MAX: 10
                },
                c = {
                    DEFAULT: 0,
                    MIN: 0,
                    MAX: 17
                },
                m = (l.DEFAULT, s.DEFAULT, o.DEFAULT, (e, n) => {
                    if (null === e) return null;
                    const t = parseInt(e, 10);
                    return isNaN(t) || t < n.MIN || t > n.MAX ? null : t
                });
            var u = t("dfbd7c7c");
            const v = ["city", "landmark", "district", "airport", "region", "country", "hotel"];
            var k = function(e) {
                return e[e.OVERRIDE_NONE = 0] = "OVERRIDE_NONE", e[e.OVERRIDE_CITY = 1] = "OVERRIDE_CITY", e[e.OVERRIDE_REGION = 2] = "OVERRIDE_REGION", e[e.OVERRIDE_REGION_OR_CITY = 3] = "OVERRIDE_REGION_OR_CITY", e
            }(k || {});
            const g = /^[A-Z0-9]{3}$/,
                p = e => e <= 2147483647 && e >= -2147483648;

            function _(e) {
                const n = [];
                return e.forEach((e => {
                    const t = parseInt(e, 10);
                    t && p(t) && n.push(t)
                })), n
            }

            function S(e) {
                const n = parseInt(e || "", 10);
                return p(n) ? n : null
            }
            var h = t("67934118"),
                N = t("b1f34e95");
            const E = "sr_view",
                f = "grid",
                C = "list";
            const T = ["test", "ucfac", "ucfgff", "ucfvc", "ucfdsh", "ffsau", "srhp", "sb_entire_place", N.RS];

            function I(e, n) {
                return e.map((e => {
                    const t = [e.roomId, e.policyGroupId, e.occupancy, e.mealPlanId, e.packageId];
                    let a = !1;
                    return "bundleId" in e && e.bundleId && 0 !== e.bundleId && ((0, i.trackExperimentStage)(i.exp `GDIcdSZcPALCcHOPQLRBEBFQTKfAHASCZSBXe`, 1), (0, i.trackExperiment)(i.exp `GDIcdSZcPALCcHOPQLRBEBFQTKfAHASCZSBXe`) > 0 && (t.push(e.bundleId), a = !0)), n && "price" in e && e.price && (a || t.push(""), t.push(Math.round(100 * e.price))), t.join("_")
                })).join(",")
            }

            function R(e, n, t) {
                const p = e.searchParams,
                    N = (0, a.constructUrl)({
                        pathname: `/hotel/${n.countryCode}/${n.pageName}${"en-us"===n.lang?"":"."+n.lang}.html`
                    }),
                    R = N.searchParams,
                    b = p.get("source_label");
                if (b && R.set("source_label", b), R.set("ucfs", "1"), null !== t && void 0 !== t && t.skipNonMapParams || R.set("arphpl", "1"), n.dates && n.dates.checkin && n.dates.checkout) R.set("checkin", n.dates.checkin), R.set("checkout", n.dates.checkout);
                else {
                    const e = (0, r.Xk)(p);
                    e && (R.set("checkin", (0, r.Gr)(e.checkin)), R.set("checkout", (0, r.Gr)(e.checkout)))
                }
                const F = (null === n || void 0 === n ? void 0 : n.location) || function(e) {
                    const n = S(e.get("dest_id")),
                        t = e.get("dest_type"),
                        i = _(e.getAll("highlighted_hotels")),
                        a = Boolean(e.get("is_aroundme")),
                        r = e.get("ss"),
                        d = e.get("ss_label"),
                        l = Boolean(e.get("top_ufis")),
                        s = {};
                    i.length && (s.hotelIds = i), a && (s.isAroundMe = !0), r && (s.searchString = r), d && (s.searchStringLabel = d), l && (s.topUfis = !0);
                    const o = _(e.getAll("hotelids"));
                    if (o.length && !r) return { ...s,
                        destId: 0,
                        destType: u.z5.HOTEL,
                        hotelIds: o
                    };
                    if (n && t) {
                        const e = u.z5[t.toUpperCase()];
                        if (e && e !== u.z5.LATLONG) return e === u.z5.HOTEL && delete s.hotelIds, { ...s,
                            destType: e,
                            destId: n
                        }
                    }
                    const c = parseFloat(e.get("latitude") || e.get("place_id_lat") || ""),
                        m = parseFloat(e.get("longitude") || e.get("place_id_lon") || "");
                    if (c && m) return { ...s,
                        destType: u.z5.LATLONG,
                        latitude: c,
                        longitude: m
                    };
                    for (const k of v) {
                        const n = S(e.get(k)),
                            t = u.z5[k.toUpperCase()];
                        if (n && t) return { ...s,
                            destType: t,
                            destId: n
                        }
                    }
                    const p = (e.get("iata") || "").toUpperCase().trim();
                    if (p && g.test(p)) {
                        const n = parseInt(e.get("iata_orr") || "", 10),
                            t = k[n];
                        return { ...s,
                            airportOverride: t || null,
                            destType: u.z5.IATA,
                            iata: p
                        }
                    }
                    return { ...s,
                        destId: 0,
                        destType: u.z5.NO_DEST_TYPE
                    }
                }(p);
                "destId" in F && "destType" in F && F.destType !== u.z5.NO_DEST_TYPE && (R.set("dest_id", String(F.destId)), R.set("dest_type", String(F.destType).toLowerCase()));
                const y = n.group || function(e) {
                    const n = {},
                        t = m(e.get("group_children"), o);
                    null !== t && (n.nbChildren = t, n.childrenAges = e.getAll("age").map((e => {
                        const n = m(e, c);
                        return null === n ? null : n
                    })).filter((e => null !== e)));
                    const i = m(e.get("no_rooms"), l);
                    null !== i && (n.nbRooms = i);
                    const a = m(e.get("group_adults"), s);
                    return null !== a && (n.nbAdults = a), n
                }(p);
                "undefined" !== typeof y.nbAdults && (R.set("group_adults", String(y.nbAdults)), null !== t && void 0 !== t && t.skipNonMapParams || R.set("req_adults", String(y.nbAdults))), "undefined" !== typeof y.nbRooms && R.set("no_rooms", String(y.nbRooms)), "undefined" !== typeof y.nbChildren && (R.set("group_children", String(y.nbChildren)), null !== t && void 0 !== t && t.skipNonMapParams || R.set("req_children", String(y.nbChildren))), y.childrenAges && y.childrenAges.forEach((e => {
                    R.append("age", String(e)), R.append("req_age", String(e))
                })), "undefined" !== typeof n.propertyIndex && R.set("hpos", String(n.propertyIndex)), "undefined" !== typeof n.propertyAbsoluteIndex && R.set("hapos", String(n.propertyAbsoluteIndex));
                const P = n.order || p.get("order");
                if (P && R.set("sr_order", P), (0, d.xL)(R, (0, d.IM)(p)), "pageViewId" in n && n.pageViewId && (R.set("srpvid", n.pageViewId), R.set("srepoch", String(Math.round(Date.now() / 1e3)))), "isSoldout" in n && n.isSoldout && R.set("soh", "1"), "blocks" in n && n.blocks && n.blocks.length) {
                    const e = I(n.blocks);
                    null !== t && void 0 !== t && t.skipNonMapParams || (R.set("all_sr_blocks", e), R.set("highlighted_blocks", e)), R.set("matching_block_id", I([n.blocks[0]])), "isBlocksPriceIncluded" in n && n.isBlocksPriceIncluded && R.set("sr_pri_blocks", I(n.blocks, !0))
                }(0, h.C3)(p) && N.searchParams.set(h.w3, h.H), "isSkiSR" in n && n.isSkiSR && R.set("from_ski_sr", "1"), "dtslId" in n && "dtslType" in n && n.dtslId && n.dtslType && (R.set("dtsl_id", String(n.dtslId)), R.set("dtsl_type", n.dtslType)), "ucfac" in n && n.ucfac && R.set("ucfac", n.ucfac), "ucfgff" in n && n.ucfgff && R.set("ucfgff", n.ucfgff);
                const A = "isNativeAd" in n && n.isNativeAd,
                    O = "nativeAdId" in n && n.nativeAdId,
                    w = "nativeAdsCpc" in n && n.nativeAdsCpc,
                    M = "nativeAdsTracking" in n && n.nativeAdsTracking,
                    L = "nativeAdsLegalEntityName" in n && n.nativeAdsLegalEntityName,
                    x = "nativeAdsPlacement" in n && n.nativeAdsPlacement;
                if (A && O && w && M && (R.set("nad_id", O), R.set("nad_cpc", String(w)), R.set("nad_track", M), L && R.set("nad_legal_name", L), x && R.set("nad_placement", x)), "isSustainableProperty" in n && n.isSustainableProperty && R.set("from_sustainable_property_sr", "1"), n.isDCSClick && R.set("dcs_click", "1"), T.forEach((e => {
                        p.has(e) && "0" !== p.get(e) && !R.has(e) && R.set(e, "1")
                    })), !(0, i.trackExperiment)(i.exp `HVQeYFRURURYTfUOeOAJZbVPLDFFMPCC`)) {
                    const n = function(e) {
                        const n = null === e || void 0 === e ? void 0 : e.searchParams.get(E);
                        return n === f || n === C ? n : void 0
                    }(e);
                    n && R.set(E, n)
                }
                return "atlasSrc" in n && n.atlasSrc && R.set("atlas_src", n.atlasSrc), "flex_window" in n && n.flex_window && R.set("flex_window", n.flex_window), "ltfd" in n && n.ltfd && R.set("ltfd", n.ltfd), N
            }
        },
        dd6086f7: (e, n, t) => {
            "use strict";
            t.d(n, {
                d: () => l
            });
            var i = t("dc6d28ff"),
                a = t("d1e54a96"),
                r = t("67934118"),
                d = t("b1f34e95");

            function l(e) {
                let {
                    ucfac: n,
                    ucfgff: t,
                    ffsau: l,
                    highlightedPropertyId: s,
                    tripThemeId: o,
                    destType: c,
                    destId: m,
                    isAroundme: u,
                    latitude: v,
                    longitude: k,
                    travelPurpose: g,
                    sorter: p,
                    selectedFilters: _,
                    checkin: S,
                    checkout: h,
                    nbAdults: N,
                    nbChildren: E,
                    childrenAges: f,
                    nbRooms: C,
                    postcard: T,
                    sleepingRoomMatch: I,
                    showApartHotels: R,
                    loginRedirect: b,
                    fromSearchHistorySearchbox: F,
                    lpThemeId: y,
                    previousSearchId: P,
                    srView: A,
                    sourceLabel: O
                } = e;
                const w = (0, i.getRequestContext)().getLanguage(),
                    M = (0, a.constructUrl)({
                        pathname: `/searchresults${"en-us"===w?"":"."+w}.html`
                    }),
                    L = M.searchParams;
                if (S && h && (L.set("checkin", S), L.set("checkout", h)), m && c && (L.set("dest_id", String(m)), L.set("dest_type", String(c).toLowerCase())), "boolean" === typeof u && L.set("is_aroundme", u ? "1" : "0"), "undefined" !== typeof v && "undefined" !== typeof k && (L.set("latitude", String(v)), L.set("longitude", String(k))), "undefined" !== typeof g) {
                    const e = (0, r.DT)(parseInt(String(g), 10));
                    e && L.set(r.w3, e)
                }
                return _ && L.set(d.mT, _), p && L.set("order", p), "undefined" !== typeof N && (L.set("group_adults", String(N)), L.set("req_adults", String(N))), "undefined" !== typeof C && L.set("no_rooms", String(C)), "undefined" !== typeof E && (L.set("group_children", String(E)), L.set("req_children", String(E))), f && f.forEach((e => {
                    L.append("age", String(e)), L.append("req_age", String(e))
                })), s && L.set("highlighted_hotels", String(s)), o && L.set("trip_theme", String(o)), n && L.set("ucfac", n), t && L.set("ucfgff", t), l && L.set("ffsau", l), T && L.set("postcard", T), I && L.set("slp_r_match_to", I), R && L.set("shw_aparth", R), b && L.set("login_redirect", b), F && L.set("fshsb", "1"), y && L.set("theme_id", String(y)), P && L.set(d.jP, P), A && L.set("sr_view", A), O && L.set("source_label", O), M
            }
        },
        "4f475142": (e, n, t) => {
            "use strict";
            t.d(n, {
                Gr: () => k,
                Xk: () => v
            });
            var i = t("24e040c9"),
                a = t.n(i),
                r = t("e65db334"),
                d = t.n(r),
                l = t("7fd19181"),
                s = t.n(l),
                o = t("8da416e8"),
                c = t.n(o);
            (0, i.extend)(c()), (0, i.extend)(s()), (0, i.extend)(d());
            const m = "YYYY-MM-DD";

            function u(e, n, t) {
                const i = n.get(t ? "checkout_year_month" : "checkin_year_month");
                if (!i) return e;
                if (!Number(e.month) || !Number(e.year)) {
                    const [n, t] = i.split("-");
                    return { ...e,
                        year: n,
                        month: t
                    }
                }
                return e
            }

            function v(e) {
                if (!e) return null;
                const n = u({
                        year: e.get("checkin_year"),
                        month: e.get("checkin_month"),
                        day: e.get("checkin_monthday")
                    }, e),
                    t = u({
                        year: e.get("checkout_year"),
                        month: e.get("checkout_month"),
                        day: e.get("checkout_monthday")
                    }, e, !0);
                let i = a().utc([n.year, n.month, n.day].join("-"), "YYYY-M-D");
                i.isValid() || (i = a().utc(e.get("checkin") || "", "YYYY-M-D"));
                let r = a().utc([t.year, t.month, t.day].join("-"), "YYYY-M-D");
                if (r.isValid() || (r = a().utc(e.get("checkout") || "", "YYYY-M-D")), i.isValid()) {
                    const n = parseInt(String(e.get("interval")), 10);
                    !isNaN(n) && n > 0 && (r = i.add(n, "day"))
                }
                return i.isValid() && r.isValid() ? {
                    checkin: i.toDate(),
                    checkout: r.toDate()
                } : null
            }

            function k(e) {
                return a().utc(e).format(m)
            }
        },
        "9c64ac31": (e, n, t) => {
            "use strict";
            t.d(n, {
                IM: () => r,
                xL: () => d
            });
            var i = t("239beb17"),
                a = t("b1f34e95");
            new class {
                constructor() {
                    this.filtersData = {}
                }
                addFilterData(e, n) {
                    this.filtersData[e] = n
                }
                getFilterData(e) {
                    return this.filtersData[e]
                }
                removeAllFiltersData() {
                    this.filtersData = {}
                }
            };
            t("dfbd7c7c");

            function r(e) {
                let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                    t = e.get(a.mT) || "";
                try {
                    t = decodeURIComponent(t)
                } catch (r) {}
                let i = t.split(a.ge);
                return i = i.filter((e => !!e)), !0 === n && (i = i.filter((e => {
                    const [, n] = e.split("=");
                    return ! function(e) {
                        const n = String(e).match(a.yn);
                        if (!n) return !1;
                        return n[1].toLocaleLowerCase() === a.G1 && n[2].toLocaleLowerCase() === a._Q
                    }(n)
                }))), i
            }

            function d(e, n, t) {
                const r = n.join(a.ge);
                if (r ? e.set(a.mT, r) : e.delete(a.mT), t) {
                    const n = [...a._g];
                    (0, i.isFeatureRunning)(i.feature `HVLDTLUeIeWcMWBaBBYdaWNIHcUeLT`) && n.push(a.$O), n.forEach((n => e.delete(n)))
                }
            }
        },
        67934118: (e, n, t) => {
            "use strict";
            t.d(n, {
                C3: () => s,
                DT: () => o,
                H: () => i,
                w3: () => r
            });
            const i = "business",
                a = "leisure",
                r = "sb_travel_purpose",
                d = 1,
                l = 2;

            function s(e) {
                return e.get(r) === i
            }

            function o(e) {
                return e === d ? i : e === l ? a : void 0
            }
        },
        "2e4ef946": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => i
            });
            const i = {
                text: "c9d8f2b464",
                iconAlignStart: "bd8ec2c286"
            }
        },
        c6ddcf1d: (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => i
            });
            const i = {
                card: "a8663bc8ab",
                cardElevated: "baad532480",
                title: "cf0e25a46d",
                footer: "dc98e0be6d",
                ratingWithPopover: "b751091ba1",
                contentBox: "c51e32e283",
                removeBorder: "fe65790d1a",
                sliderContainer: "d0a98ff0d1",
                textWrapper: "a509a6a16f",
                cardWrapper: "ef200ef4bd",
                wishlistWidgetWrapper: "c991f04c60",
                cardBadge: "c2852fafa8"
            }
        },
        "043433df": (e, n, t) => {
            "use strict";
            t.d(n, {
                Z: () => i
            });
            const i = {
                card: "ca9e0d76f0",
                image: "ec0ad5a833",
                titleContainer: "f77b3c9cc6",
                badge: "eb8ea2eb71",
                formattedPrice: "d1d9843bc6",
                linkCardWrapper: "b6d0361edb",
                linkCard: "a9f6767aeb",
                textWrapper: "e5fe257ca6",
                description: "be46cfc1aa"
            }
        },
        bca4b277: (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "m.153 22.237.85 1.117c.634.76 1.724.856 2.456.244q.117-.099.216-.217l.944-1.132a.228.228 0 0 1 .349.001l.944 1.13a1.728 1.728 0 0 0 2.651.001l.944-1.132a.228.228 0 0 1 .349.001l.95 1.132a1.728 1.728 0 0 0 2.65 0l.942-1.133a.228.228 0 0 1 .349.001l.942 1.13a1.728 1.728 0 0 0 2.651.001l.944-1.132a.228.228 0 0 1 .349.001l.94 1.13a1.728 1.728 0 0 0 2.652.001l.585-.7a.75.75 0 1 0-1.15-.962l-.585.7a.228.228 0 0 1-.35 0l-.94-1.13a1.728 1.728 0 0 0-2.652-.001l-.944 1.132a.228.228 0 0 1-.349-.001l-.942-1.13a1.728 1.728 0 0 0-2.651-.001l-.943 1.132a.228.228 0 0 1-.348-.001l-.95-1.132a1.726 1.726 0 0 0-2.65 0l-.944 1.133a.228.228 0 0 1-.349-.001l-.944-1.13a1.728 1.728 0 0 0-2.65 0l-.945 1.13a.228.228 0 0 1-.349-.001l-.828-1.09a.75.75 0 1 0-1.194.91zm11.335-2.68A7.16 7.16 0 0 1 15.77 18h7.481a.75.75 0 0 0 0-1.5h-7.5a8.67 8.67 0 0 0-5.196 1.884.75.75 0 1 0 .934 1.174zM22.285 7.969a1.73 1.73 0 0 0 .781-2.711C19.43.713 12.8-.022 8.256 3.614a10.54 10.54 0 0 0-3.952 8.171A1.73 1.73 0 0 0 6.6 13.427l15.684-5.459zm-.494-1.416L6.107 12.01a.23.23 0 0 1-.304-.218 9.036 9.036 0 0 1 16.09-5.599.228.228 0 0 1-.102.359zm-9.459-4.2L11.69.504a.75.75 0 1 0-1.416.492l.643 1.848a.75.75 0 1 0 1.416-.492zm1.156 7.883 2.527 7.262a.75.75 0 1 0 1.416-.494l-2.527-7.26a.75.75 0 1 0-1.416.492"
                }))
            }
        },
        "337dc83a": (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M2.75 12h18.5c.69 0 1.25.56 1.25 1.25V18l.75-.75H.75l.75.75v-4.75c0-.69.56-1.25 1.25-1.25m0-1.5A2.75 2.75 0 0 0 0 13.25V18c0 .414.336.75.75.75h22.5A.75.75 0 0 0 24 18v-4.75a2.75 2.75 0 0 0-2.75-2.75zM0 18v3a.75.75 0 0 0 1.5 0v-3A.75.75 0 0 0 0 18m22.5 0v3a.75.75 0 0 0 1.5 0v-3a.75.75 0 0 0-1.5 0m-.75-6.75V4.5a2.25 2.25 0 0 0-2.25-2.25h-15A2.25 2.25 0 0 0 2.25 4.5v6.75a.75.75 0 0 0 1.5 0V4.5a.75.75 0 0 1 .75-.75h15a.75.75 0 0 1 .75.75v6.75a.75.75 0 0 0 1.5 0m-13.25-3h7a.25.25 0 0 1 .25.25v2.75l.75-.75h-9l.75.75V8.5a.25.25 0 0 1 .25-.25m0-1.5A1.75 1.75 0 0 0 6.75 8.5v2.75c0 .414.336.75.75.75h9a.75.75 0 0 0 .75-.75V8.5a1.75 1.75 0 0 0-1.75-1.75z"
                }))
            }
        },
        "58ff1375": (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M2.75 6h9.5a.25.25 0 0 1-.25-.25v17.5l.75-.75H2.25l.75.75V5.75a.25.25 0 0 1-.25.25m0-1.5c-.69 0-1.25.56-1.25 1.25v17.5c0 .414.336.75.75.75h10.5a.75.75 0 0 0 .75-.75V5.75c0-.69-.56-1.25-1.25-1.25zm3-1.5h3.5A.25.25 0 0 1 9 2.75v2.5l.75-.75h-4.5l.75.75v-2.5a.25.25 0 0 1-.25.25m0-1.5c-.69 0-1.25.56-1.25 1.25v2.5c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-2.5c0-.69-.56-1.25-1.25-1.25zM5.25 9h4.5a.75.75 0 0 0 0-1.5h-4.5a.75.75 0 0 0 0 1.5m0 3h4.5a.75.75 0 0 0 0-1.5h-4.5a.75.75 0 0 0 0 1.5m0 3h4.5a.75.75 0 0 0 0-1.5h-4.5a.75.75 0 0 0 0 1.5m0 3h4.5a.75.75 0 0 0 0-1.5h-4.5a.75.75 0 0 0 0 1.5m0 3h4.5a.75.75 0 0 0 0-1.5h-4.5a.75.75 0 0 0 0 1.5M7.5.75v1.5a.75.75 0 0 0 1.5 0V.75a.75.75 0 0 0-1.5 0M15.75 24h6a.75.75 0 0 0 .75-.75V10.5A1.5 1.5 0 0 0 21 9h-4.5a1.5 1.5 0 0 0-1.5 1.5v12.75a.75.75 0 0 0 1.5 0V10.5H21v12.75l.75-.75h-6a.75.75 0 0 0 0 1.5M19.5 8.25v1.5a.75.75 0 0 0 1.5 0v-1.5a.75.75 0 0 0-1.5 0M.75 24h22.5a.75.75 0 0 0 0-1.5H.75a.75.75 0 0 0 0 1.5"
                }))
            }
        },
        "1424d033": (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M15 8.25a3 3 0 1 1-6 0 3 3 0 0 1 6 0m1.5 0a4.5 4.5 0 1 0-9 0 4.5 4.5 0 0 0 9 0M12 1.5a6.75 6.75 0 0 1 6.75 6.75c0 2.537-3.537 9.406-6.75 14.25-3.214-4.844-6.75-11.713-6.75-14.25A6.75 6.75 0 0 1 12 1.5M12 0a8.25 8.25 0 0 0-8.25 8.25c0 2.965 3.594 9.945 7 15.08a1.5 1.5 0 0 0 2.5 0c3.406-5.135 7-12.115 7-15.08A8.25 8.25 0 0 0 12 0"
                }))
            }
        },
        "73a0d57d": (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M6 6a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m1.5 0a3 3 0 1 0-6 0 3 3 0 0 0 6 0m-3 3A4.5 4.5 0 0 0 0 13.5v2.25c0 .414.336.75.75.75h1.5l-.744-.657.75 6A.75.75 0 0 0 3 22.5h3A.75.75 0 0 0 6 21H3l.744.657-.75-6A.75.75 0 0 0 2.25 15H.75l.75.75V13.5a3 3 0 0 1 3-3 .75.75 0 0 0 0-1.5M21 6a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m1.5 0a3 3 0 1 0-6 0 3 3 0 0 0 6 0m-3 4.5a3 3 0 0 1 3 3v2.25l.75-.75h-1.5a.75.75 0 0 0-.744.657l-.75 6L21 21h-3a.75.75 0 0 0 0 1.5h3a.75.75 0 0 0 .744-.657l.75-6-.744.657h1.5a.75.75 0 0 0 .75-.75V13.5A4.5 4.5 0 0 0 19.5 9a.75.75 0 0 0 0 1.5m-5.25-6.75a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0m1.5 0a3.75 3.75 0 1 0-7.5 0 3.75 3.75 0 0 0 7.5 0M18 13.5a6 6 0 0 0-12 0v2.25c0 .414.336.75.75.75H9l-.746-.675.75 7.5A.75.75 0 0 0 9.75 24h4.5a.75.75 0 0 0 .746-.675l.75-7.5L15 16.5h2.25a.75.75 0 0 0 .75-.75zm-1.5 0v2.25l.75-.75H15a.75.75 0 0 0-.746.675l-.75 7.5.746-.675h-4.5l.746.675-.75-7.5A.75.75 0 0 0 9 15H6.75l.75.75V13.5a4.5 4.5 0 1 1 9 0"
                }))
            }
        },
        "1c0fcf2b": (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M4.5 8.911h3l-.75-.75v9l.75-.75h-3l.75.75v-9zm0-1.5a.75.75 0 0 0-.75.75v9c0 .414.336.75.75.75h3a.75.75 0 0 0 .75-.75v-9a.75.75 0 0 0-.75-.75zm6 1.5h3l-.75-.75v9l.75-.75h-3l.75.75v-9zm0-1.5a.75.75 0 0 0-.75.75v9c0 .414.336.75.75.75h3a.75.75 0 0 0 .75-.75v-9a.75.75 0 0 0-.75-.75zm6 1.5h3l-.75-.75v9l.75-.75h-3l.75.75v-9zm0-1.5a.75.75 0 0 0-.75.75v9c0 .414.336.75.75.75h3a.75.75 0 0 0 .75-.75v-9a.75.75 0 0 0-.75-.75zm4.5 12H3l.75.75v-2.25h16.5v2.25zm0 1.5a.75.75 0 0 0 .75-.75v-2.25a1.5 1.5 0 0 0-1.5-1.5H3.75a1.5 1.5 0 0 0-1.5 1.5v2.25c0 .414.336.75.75.75zm-19.5 3h21a.75.75 0 0 0 0-1.5h-21a.75.75 0 0 0 0 1.5m0-3h21a.75.75 0 0 0 0-1.5h-21a.75.75 0 0 0 0 1.5m18.75-15.75v2.25H3.75v-2.25l-.415.67L12 1.5l8.665 4.332zm1.5 0a.75.75 0 0 0-.415-.67L12.67.157a1.5 1.5 0 0 0-1.34 0L2.666 4.49a.75.75 0 0 0-.415.671v2.25a1.5 1.5 0 0 0 1.5 1.5h16.5a1.5 1.5 0 0 0 1.5-1.5v-2.25zM3 5.911h18a.75.75 0 0 0 0-1.5H3a.75.75 0 0 0 0 1.5"
                }))
            }
        },
        "814bd9d3": (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M10.439.75v1.5a.75.75 0 0 0 1.5 0V.75a.75.75 0 0 0-1.5 0m0 7.5v3a.75.75 0 0 0 1.5 0v-3a.75.75 0 0 0-1.5 0m0 9v6a.75.75 0 0 0 1.5 0v-6a.75.75 0 0 0-1.5 0m9.75-9.75h-16.5l.75.75v-6l-.75.75h16.5l-.53-.22 2.47 2.47-2.47 2.47zm0 1.5a.75.75 0 0 0 .53-.22l2.47-2.47a1.5 1.5 0 0 0 0-2.121l-2.47-2.47a.75.75 0 0 0-.53-.219h-16.5a.75.75 0 0 0-.75.75v6c0 .414.336.75.75.75zm-16.5 3h16.5l-.75-.75v6l.75-.75h-16.5l.53.22-2.469-2.47 2.47-2.47zm0-1.5a.75.75 0 0 0-.53.22l-2.47 2.469a1.5 1.5 0 0 0 0 2.121l2.47 2.47c.14.14.331.22.53.22h16.5a.75.75 0 0 0 .75-.75v-6a.75.75 0 0 0-.75-.75z"
                }))
            }
        },
        a70d6b8e: (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "m20.505 7.5-15.266.022.672.415-1.1-2.2a.75.75 0 0 0-.638-.414l-2.293-.1C.82 5.228-.003 6.06.003 7.083c.002.243.051.484.146.709l2.072 4.68a2.95 2.95 0 0 0 2.701 1.778h4.043l-.676-1.075-2.484 5.168A1.83 1.83 0 0 0 7.449 21h2.099a1.85 1.85 0 0 0 1.419-.664l5.165-6.363-.582.277h4.956c1.82.09 3.399-1.341 3.49-3.198l.004-.134a3.426 3.426 0 0 0-3.44-3.419l-.074.001zm.02 1.5h.042a1.924 1.924 0 0 1 1.933 1.914l-.002.065a1.866 1.866 0 0 1-1.955 1.772l-4.993-.001a.75.75 0 0 0-.582.277l-5.16 6.355a.35.35 0 0 1-.26.118h-2.1a.336.336 0 0 1-.3-.49l2.493-5.185a.75.75 0 0 0-.676-1.075H4.924a1.45 1.45 0 0 1-1.328-.878l-2.07-4.676a.35.35 0 0 1 .326-.474l2.255.1-.638-.415 1.1 2.2a.75.75 0 0 0 .672.415L20.507 9zm-4.202-1.24-2.992-4.02A1.85 1.85 0 0 0 11.85 3H9.783a1.85 1.85 0 0 0-1.654 2.672l1.439 2.91a.75.75 0 0 0 1.344-.664l-1.44-2.911a.35.35 0 0 1 .312-.507h2.066a.35.35 0 0 1 .279.14l2.99 4.017a.75.75 0 1 0 1.203-.896z"
                }))
            }
        },
        "6cc81d04": (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M18.84 0c-.265 0-.528.04-.78.12L6.18 5h-.06a3.27 3.27 0 0 0-1.8 1.21 3.63 3.63 0 0 0-.7 2.11v.83a.69.69 0 0 0 .66.71.69.69 0 0 0 .66-.71v-.81a2.1 2.1 0 0 1 .58-1.45 1.92 1.92 0 0 1 1.39-.61h13.8a1.92 1.92 0 0 1 1.4.61c.373.39.581.91.58 1.45v10.18a2.12 2.12 0 0 1-.58 1.48 2 2 0 0 1-1.4.6h-6.8a.66.66 0 0 0-.63.69.65.65 0 0 0 .63.68h6.8A3.25 3.25 0 0 0 23 21a3.56 3.56 0 0 0 1-2.43V8.34a3.53 3.53 0 0 0-.67-2.07A3.3 3.3 0 0 0 21.58 5V2.85a2.8 2.8 0 0 0-.28-1.27 2.74 2.74 0 0 0-.81-1 2.7 2.7 0 0 0-1.16-.53 2.7 2.7 0 0 0-.49 0zM9.91 4.91l8.54-3.48q.19-.06.39-.06.135-.015.27 0c.217.043.42.14.59.28.179.134.323.309.42.51.099.206.15.432.15.66v2.09zm9 6.39a2 2 0 0 0-1.12.34 2 2 0 0 0-.85 2.06 2 2 0 0 0 1.57 1.58q.2.023.4 0a2 2 0 0 0 2-2.01 2.1 2.1 0 0 0-.59-1.42 2 2 0 0 0-1.41-.59zm0 2.9a.91.91 0 0 1-.91-1.06.9.9 0 0 1 .25-.46.86.86 0 0 1 .45-.24h.18a.75.75 0 0 1 .33.07.77.77 0 0 1 .4.33.84.84 0 0 1 .15.49.88.88 0 0 1-.26.63.85.85 0 0 1-.62.26zM6.13 10.86c-3.34 0-6.13 1.5-6.13 3.65v5.84C0 22.5 2.79 24 6.13 24s6.13-1.5 6.13-3.65v-5.84c0-2.15-2.8-3.65-6.13-3.65m0 5.84c-2.68 0-4.77-1.12-4.77-2.19s2.09-2.19 4.77-2.19 4.76 1.12 4.76 2.19S8.8 16.7 6.13 16.7m0 1.46a8.3 8.3 0 0 0 4.76-1.31v.58c0 1.07-2.08 2.19-4.76 2.19s-4.77-1.12-4.77-2.19v-.58a8.3 8.3 0 0 0 4.77 1.31m0 2.92a8.3 8.3 0 0 0 4.76-1.31v.58c0 1.07-2.08 2.19-4.76 2.19s-4.77-1.12-4.77-2.19v-.58a8.3 8.3 0 0 0 4.77 1.31"
                }))
            }
        },
        "0788da83": (e, n, t) => {
            "use strict";
            t.r(n), t.d(n, {
                default: () => a
            });
            var i = t("ead71eb0");
            const a = function() {
                return i.createElement("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 24 24",
                    width: "50px"
                }, i.createElement("path", {
                    d: "M22.5 12c0 5.799-4.701 10.5-10.5 10.5S1.5 17.799 1.5 12 6.201 1.5 12 1.5 22.5 6.201 22.5 12m1.5 0c0-6.627-5.373-12-12-12S0 5.373 0 12s5.373 12 12 12 12-5.373 12-12M7.08 16.5a2.25 2.25 0 0 0 2.182-2.796l-.75-3A2.25 2.25 0 0 0 6.329 9H.976a.75.75 0 0 0-.735.6c-.9 4.42.755 8.97 4.284 11.779a.75.75 0 0 0 1.202-.44l1.008-5.042L6 16.5h1.079zM7.078 15H6a.75.75 0 0 0-.735.603l-1.008 5.042 1.202-.44A10.5 10.5 0 0 1 1.711 9.9l-.735.6h5.353a.75.75 0 0 1 .727.568l.75 3A.75.75 0 0 1 7.08 15zM20.985 4.5h-4.064a2.25 2.25 0 0 0-2.183 1.704l-.75 3A2.25 2.25 0 0 0 16.171 12h1.579l-.74-.627.791 4.75a2.25 2.25 0 0 0 2.22 1.88h1.925a.75.75 0 0 0 .663-.399 11.95 11.95 0 0 0-1.026-12.803l-.598.452h.75V5.25a.75.75 0 0 0-.75-.75m0 1.5v-.75h-.75v.003a.75.75 0 0 0 .152.452 10.45 10.45 0 0 1 .896 11.197l.663-.399h-1.925a.75.75 0 0 1-.74-.627l-.791-4.75a.75.75 0 0 0-.74-.626h-1.579a.75.75 0 0 1-.727-.932l.75-3A.75.75 0 0 1 16.92 6z"
                }))
            }
        },
        "3e394088": (e, n, t) => {
            "use strict";
            Object.defineProperty(n, "__esModule", {
                value: !0
            }), n.default = void 0;
            var i, a = (i = t("ead71eb0")) && i.__esModule ? i : {
                default: i
            };

            function r() {
                return r = Object.assign || function(e) {
                    for (var n = 1; n < arguments.length; n++) {
                        var t = arguments[n];
                        for (var i in t) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
                    }
                    return e
                }, r.apply(this, arguments)
            }
            var d = function(e) {
                return a.default.createElement("svg", r({
                    viewBox: "0 0 128 128",
                    width: "1em",
                    height: "1em"
                }, e), a.default.createElement("path", {
                    d: "M112 8H16a8 8 0 0 0-8 8v96a8 8 0 0 0 8 8h96a8 8 0 0 0 8-8V16a8 8 0 0 0-8-8zM48 96H24V58h24zm56-25a8.7 8.7 0 0 1-2 6 8.9 8.9 0 0 1 1 4 6.9 6.9 0 0 1-5 7c-.5 4-4.8 8-9 8H56V58l10.3-23.3a5.4 5.4 0 0 1 10.1 2.7 10.3 10.3 0 0 1-.6 2.7L72 52h23c4.5 0 9 3.5 9 8a9.2 9.2 0 0 1-2 5.3 7.5 7.5 0 0 1 2 5.7z"
                }))
            };
            n.default = d
        },
        "24e040c9": function(e) {
            e.exports = function() {
                "use strict";
                var e = "millisecond",
                    n = "second",
                    t = "minute",
                    i = "hour",
                    a = "day",
                    r = "week",
                    d = "month",
                    l = "quarter",
                    s = "year",
                    o = /^(\d{4})-?(\d{1,2})-?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d{1,3})?$/,
                    c = /\[([^\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
                    m = function(e, n, t) {
                        var i = String(e);
                        return !i || i.length >= n ? e : "" + Array(n + 1 - i.length).join(t) + e
                    },
                    u = {
                        s: m,
                        z: function(e) {
                            var n = -e.utcOffset(),
                                t = Math.abs(n),
                                i = Math.floor(t / 60),
                                a = t % 60;
                            return (n <= 0 ? "+" : "-") + m(i, 2, "0") + ":" + m(a, 2, "0")
                        },
                        m: function(e, n) {
                            var t = 12 * (n.year() - e.year()) + (n.month() - e.month()),
                                i = e.clone().add(t, d),
                                a = n - i < 0,
                                r = e.clone().add(t + (a ? -1 : 1), d);
                            return Number(-(t + (n - i) / (a ? i - r : r - i)) || 0)
                        },
                        a: function(e) {
                            return e < 0 ? Math.ceil(e) || 0 : Math.floor(e)
                        },
                        p: function(o) {
                            return {
                                M: d,
                                y: s,
                                w: r,
                                d: a,
                                D: "date",
                                h: i,
                                m: t,
                                s: n,
                                ms: e,
                                Q: l
                            }[o] || String(o || "").toLowerCase().replace(/s$/, "")
                        },
                        u: function(e) {
                            return void 0 === e
                        }
                    },
                    v = {
                        name: "en",
                        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
                        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
                    },
                    k = "en",
                    g = {};
                g[k] = v;
                var p = function(e) {
                        return e instanceof N
                    },
                    _ = function(e, n, t) {
                        var i;
                        if (!e) return k;
                        if ("string" == typeof e) g[e] && (i = e), n && (g[e] = n, i = e);
                        else {
                            var a = e.name;
                            g[a] = e, i = a
                        }
                        return !t && i && (k = i), i || !t && k
                    },
                    S = function(e, n) {
                        if (p(e)) return e.clone();
                        var t = "object" == typeof n ? n : {};
                        return t.date = e, t.args = arguments, new N(t)
                    },
                    h = u;
                h.l = _, h.i = p, h.w = function(e, n) {
                    return S(e, {
                        locale: n.$L,
                        utc: n.$u,
                        $offset: n.$offset
                    })
                };
                var N = function() {
                    function m(e) {
                        this.$L = this.$L || _(e.locale, null, !0), this.parse(e)
                    }
                    var u = m.prototype;
                    return u.parse = function(e) {
                        this.$d = function(e) {
                            var n = e.date,
                                t = e.utc;
                            if (null === n) return new Date(NaN);
                            if (h.u(n)) return new Date;
                            if (n instanceof Date) return new Date(n);
                            if ("string" == typeof n && !/Z$/i.test(n)) {
                                var i = n.match(o);
                                if (i) return t ? new Date(Date.UTC(i[1], i[2] - 1, i[3] || 1, i[4] || 0, i[5] || 0, i[6] || 0, i[7] || 0)) : new Date(i[1], i[2] - 1, i[3] || 1, i[4] || 0, i[5] || 0, i[6] || 0, i[7] || 0)
                            }
                            return new Date(n)
                        }(e), this.init()
                    }, u.init = function() {
                        var e = this.$d;
                        this.$y = e.getFullYear(), this.$M = e.getMonth(), this.$D = e.getDate(), this.$W = e.getDay(), this.$H = e.getHours(), this.$m = e.getMinutes(), this.$s = e.getSeconds(), this.$ms = e.getMilliseconds()
                    }, u.$utils = function() {
                        return h
                    }, u.isValid = function() {
                        return !("Invalid Date" === this.$d.toString())
                    }, u.isSame = function(e, n) {
                        var t = S(e);
                        return this.startOf(n) <= t && t <= this.endOf(n)
                    }, u.isAfter = function(e, n) {
                        return S(e) < this.startOf(n)
                    }, u.isBefore = function(e, n) {
                        return this.endOf(n) < S(e)
                    }, u.$g = function(e, n, t) {
                        return h.u(e) ? this[n] : this.set(t, e)
                    }, u.year = function(e) {
                        return this.$g(e, "$y", s)
                    }, u.month = function(e) {
                        return this.$g(e, "$M", d)
                    }, u.day = function(e) {
                        return this.$g(e, "$W", a)
                    }, u.date = function(e) {
                        return this.$g(e, "$D", "date")
                    }, u.hour = function(e) {
                        return this.$g(e, "$H", i)
                    }, u.minute = function(e) {
                        return this.$g(e, "$m", t)
                    }, u.second = function(e) {
                        return this.$g(e, "$s", n)
                    }, u.millisecond = function(n) {
                        return this.$g(n, "$ms", e)
                    }, u.unix = function() {
                        return Math.floor(this.valueOf() / 1e3)
                    }, u.valueOf = function() {
                        return this.$d.getTime()
                    }, u.startOf = function(e, l) {
                        var o = this,
                            c = !!h.u(l) || l,
                            m = h.p(e),
                            u = function(e, n) {
                                var t = h.w(o.$u ? Date.UTC(o.$y, n, e) : new Date(o.$y, n, e), o);
                                return c ? t : t.endOf(a)
                            },
                            v = function(e, n) {
                                return h.w(o.toDate()[e].apply(o.toDate("s"), (c ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(n)), o)
                            },
                            k = this.$W,
                            g = this.$M,
                            p = this.$D,
                            _ = "set" + (this.$u ? "UTC" : "");
                        switch (m) {
                            case s:
                                return c ? u(1, 0) : u(31, 11);
                            case d:
                                return c ? u(1, g) : u(0, g + 1);
                            case r:
                                var S = this.$locale().weekStart || 0,
                                    N = (k < S ? k + 7 : k) - S;
                                return u(c ? p - N : p + (6 - N), g);
                            case a:
                            case "date":
                                return v(_ + "Hours", 0);
                            case i:
                                return v(_ + "Minutes", 1);
                            case t:
                                return v(_ + "Seconds", 2);
                            case n:
                                return v(_ + "Milliseconds", 3);
                            default:
                                return this.clone()
                        }
                    }, u.endOf = function(e) {
                        return this.startOf(e, !1)
                    }, u.$set = function(r, l) {
                        var o, c = h.p(r),
                            m = "set" + (this.$u ? "UTC" : ""),
                            u = (o = {}, o[a] = m + "Date", o.date = m + "Date", o[d] = m + "Month", o[s] = m + "FullYear", o[i] = m + "Hours", o[t] = m + "Minutes", o[n] = m + "Seconds", o[e] = m + "Milliseconds", o)[c],
                            v = c === a ? this.$D + (l - this.$W) : l;
                        if (c === d || c === s) {
                            var k = this.clone().set("date", 1);
                            k.$d[u](v), k.init(), this.$d = k.set("date", Math.min(this.$D, k.daysInMonth())).toDate()
                        } else u && this.$d[u](v);
                        return this.init(), this
                    }, u.set = function(e, n) {
                        return this.clone().$set(e, n)
                    }, u.get = function(e) {
                        return this[h.p(e)]()
                    }, u.add = function(e, l) {
                        var o, c = this;
                        e = Number(e);
                        var m = h.p(l),
                            u = function(n) {
                                var t = S(c);
                                return h.w(t.date(t.date() + Math.round(n * e)), c)
                            };
                        if (m === d) return this.set(d, this.$M + e);
                        if (m === s) return this.set(s, this.$y + e);
                        if (m === a) return u(1);
                        if (m === r) return u(7);
                        var v = (o = {}, o[t] = 6e4, o[i] = 36e5, o[n] = 1e3, o)[m] || 1,
                            k = this.$d.getTime() + e * v;
                        return h.w(k, this)
                    }, u.subtract = function(e, n) {
                        return this.add(-1 * e, n)
                    }, u.format = function(e) {
                        var n = this;
                        if (!this.isValid()) return "Invalid Date";
                        var t = e || "YYYY-MM-DDTHH:mm:ssZ",
                            i = h.z(this),
                            a = this.$locale(),
                            r = this.$H,
                            d = this.$m,
                            l = this.$M,
                            s = a.weekdays,
                            o = a.months,
                            m = function(e, i, a, r) {
                                return e && (e[i] || e(n, t)) || a[i].substr(0, r)
                            },
                            u = function(e) {
                                return h.s(r % 12 || 12, e, "0")
                            },
                            v = a.meridiem || function(e, n, t) {
                                var i = e < 12 ? "AM" : "PM";
                                return t ? i.toLowerCase() : i
                            },
                            k = {
                                YY: String(this.$y).slice(-2),
                                YYYY: this.$y,
                                M: l + 1,
                                MM: h.s(l + 1, 2, "0"),
                                MMM: m(a.monthsShort, l, o, 3),
                                MMMM: m(o, l),
                                D: this.$D,
                                DD: h.s(this.$D, 2, "0"),
                                d: String(this.$W),
                                dd: m(a.weekdaysMin, this.$W, s, 2),
                                ddd: m(a.weekdaysShort, this.$W, s, 3),
                                dddd: s[this.$W],
                                H: String(r),
                                HH: h.s(r, 2, "0"),
                                h: u(1),
                                hh: u(2),
                                a: v(r, d, !0),
                                A: v(r, d, !1),
                                m: String(d),
                                mm: h.s(d, 2, "0"),
                                s: String(this.$s),
                                ss: h.s(this.$s, 2, "0"),
                                SSS: h.s(this.$ms, 3, "0"),
                                Z: i
                            };
                        return t.replace(c, (function(e, n) {
                            return n || k[e] || i.replace(":", "")
                        }))
                    }, u.utcOffset = function() {
                        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15)
                    }, u.diff = function(e, o, c) {
                        var m, u = h.p(o),
                            v = S(e),
                            k = 6e4 * (v.utcOffset() - this.utcOffset()),
                            g = this - v,
                            p = h.m(this, v);
                        return p = (m = {}, m[s] = p / 12, m[d] = p, m[l] = p / 3, m[r] = (g - k) / 6048e5, m[a] = (g - k) / 864e5, m[i] = g / 36e5, m[t] = g / 6e4, m[n] = g / 1e3, m)[u] || g, c ? p : h.a(p)
                    }, u.daysInMonth = function() {
                        return this.endOf(d).$D
                    }, u.$locale = function() {
                        return g[this.$L]
                    }, u.locale = function(e, n) {
                        if (!e) return this.$L;
                        var t = this.clone(),
                            i = _(e, n, !0);
                        return i && (t.$L = i), t
                    }, u.clone = function() {
                        return h.w(this.$d, this)
                    }, u.toDate = function() {
                        return new Date(this.valueOf())
                    }, u.toJSON = function() {
                        return this.isValid() ? this.toISOString() : null
                    }, u.toISOString = function() {
                        return this.$d.toISOString()
                    }, u.toString = function() {
                        return this.$d.toUTCString()
                    }, m
                }();
                return S.prototype = N.prototype, S.extend = function(e, n) {
                    return e(n, N, S), S
                }, S.locale = _, S.isDayjs = p, S.unix = function(e) {
                    return S(1e3 * e)
                }, S.en = g[k], S.Ls = g, S
            }()
        },
        e65db334: function(e) {
            e.exports = function() {
                "use strict";
                var e, n = /(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
                    t = /\d\d/,
                    i = /\d\d?/,
                    a = /\d*[^\s\d-:/()]+/,
                    r = function(e) {
                        return function(n) {
                            this[e] = +n
                        }
                    },
                    d = [/[+-]\d\d:?\d\d/, function(e) {
                        var n, t;
                        (this.zone || (this.zone = {})).offset = 0 === (t = 60 * (n = e.match(/([+-]|\d\d)/g))[1] + +n[2]) ? 0 : "+" === n[0] ? -t : t
                    }],
                    l = function(n) {
                        var t = e[n];
                        return t && (t.indexOf ? t : t.s.concat(t.f))
                    },
                    s = {
                        A: [/[AP]M/, function(e) {
                            this.afternoon = "PM" === e
                        }],
                        a: [/[ap]m/, function(e) {
                            this.afternoon = "pm" === e
                        }],
                        S: [/\d/, function(e) {
                            this.milliseconds = 100 * +e
                        }],
                        SS: [t, function(e) {
                            this.milliseconds = 10 * +e
                        }],
                        SSS: [/\d{3}/, function(e) {
                            this.milliseconds = +e
                        }],
                        s: [i, r("seconds")],
                        ss: [i, r("seconds")],
                        m: [i, r("minutes")],
                        mm: [i, r("minutes")],
                        H: [i, r("hours")],
                        h: [i, r("hours")],
                        HH: [i, r("hours")],
                        hh: [i, r("hours")],
                        D: [i, r("day")],
                        DD: [t, r("day")],
                        Do: [a, function(n) {
                            var t = e.ordinal,
                                i = n.match(/\d+/);
                            if (this.day = i[0], t)
                                for (var a = 1; a <= 31; a += 1) t(a).replace(/\[|\]/g, "") === n && (this.day = a)
                        }],
                        M: [i, r("month")],
                        MM: [t, r("month")],
                        MMM: [a, function(e) {
                            var n = l("months"),
                                t = (l("monthsShort") || n.map((function(e) {
                                    return e.substr(0, 3)
                                }))).indexOf(e) + 1;
                            if (t < 1) throw new Error;
                            this.month = t % 12 || t
                        }],
                        MMMM: [a, function(e) {
                            var n = l("months").indexOf(e) + 1;
                            if (n < 1) throw new Error;
                            this.month = n % 12 || n
                        }],
                        Y: [/[+-]?\d+/, r("year")],
                        YY: [t, function(e) {
                            e = +e, this.year = e + (e > 68 ? 1900 : 2e3)
                        }],
                        YYYY: [/\d{4}/, r("year")],
                        Z: d,
                        ZZ: d
                    },
                    o = function(e, t, i) {
                        try {
                            var a = function(e) {
                                    for (var t = e.match(n), i = t.length, a = 0; a < i; a += 1) {
                                        var r = t[a],
                                            d = s[r],
                                            l = d && d[0],
                                            o = d && d[1];
                                        t[a] = o ? {
                                            regex: l,
                                            parser: o
                                        } : r.replace(/^\[|\]$/g, "")
                                    }
                                    return function(e) {
                                        for (var n = {}, a = 0, r = 0; a < i; a += 1) {
                                            var d = t[a];
                                            if ("string" == typeof d) r += d.length;
                                            else {
                                                var l = d.regex,
                                                    s = d.parser,
                                                    o = e.substr(r),
                                                    c = l.exec(o)[0];
                                                s.call(n, c), e = e.replace(c, "")
                                            }
                                        }
                                        return function(e) {
                                            var n = e.afternoon;
                                            if (void 0 !== n) {
                                                var t = e.hours;
                                                n ? t < 12 && (e.hours += 12) : 12 === t && (e.hours = 0), delete e.afternoon
                                            }
                                        }(n), n
                                    }
                                }(t)(e),
                                r = a.year,
                                d = a.month,
                                l = a.day,
                                o = a.hours,
                                c = a.minutes,
                                m = a.seconds,
                                u = a.milliseconds,
                                v = a.zone,
                                k = new Date,
                                g = l || (r || d ? 1 : k.getDate()),
                                p = r || k.getFullYear(),
                                _ = 0;
                            r && !d || (_ = d > 0 ? d - 1 : k.getMonth());
                            var S = o || 0,
                                h = c || 0,
                                N = m || 0,
                                E = u || 0;
                            return v ? new Date(Date.UTC(p, _, g, S, h, N, E + 60 * v.offset * 1e3)) : i ? new Date(Date.UTC(p, _, g, S, h, N, E)) : new Date(p, _, g, S, h, N, E)
                        } catch (e) {
                            return new Date("")
                        }
                    };
                return function(n, t, i) {
                    var a = t.prototype,
                        r = a.parse;
                    a.parse = function(n) {
                        var t = n.date,
                            a = n.utc,
                            d = n.args;
                        this.$u = a;
                        var l = d[1];
                        if ("string" == typeof l) {
                            var s = !0 === d[2],
                                c = !0 === d[3],
                                m = s || c,
                                u = d[2];
                            c && (u = d[2]), s || (e = u ? i.Ls[u] : this.$locale()), this.$d = o(t, l, a), this.init(), u && !0 !== u && (this.$L = this.locale(u).$L), m && t !== this.format(l) && (this.$d = new Date(""))
                        } else if (l instanceof Array)
                            for (var v = l.length, k = 1; k <= v; k += 1) {
                                d[1] = l[k - 1];
                                var g = i.apply(this, d);
                                if (g.isValid()) {
                                    this.$d = g.$d, this.$L = g.$L, this.init();
                                    break
                                }
                                k === v && (this.$d = new Date(""))
                            } else r.call(this, n)
                    }
                }
            }()
        },
        "7fd19181": function(e) {
            e.exports = function() {
                "use strict";
                return function(e, n) {
                    n.prototype.isSameOrBefore = function(e, n) {
                        return this.isSame(e, n) || this.isBefore(e, n)
                    }
                }
            }()
        },
        "8da416e8": function(e) {
            e.exports = function() {
                "use strict";
                return function(e, n, t) {
                    var i = (new Date).getTimezoneOffset(),
                        a = n.prototype;
                    t.utc = function(e) {
                        return new n({
                            date: e,
                            utc: !0,
                            args: arguments
                        })
                    }, a.utc = function() {
                        return t(this.toDate(), {
                            locale: this.$L,
                            utc: !0
                        })
                    }, a.local = function() {
                        return t(this.toDate(), {
                            locale: this.$L,
                            utc: !1
                        })
                    };
                    var r = a.parse;
                    a.parse = function(e) {
                        e.utc && (this.$u = !0), this.$utils().u(e.$offset) || (this.$offset = e.$offset), r.call(this, e)
                    };
                    var d = a.init;
                    a.init = function() {
                        if (this.$u) {
                            var e = this.$d;
                            this.$y = e.getUTCFullYear(), this.$M = e.getUTCMonth(), this.$D = e.getUTCDate(), this.$W = e.getUTCDay(), this.$H = e.getUTCHours(), this.$m = e.getUTCMinutes(), this.$s = e.getUTCSeconds(), this.$ms = e.getUTCMilliseconds()
                        } else d.call(this)
                    };
                    var l = a.utcOffset;
                    a.utcOffset = function(e) {
                        var n = this.$utils().u;
                        if (n(e)) return this.$u ? 0 : n(this.$offset) ? l.call(this) : this.$offset;
                        var t, a = Math.abs(e) <= 16 ? 60 * e : e;
                        return 0 !== e ? (t = this.local().add(a + i, "minute")).$offset = a : t = this.utc(), t
                    };
                    var s = a.format;
                    a.format = function(e) {
                        var n = e || (this.$u ? "YYYY-MM-DDTHH:mm:ss[Z]" : "");
                        return s.call(this, n)
                    }, a.valueOf = function() {
                        var e = this.$utils().u(this.$offset) ? 0 : this.$offset + i;
                        return this.$d.valueOf() - 6e4 * e
                    }, a.isUTC = function() {
                        return !!this.$u
                    }, a.toISOString = function() {
                        return this.toDate().toISOString()
                    }, a.toString = function() {
                        return this.toDate().toUTCString()
                    };
                    var o = a.toDate;
                    a.toDate = function(e) {
                        return "s" === e && this.$offset ? t(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate() : o.call(this)
                    }
                }
            }()
        },
        "8521b397": (e, n) => {
            var t;
            ! function() {
                "use strict";
                var i = {}.hasOwnProperty;

                function a() {
                    for (var e = "", n = 0; n < arguments.length; n++) {
                        var t = arguments[n];
                        t && (e = d(e, r(t)))
                    }
                    return e
                }

                function r(e) {
                    if ("string" === typeof e || "number" === typeof e) return e;
                    if ("object" !== typeof e) return "";
                    if (Array.isArray(e)) return a.apply(null, e);
                    if (e.toString !== Object.prototype.toString && !e.toString.toString().includes("[native code]")) return e.toString();
                    var n = "";
                    for (var t in e) i.call(e, t) && e[t] && (n = d(n, t));
                    return n
                }

                function d(e, n) {
                    return n ? e ? e + " " + n : e + n : e
                }
                e.exports ? (a.default = a, e.exports = a) : void 0 === (t = function() {
                    return a
                }.apply(n, [])) || (e.exports = t)
            }()
        },
        "9a67ad93": (e, n, t) => {
            "use strict";
            t.d(n, {
                YD: () => v,
                df: () => u
            });
            var i = t("ead71eb0"),
                a = Object.defineProperty,
                r = (e, n, t) => (((e, n, t) => {
                    n in e ? a(e, n, {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: t
                    }) : e[n] = t
                })(e, "symbol" !== typeof n ? n + "" : n, t), t),
                d = new Map,
                l = new WeakMap,
                s = 0,
                o = void 0;

            function c(e) {
                return Object.keys(e).sort().filter((n => void 0 !== e[n])).map((n => {
                    return `${n}_${"root"===n?(t=e.root,t?(l.has(t)||(s+=1,l.set(t,s.toString())),l.get(t)):"0"):e[n]}`;
                    var t
                })).toString()
            }

            function m(e, n) {
                let t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
                    i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : o;
                if ("undefined" === typeof window.IntersectionObserver && void 0 !== i) {
                    const a = e.getBoundingClientRect();
                    return n(i, {
                        isIntersecting: i,
                        target: e,
                        intersectionRatio: "number" === typeof t.threshold ? t.threshold : 0,
                        time: 0,
                        boundingClientRect: a,
                        intersectionRect: a,
                        rootBounds: a
                    }), () => {}
                }
                const {
                    id: a,
                    observer: r,
                    elements: l
                } = function(e) {
                    const n = c(e);
                    let t = d.get(n);
                    if (!t) {
                        const i = new Map;
                        let a;
                        const r = new IntersectionObserver((n => {
                            n.forEach((n => {
                                var t;
                                const r = n.isIntersecting && a.some((e => n.intersectionRatio >= e));
                                e.trackVisibility && "undefined" === typeof n.isVisible && (n.isVisible = r), null == (t = i.get(n.target)) || t.forEach((e => {
                                    e(r, n)
                                }))
                            }))
                        }), e);
                        a = r.thresholds || (Array.isArray(e.threshold) ? e.threshold : [e.threshold || 0]), t = {
                            id: n,
                            observer: r,
                            elements: i
                        }, d.set(n, t)
                    }
                    return t
                }(t), s = l.get(e) || [];
                return l.has(e) || l.set(e, s), s.push(n), r.observe(e),
                    function() {
                        s.splice(s.indexOf(n), 1), 0 === s.length && (l.delete(e), r.unobserve(e)), 0 === l.size && (r.disconnect(), d.delete(a))
                    }
            }
            var u = class extends i.Component {
                constructor(e) {
                    super(e), r(this, "node", null), r(this, "_unobserveCb", null), r(this, "handleNode", (e => {
                        this.node && (this.unobserve(), e || this.props.triggerOnce || this.props.skip || this.setState({
                            inView: !!this.props.initialInView,
                            entry: void 0
                        })), this.node = e || null, this.observeNode()
                    })), r(this, "handleChange", ((e, n) => {
                        e && this.props.triggerOnce && this.unobserve(),
                            function(e) {
                                return "function" !== typeof e.children
                            }(this.props) || this.setState({
                                inView: e,
                                entry: n
                            }), this.props.onChange && this.props.onChange(e, n)
                    })), this.state = {
                        inView: !!e.initialInView,
                        entry: void 0
                    }
                }
                componentDidMount() {
                    this.unobserve(), this.observeNode()
                }
                componentDidUpdate(e) {
                    e.rootMargin === this.props.rootMargin && e.root === this.props.root && e.threshold === this.props.threshold && e.skip === this.props.skip && e.trackVisibility === this.props.trackVisibility && e.delay === this.props.delay || (this.unobserve(), this.observeNode())
                }
                componentWillUnmount() {
                    this.unobserve()
                }
                observeNode() {
                    if (!this.node || this.props.skip) return;
                    const {
                        threshold: e,
                        root: n,
                        rootMargin: t,
                        trackVisibility: i,
                        delay: a,
                        fallbackInView: r
                    } = this.props;
                    this._unobserveCb = m(this.node, this.handleChange, {
                        threshold: e,
                        root: n,
                        rootMargin: t,
                        trackVisibility: i,
                        delay: a
                    }, r)
                }
                unobserve() {
                    this._unobserveCb && (this._unobserveCb(), this._unobserveCb = null)
                }
                render() {
                    const {
                        children: e
                    } = this.props;
                    if ("function" === typeof e) {
                        const {
                            inView: n,
                            entry: t
                        } = this.state;
                        return e({
                            inView: n,
                            entry: t,
                            ref: this.handleNode
                        })
                    }
                    const {
                        as: n,
                        triggerOnce: t,
                        threshold: a,
                        root: r,
                        rootMargin: d,
                        onChange: l,
                        skip: s,
                        trackVisibility: o,
                        delay: c,
                        initialInView: m,
                        fallbackInView: u,
                        ...v
                    } = this.props;
                    return i.createElement(n || "div", {
                        ref: this.handleNode,
                        ...v
                    }, e)
                }
            };

            function v() {
                let {
                    threshold: e,
                    delay: n,
                    trackVisibility: t,
                    rootMargin: a,
                    root: r,
                    triggerOnce: d,
                    skip: l,
                    initialInView: s,
                    fallbackInView: o,
                    onChange: c
                } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                var u;
                const [v, k] = i.useState(null), g = i.useRef(), [p, _] = i.useState({
                    inView: !!s,
                    entry: void 0
                });
                g.current = c, i.useEffect((() => {
                    if (l || !v) return;
                    let i;
                    return i = m(v, ((e, n) => {
                        _({
                            inView: e,
                            entry: n
                        }), g.current && g.current(e, n), n.isIntersecting && d && i && (i(), i = void 0)
                    }), {
                        root: r,
                        rootMargin: a,
                        threshold: e,
                        trackVisibility: t,
                        delay: n
                    }, o), () => {
                        i && i()
                    }
                }), [Array.isArray(e) ? e.toString() : e, v, r, a, d, l, t, o, n]);
                const S = null == (u = p.entry) ? void 0 : u.target,
                    h = i.useRef();
                v || !S || d || l || h.current === S || (h.current = S, _({
                    inView: !!s,
                    entry: void 0
                }));
                const N = [k, p.inView, p.entry];
                return N.ref = N[0], N.inView = N[1], N.entry = N[2], N
            }
        }
    }
]);
//# sourceMappingURL=https://istatic.booking.com/internal-static/capla/static/js/c8637181.1e1c432c.chunk.js.map